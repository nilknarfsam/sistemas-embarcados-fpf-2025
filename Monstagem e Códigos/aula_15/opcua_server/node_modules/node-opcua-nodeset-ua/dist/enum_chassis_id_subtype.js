"use strict";
// ----- this file has been automatically generated - do not edit
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumChassisIdSubtype = void 0;
/**
 * |           |                                                            |
 * |-----------|------------------------------------------------------------|
 * | namespace |http://opcfoundation.org/UA/                                |
 * | nodeClass |DataType                                                    |
 * | name      |ChassisIdSubtype                                            |
 * | isAbstract|false                                                       |
 */
var EnumChassisIdSubtype;
(function (EnumChassisIdSubtype) {
    /**
     * Represents a chassis identifier based on the
     * value of entPhysicalAlias object (defined in IETF
     * RFC 2737) for a chassis component (i.e., an
     * entPhysicalClass value of chassis(3))
     */
    EnumChassisIdSubtype[EnumChassisIdSubtype["ChassisComponent"] = 1] = "ChassisComponent";
    /**
     * Represents a chassis identifier based on the
     * value of ifAlias object (defined in IETF RFC
     * 2863) for an interface on the containing chassis.
     */
    EnumChassisIdSubtype[EnumChassisIdSubtype["InterfaceAlias"] = 2] = "InterfaceAlias";
    /**
     * Represents a chassis identifier based on the
     * value of entPhysicalAlias object (defined in IETF
     * RFC 2737) for a port or backplane component
     * (i.e., entPhysicalClass has a value of port(10),
     * or backplane(4)), within the containing chassis.
     */
    EnumChassisIdSubtype[EnumChassisIdSubtype["PortComponent"] = 3] = "PortComponent";
    /**
     * Represents a chassis identifier based on the
     * value of a unicast source address (encoded in
     * network byte order and IEEE 802.3 canonical bit
     * order) of a port on the containing chassis as
     * defined in IEEE Std 802-2014.
     */
    EnumChassisIdSubtype[EnumChassisIdSubtype["MacAddress"] = 4] = "MacAddress";
    /**
     * Represents a chassis identifier based on a
     * network address associated with a particular
     * chassis. The encoded address is actually composed
     * of two fields. The first field is a single octet,
     * representing the IANA AddressFamilyNumbers value
     * for the specific address type, and the second
     * field is the network address value.
     */
    EnumChassisIdSubtype[EnumChassisIdSubtype["NetworkAddress"] = 5] = "NetworkAddress";
    /**
     * Represents a chassis identifier based on the
     * value of ifName object (defined in IETF RFC 2863)
     * for an interface on the containing chassis.
     */
    EnumChassisIdSubtype[EnumChassisIdSubtype["InterfaceName"] = 6] = "InterfaceName";
    /**
     * Represents a chassis identifier based on a
     * locally defined value.
     */
    EnumChassisIdSubtype[EnumChassisIdSubtype["Local"] = 7] = "Local";
})(EnumChassisIdSubtype || (exports.EnumChassisIdSubtype = EnumChassisIdSubtype = {}));
//# sourceMappingURL=enum_chassis_id_subtype.js.map