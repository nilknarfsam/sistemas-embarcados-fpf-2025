{"version":3,"sources":["../../source/index_web.ts","../../source/asn1.ts","../../source/oid_map.ts","../../source/crypto_utils.ts","../../source/buffer_utils.ts","../../source/crypto_explore_certificate.ts","../../source/directory_name.ts","../../source/explore_private_key.ts","../../source/public_private_match.ts","../../source/common.ts","../../source/crypto_utils2.ts","../../source/derived_keys.ts","../../source/explore_certificate.ts","../../source/explore_asn1.ts","../../source/explore_certificate_revocation_list.ts","../../source/explore_certificate_signing_request.ts","../../source/make_private_key_from_pem.ts","../../source/make_private_key_thumbprint.ts","../../source/subject.ts","../../source/verify_certificate_signature.ts","../../source/x509/_crypto.ts","../../source/x509/create_key_pair.ts","../../source/x509/coerce_private_key.ts","../../source/x509/_get_attributes.ts","../../source/x509/_build_public_key.ts","../../source/x509/create_certificate_signing_request.ts","../../../../node_modules/asn1js/build/index.es.js","../../../../node_modules/pvtsutils/build/index.es.js","../../../../node_modules/pvutils/build/utils.es.js","../../../../node_modules/@peculiar/asn1-schema/build/es2015/enums.js","../../../../node_modules/@peculiar/asn1-schema/build/es2015/converters.js","../../../../node_modules/@peculiar/asn1-schema/build/es2015/helper.js","../../../../node_modules/@peculiar/asn1-schema/build/es2015/schema.js","../../../../node_modules/@peculiar/asn1-schema/build/es2015/storage.js","../../../../node_modules/@peculiar/asn1-schema/build/es2015/errors/schema_validation.js","../../../../node_modules/@peculiar/asn1-schema/build/es2015/parser.js","../../../../node_modules/@peculiar/asn1-schema/build/es2015/serializer.js","../../../../node_modules/@peculiar/asn1-schema/build/es2015/convert.js","../../source/x509/create_self_signed_certificate.ts"],"sourcesContent":["// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\n/**\n * @module node_opcua_crypto\n */\nexport { publicKeyAndPrivateKeyMatches, certificateMatchesPrivateKey } from \"./public_private_match.js\";\n//xx export * from \"./asn1.js\";\nexport * from \"./common.js\";\nexport * from \"./crypto_explore_certificate.js\";\nexport * from \"./crypto_utils.js\";\nexport * from \"./crypto_utils2.js\";\nexport * from \"./derived_keys.js\";\nexport * from \"./explore_asn1.js\";\nexport * from \"./explore_certificate_revocation_list.js\";\nexport * from \"./explore_certificate_signing_request.js\";\nexport * from \"./explore_certificate.js\";\nexport * from \"./explore_certificate.js\";\nexport * from \"./explore_private_key.js\";\nexport * from \"./make_private_key_from_pem.js\";\nexport * from \"./make_private_key_thumbprint.js\";\nexport * from \"./subject.js\";\nexport * from \"./verify_certificate_signature.js\";\nexport * from \"./x509/coerce_private_key.js\";\nexport * from \"./x509/create_certificate_signing_request.js\";\nexport * from \"./x509/create_key_pair.js\";\nexport * from \"./x509/create_self_signed_certificate.js\";\nexport { DirectoryName } from \"./directory_name.js\";\n\nimport { readDirectoryName } from \"./directory_name.js\";\nimport { readTag, readStruct, readAlgorithmIdentifier, readSignatureValueBin } from \"./asn1.js\";\nexport const asn1 = { readDirectoryName, readTag, readStruct, readAlgorithmIdentifier, readSignatureValueBin };\n","import assert from \"assert\";\nimport { oid_map } from \"./oid_map.js\";\nimport { DirectoryName } from \"./directory_name.js\";\n// https://github.com/lapo-luchini/asn1js/blob/master/asn1.js\nexport enum TagType {\n    BOOLEAN = 0x01,\n    INTEGER = 0x02,\n    BIT_STRING = 0x03,\n    OCTET_STRING = 0x04,\n    NULL = 0x05,\n    OBJECT_IDENTIFIER = 0x06,\n    UTF8String = 0x0c,\n    NumericString = 0x12,\n    PrintableString = 0x13,\n    TeletexString = 0x14,\n    IA5String = 0x16,\n    UTCTime = 0x17,\n    GeneralizedTime = 0x18,\n    GraphicString = 0x19,\n    VisibleString = 0x1a,\n    GeneralString = 0x1b,\n    UniversalString = 0x1c,\n    BMPString = 0x1e,\n\n    SEQUENCE = 0x30,\n\n    SET = 0x31,\n\n    CONTEXT_SPECIFIC0 = 0xa0,\n    CONTEXT_SPECIFIC1 = 0xa1,\n    CONTEXT_SPECIFIC2 = 0xa2,\n    CONTEXT_SPECIFIC3 = 0xa3,\n    A4 = 0xa4,\n}\n\nexport interface BlockInfo {\n    tag: TagType | number;\n    position: number;\n    length: number;\n    start: number;\n}\n\nexport function readTag(buf: Buffer, pos: number): BlockInfo {\n    const start = pos;\n    // istanbul ignore next\n    if (buf.length <= pos) {\n        throw new Error(\"Invalid position : buf.length=\" + buf.length + \" pos =\" + pos);\n    }\n    const tag = buf.readUInt8(pos);\n    pos += 1;\n\n    let length = buf.readUInt8(pos);\n    pos += 1;\n\n    // tslint:disable:no-bitwise\n    if (length > 127) {\n        const nbBytes = length & 0x7f;\n        length = 0;\n        for (let i = 0; i < nbBytes; i++) {\n            length = length * 256 + buf.readUInt8(pos);\n            pos += 1;\n        }\n    }\n    return { start, tag, position: pos, length };\n}\n\nexport function readStruct(buf: Buffer, blockInfo: BlockInfo): BlockInfo[] {\n    const length = blockInfo.length;\n    let cursor = blockInfo.position;\n    const end = blockInfo.position + length;\n    const blocks: BlockInfo[] = [];\n    while (cursor < end) {\n        const inner = readTag(buf, cursor);\n        cursor = inner.position + inner.length;\n        blocks.push(inner);\n    }\n    return blocks;\n}\n\nexport function parseBitString(buffer: Buffer, start: number, end: number, maxLength: number): string {\n    const unusedBit = buffer.readUInt8(start),\n        lenBit = ((end - start - 1) << 3) - unusedBit,\n        intro = \"(\" + lenBit + \" bit)\\n\";\n\n    let s = \"\",\n        skip = unusedBit;\n\n    for (let i = end - 1; i > start; --i) {\n        const b = buffer.readUInt8(i);\n\n        for (let j = skip; j < 8; ++j) {\n            // noinspection JSBitwiseOperatorUsage\n            s += (b >> j) & 1 ? \"1\" : \"0\";\n        }\n        skip = 0;\n        assert(s.length <= maxLength);\n    }\n    return intro + s;\n}\n\nexport interface BitString {\n    lengthInBits: number;\n    lengthInBytes: number;\n    data: Buffer;\n    debug?: any;\n}\n\nexport function readBitString(buffer: Buffer, block: BlockInfo): BitString {\n    assert(block.tag === TagType.BIT_STRING);\n    const data = getBlock(buffer, block);\n    // number of skipped bits\n    const ignore_bits = data.readUInt8(0);\n\n    return {\n        lengthInBits: data.length * 8 - ignore_bits,\n        lengthInBytes: data.length - 1,\n        data: data.subarray(1),\n        debug: parseBitString(buffer, block.position, block.length + block.position, 4 * 16 * 1024),\n    };\n}\n\nexport function formatBuffer2DigitHexWithColum(buffer: Buffer): string {\n    const value: string[] = [];\n    for (let i = 0; i < buffer.length; i++) {\n        value.push((\"00\" + buffer.readUInt8(i).toString(16)).substr(-2, 2));\n    }\n    // remove leading 00\n    return value\n        .join(\":\")\n        .toUpperCase()\n        .replace(/^(00:)*/, \"\");\n}\n\nexport function readOctetString(buffer: Buffer, block: BlockInfo): Buffer {\n    assert(block.tag === TagType.OCTET_STRING);\n    const tag = readTag(buffer, block.position);\n    assert(tag.tag === TagType.OCTET_STRING);\n\n    const nbBytes = tag.length;\n    const pos = tag.position;\n    const b = buffer.subarray(pos, pos + nbBytes);\n    return b;\n}\n\nexport function getBlock(buffer: Buffer, block: BlockInfo): Buffer {\n    const start = block.position;\n    const end = block.position + block.length;\n    return buffer.subarray(start, end);\n}\n\nexport interface AlgorithmIdentifier {\n    identifier: string;\n}\n\nexport function readIntegerAsByteString(buffer: Buffer, block: BlockInfo): Buffer {\n    return getBlock(buffer, block);\n}\n\nexport function readListOfInteger(buffer: Buffer): Buffer[] {\n    const block = readTag(buffer, 0);\n    const inner_blocks = readStruct(buffer, block);\n    return inner_blocks.map((innerBlock: BlockInfo) => {\n        return readIntegerAsByteString(buffer, innerBlock);\n    });\n}\n\nfunction parseOID(buffer: Buffer, start: number, end: number): string {\n    // ASN.1 JavaScript decoder\n    // Copyright (c) 2008-2014 Lapo Luchini <lapo@lapo.it>\n    let s = \"\",\n        n = 0,\n        bits = 0;\n    for (let i = start; i < end; ++i) {\n        const v = buffer.readUInt8(i);\n\n        // tslint:disable-next-line: no-bitwise\n        n = n * 128 + (v & 0x7f);\n        bits += 7;\n\n        // noinspection JSBitwiseOperatorUsage\n        // tslint:disable-next-line: no-bitwise\n        if (!(v & 0x80)) {\n            // finished\n            if (s === \"\") {\n                const m = n < 80 ? (n < 40 ? 0 : 1) : 2;\n                s = m + \".\" + (n - m * 40);\n            } else {\n                s += \".\" + n.toString();\n            }\n            n = 0;\n            bits = 0;\n        }\n    }\n    assert(bits === 0); // if (bits > 0) { s += \".incomplete\"; }\n    return s;\n}\n\nexport function readObjectIdentifier(buffer: Buffer, block: BlockInfo): { oid: string; name: string } {\n    assert(block.tag === TagType.OBJECT_IDENTIFIER);\n    const b = buffer.subarray(block.position, block.position + block.length);\n    const oid = parseOID(b, 0, block.length);\n    return {\n        oid,\n        name: oid_map[oid] ? oid_map[oid].d : oid,\n    };\n}\n\nexport function readAlgorithmIdentifier(buffer: Buffer, block: BlockInfo): AlgorithmIdentifier {\n    const inner_blocks = readStruct(buffer, block);\n    return {\n        identifier: readObjectIdentifier(buffer, inner_blocks[0]).name,\n    };\n}\n\nexport function readECCAlgorithmIdentifier(buffer: Buffer, block: BlockInfo): AlgorithmIdentifier {\n    const inner_blocks = readStruct(buffer, block);\n    return {\n        identifier: readObjectIdentifier(buffer, inner_blocks[1]).name, // difference with RSA as algorithm is second element of nested block\n    };\n}\n\nexport type SignatureValue = string;\n\nexport function readSignatureValueBin(buffer: Buffer, block: BlockInfo): Buffer {\n    return readBitString(buffer, block).data;\n}\n\nexport function readSignatureValue(buffer: Buffer, block: BlockInfo): SignatureValue {\n    return readSignatureValueBin(buffer, block).toString(\"hex\");\n}\n\nexport function readLongIntegerValue(buffer: Buffer, block: BlockInfo): Buffer {\n    assert(block.tag === TagType.INTEGER, \"expecting a INTEGER tag\");\n    const pos = block.position;\n    const nbBytes = block.length;\n    const buf = buffer.subarray(pos, pos + nbBytes);\n    return buf;\n}\n\nexport function readIntegerValue(buffer: Buffer, block: BlockInfo): number {\n    assert(block.tag === TagType.INTEGER, \"expecting a INTEGER tag\");\n    let pos = block.position;\n    const nbBytes = block.length;\n    assert(nbBytes < 4);\n    let value = 0;\n    for (let i = 0; i < nbBytes; i++) {\n        value = value * 256 + buffer.readUInt8(pos);\n        pos += 1;\n    }\n    return value;\n}\n\nexport function readBooleanValue(buffer: Buffer, block: BlockInfo): boolean {\n    assert(block.tag === TagType.BOOLEAN, \"expecting a BOOLEAN tag. got \" + TagType[block.tag]);\n    const pos = block.position;\n    const nbBytes = block.length;\n    assert(nbBytes < 4);\n    const value = buffer.readUInt8(pos) ? true : false;\n    return value as boolean;\n}\n\nexport function readVersionValue(buffer: Buffer, block: BlockInfo): number {\n    block = readTag(buffer, block.position);\n    return readIntegerValue(buffer, block);\n}\n\n/*\n 4.1.2.5.2  GeneralizedTime\n\n The generalized time type, GeneralizedTime, is a standard ASN.1 type\n for variable precision representation of time.  Optionally, the\n GeneralizedTime field can include a representation of the time\n differential between local and Greenwich Mean Time.\n\n For the purposes of this profile, GeneralizedTime values MUST be\n expressed Greenwich Mean Time (Zulu) and MUST include seconds (i.e.,\n times are YYYYMMDDHHMMSSZ), even where the number of seconds is zero.\n GeneralizedTime values MUST NOT include fractional seconds.\n\n */\nfunction convertGeneralizedTime(str: string): Date {\n    const year = parseInt(str.substr(0, 4), 10);\n    const month = parseInt(str.substr(4, 2), 10) - 1;\n    const day = parseInt(str.substr(6, 2), 10);\n    const hours = parseInt(str.substr(8, 2), 10);\n    const mins = parseInt(str.substr(10, 2), 10);\n    const secs = parseInt(str.substr(12, 2), 10);\n\n    return new Date(Date.UTC(year, month, day, hours, mins, secs));\n}\n\nfunction _readBMPString(buffer: Buffer, block: BlockInfo): string {\n    const strBuff = getBlock(buffer, block);\n    let str = \"\";\n    for (let i = 0; i < strBuff.length; i += 2) {\n        const word = strBuff.readUInt16BE(i);\n        str += String.fromCharCode(word);\n    }\n    return str;\n}\n\n/*\n http://tools.ietf.org/html/rfc5280\n\n 4.1.2.5. Validity\n [...]\n As conforming to this profile MUST always encode certificate\n validity dates through the year 2049 as UTCTime; certificate validity\n dates in 2050 or later MUST be encoded as GeneralizedTime.\n Conforming applications MUST be able to process validity dates that\n are encoded in either UTCTime or GeneralizedTime.\n [...]\n\n 4.1.2.5.1  UTCTime\n\n The universal time type, UTCTime, is a standard ASN.1 type intended\n for representation of dates and time.  UTCTime specifies the year\n through the two low order digits and time is specified to the\n precision of one minute or one second.  UTCTime includes either Z\n (for Zulu, or Greenwich Mean Time) or a time differential.\n\n For the purposes of this profile, UTCTime values MUST be expressed\n Greenwich Mean Time (Zulu) and MUST include seconds (i.e., times are\n YYMMDDHHMMSSZ), even where the number of seconds is zero.  Conforming\n systems MUST interpret the year field (YY) as follows:\n\n Where YY is greater than or equal to 50, the year SHALL be\n interpreted as 19YY; and\n\n Where YY is less than 50, the year SHALL be interpreted as 20YY.\n */\nfunction convertUTCTime(str: string): Date {\n    let year = parseInt(str.substr(0, 2), 10);\n    const month = parseInt(str.substr(2, 2), 10) - 1;\n    const day = parseInt(str.substr(4, 2), 10);\n    const hours = parseInt(str.substr(6, 2), 10);\n    const mins = parseInt(str.substr(8, 2), 10);\n    const secs = parseInt(str.substr(10, 2), 10);\n\n    year += year >= 50 ? 1900 : 2000;\n    return new Date(Date.UTC(year, month, day, hours, mins, secs));\n}\n\nexport function readValue(buffer: Buffer, block: BlockInfo): any {\n    switch (block.tag) {\n        case TagType.BOOLEAN:\n            return readBooleanValue(buffer, block);\n        case TagType.BMPString:\n            return _readBMPString(buffer, block);\n        case TagType.PrintableString:\n        case TagType.TeletexString:\n        case TagType.UTF8String:\n        case TagType.NumericString:\n        case TagType.IA5String:\n            return getBlock(buffer, block).toString(\"ascii\");\n        case TagType.UTCTime:\n            return convertUTCTime(getBlock(buffer, block).toString(\"ascii\"));\n        case TagType.GeneralizedTime:\n            return convertGeneralizedTime(getBlock(buffer, block).toString(\"ascii\"));\n        default:\n            throw new Error(\"Invalid tag 0x\" + block.tag.toString(16) + \"\");\n        //xx return \" ??? <\" + block.tag + \">\";\n    }\n}\n\nexport function compactDirectoryName(d: DirectoryName): string {\n    return JSON.stringify(d);\n}\n\nexport function findBlockAtIndex(blocks: BlockInfo[], index: number): BlockInfo | null {\n    const tmp = blocks.filter((b: BlockInfo) => b.tag === 0xa0 + index || b.tag === 0x80 + index);\n    if (tmp.length === 0) {\n        return null;\n    }\n    return tmp[0];\n}\n\nexport function readTime(buffer: Buffer, block: BlockInfo): any {\n    return readValue(buffer, block);\n}\n","// https://github.com/lapo-luchini/asn1js/blob/master/oids.js\nexport const oid_map: { [key: string]: { d: string; c: string; w?: boolean } } = {\n    \"0.9.2342.19200300.100.1.1\": { d: \"userID\", c: \"Some oddball X.500 attribute collection\" },\n    \"0.9.2342.19200300.100.1.3\": { d: \"rfc822Mailbox\", c: \"Some oddball X.500 attribute collection\" },\n    \"0.9.2342.19200300.100.1.25\": { d: \"domainComponent\", c: \"Men are from Mars, this OID is from Pluto\" },\n\n    \"1.2.840.10045.2\": { d: \"publicKeyType\", c: \"ANSI X9.62\" },\n    \"1.2.840.10045.2.1\": { d: \"ecPublicKey\", c: \"ANSI X9.62 public key type\" },\n    \"1.2.840.10045.3.0.1\": { d: \"c2pnb163v1\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.2\": { d: \"c2pnb163v2\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.3\": { d: \"c2pnb163v3\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.5\": { d: \"c2tnb191v1\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.6\": { d: \"c2tnb191v2\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.7\": { d: \"c2tnb191v3\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.10\": { d: \"c2pnb208w1\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.11\": { d: \"c2tnb239v1\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.12\": { d: \"c2tnb239v2\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.13\": { d: \"c2tnb239v3\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.16\": { d: \"c2pnb272w1\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.18\": { d: \"c2tnb359v1\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.19\": { d: \"c2pnb368w1\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.0.20\": { d: \"c2tnb431r1\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.1.1\": { d: \"prime192v1\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.1.2\": { d: \"prime192v2\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.1.3\": { d: \"prime192v3\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.1.4\": { d: \"prime239v1\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.1.5\": { d: \"prime239v2\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.1.6\": { d: \"prime239v3\", c: \"ANSI X9.62 named elliptic curve\" },\n    \"1.2.840.10045.3.1.7\": { d: \"prime256v1\", c: \"ANSI X9.62 named elliptic curve\" },\n\n    \"1.2.840.113549.1.1\": { d: \"pkcs-1\", c: \"\", w: false },\n    \"1.2.840.113549.1.1.1\": { d: \"rsaEncryption\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.2\": { d: \"md2WithRSAEncryption\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.3\": { d: \"md4WithRSAEncryption\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.4\": { d: \"md5WithRSAEncryption\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.5\": { d: \"sha1WithRSAEncryption\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.7\": { d: \"rsaOAEP\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.8\": { d: \"pkcs1-MGF\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.9\": { d: \"rsaOAEP-pSpecified\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.10\": { d: \"rsaPSS\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.11\": { d: \"sha256WithRSAEncryption\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.12\": { d: \"sha384WithRSAEncryption\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.13\": { d: \"sha512WithRSAEncryption\", c: \"PKCS #1\", w: false },\n    \"1.2.840.113549.1.1.14\": { d: \"sha224WithRSAEncryption\", c: \"PKCS #1\", w: false },\n\n    \"1.2.840.113549.1.9.1\": {\n        d: \"emailAddress\",\n        c: \"PKCS #9. Deprecated, use an altName extension instead\",\n        w: false,\n    },\n    \"1.2.840.113549.1.9.2\": { d: \"unstructuredName\", c: \"PKCS #9\", w: false },\n    \"1.2.840.113549.1.9.3\": { d: \"contentType\", c: \"PKCS #9\", w: false },\n    \"1.2.840.113549.1.9.4\": { d: \"messageDigest\", c: \"PKCS #9\", w: false },\n    \"1.2.840.113549.1.9.5\": { d: \"signingTime\", c: \"PKCS #9\", w: false },\n    \"1.2.840.113549.1.9.6\": { d: \"countersignature\", c: \"PKCS #9\", w: false },\n    \"1.2.840.113549.1.9.7\": { d: \"challengePassword\", c: \"PKCS #9\", w: false },\n    \"1.2.840.113549.1.9.8\": { d: \"unstructuredAddress\", c: \"PKCS #9\", w: false },\n    \"1.2.840.113549.1.9.9\": { d: \"extendedCertificateAttributes\", c: \"PKCS #9\", w: false },\n    \"1.2.840.113549.1.9.10\": { d: \"issuerAndSerialNumber\", c: \"PKCS #9 experimental\", w: true },\n    \"1.2.840.113549.1.9.11\": { d: \"passwordCheck\", c: \"PKCS #9 experimental\", w: true },\n    \"1.2.840.113549.1.9.12\": { d: \"publicKey\", c: \"PKCS #9 experimental\", w: true },\n    \"1.2.840.113549.1.9.13\": { d: \"signingDescription\", c: \"PKCS #9\", w: false },\n    \"1.2.840.113549.1.9.14\": { d: \"extensionRequest\", c: \"PKCS #9 via CRMF\", w: false },\n\n    \"1.3.6.1.4.1.311.2.1.21\": { d: \"1.3.6.1.4.1.311.2.1.21\", c: \"SPC_INDIVIDUAL_SP_KEY_PURPOSE_OBJID\" },\n    \"1.3.6.1.4.1.311.2.1.22\": { d: \"1.3.6.1.4.1.311.2.1.22\", c: \"SPC_COMMERCIAL_SP_KEY_PURPOSE_OBJID\" },\n    \"1.3.6.1.4.1.311.10.3.1\": { d: \"1.3.6.1.4.1.311.10.3.1\", c: \"Signer of CTLs -- szOID_KP_CTL_USAGE_SIGNING\" },\n    \"1.3.6.1.4.1.311.10.3.4\": { d: \"1.3.6.1.4.1.311.10.3.4\", c: \"szOID_EFS_RECOVERY (Encryption File System)\" },\n\n    \"1.3.6.1.4.1.311.20.2.3\": { d: \"1.3.6.1.4.1.311.20.2.3\", c: \"id-on-personalData\" },\n\n    \"1.3.6.1.5.5.7.3.17\": { d: \"1.3.6.1.5.5.7.3.17\", c: \"Internet Key Exchange (IKE)\" },\n\n    \"1.3.6.1.5.5.7.3.1\": { d: \"serverAuth\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.2\": { d: \"clientAuth\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.3\": { d: \"codeSigning\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.4\": { d: \"emailProtection\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.5\": { d: \"ipsecEndSystem\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.6\": { d: \"ipsecTunnel\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.7\": { d: \"ipsecUser\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.8\": { d: \"timeStamping\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.9\": { d: \"ocspSigning\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.10\": { d: \"dvcs\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.11\": { d: \"sbgpCertAAServerAuth\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.13\": { d: \"eapOverPPP\", c: \"PKIX key purpose\" },\n    \"1.3.6.1.5.5.7.3.14\": { d: \"eapOverLAN\", c: \"PKIX key purpose\" },\n\n    \"1.3.36.3.3.2.8.1.1.1\": { d: \"brainpoolP160r1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.2\": { d: \"brainpoolP160t1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.3\": { d: \"brainpoolP192r1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.4\": { d: \"brainpoolP192t1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.5\": { d: \"brainpoolP224r1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.6\": { d: \"brainpoolP224t1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.7\": { d: \"brainpoolP256r1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.8\": { d: \"brainpoolP256t1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.9\": { d: \"brainpoolP320r1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.10\": { d: \"brainpoolP320t1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.11\": { d: \"brainpoolP384r1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.12\": { d: \"brainpoolP384t1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.13\": { d: \"brainpoolP512r1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n    \"1.3.36.3.3.2.8.1.1.14\": { d: \"brainpoolP512t1\", c: \"ECC Brainpool Standard Curves and Curve Generation\" },\n\n    \"2.5.4.0\": { d: \"objectClass\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.1\": { d: \"aliasedEntryName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.2\": { d: \"knowledgeInformation\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.3\": { d: \"commonName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.4\": { d: \"surname\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.5\": { d: \"serialNumber\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.6\": { d: \"countryName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.7\": { d: \"localityName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.7.1\": { d: \"collectiveLocalityName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.8\": { d: \"stateOrProvinceName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.8.1\": { d: \"collectiveStateOrProvinceName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.9\": { d: \"streetAddress\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.9.1\": { d: \"collectiveStreetAddress\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.10\": { d: \"organizationName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.10.1\": { d: \"collectiveOrganizationName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.11\": { d: \"organizationalUnitName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.11.1\": { d: \"collectiveOrganizationalUnitName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.12\": { d: \"title\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.13\": { d: \"description\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.14\": { d: \"searchGuide\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.15\": { d: \"businessCategory\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.16\": { d: \"postalAddress\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.16.1\": { d: \"collectivePostalAddress\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.17\": { d: \"postalCode\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.17.1\": { d: \"collectivePostalCode\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.18\": { d: \"postOfficeBox\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.18.1\": { d: \"collectivePostOfficeBox\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.19\": { d: \"physicalDeliveryOfficeName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.19.1\": { d: \"collectivePhysicalDeliveryOfficeName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.20\": { d: \"telephoneNumber\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.20.1\": { d: \"collectiveTelephoneNumber\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.21\": { d: \"telexNumber\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.21.1\": { d: \"collectiveTelexNumber\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.22\": { d: \"teletexTerminalIdentifier\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.22.1\": { d: \"collectiveTeletexTerminalIdentifier\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.23\": { d: \"facsimileTelephoneNumber\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.23.1\": { d: \"collectiveFacsimileTelephoneNumber\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.24\": { d: \"x121Address\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.25\": { d: \"internationalISDNNumber\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.25.1\": { d: \"collectiveInternationalISDNNumber\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.26\": { d: \"registeredAddress\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.27\": { d: \"destinationIndicator\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.28\": { d: \"preferredDeliveryMehtod\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.29\": { d: \"presentationAddress\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.30\": { d: \"supportedApplicationContext\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.31\": { d: \"member\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.32\": { d: \"owner\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.33\": { d: \"roleOccupant\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.34\": { d: \"seeAlso\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.35\": { d: \"userPassword\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.36\": { d: \"userCertificate\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.37\": { d: \"caCertificate\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.38\": { d: \"authorityRevocationList\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.39\": { d: \"certificateRevocationList\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.40\": { d: \"crossCertificatePair\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.41\": { d: \"name\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.42\": { d: \"givenName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.43\": { d: \"initials\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.44\": { d: \"generationQualifier\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.45\": { d: \"uniqueIdentifier\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.46\": { d: \"dnQualifier\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.47\": { d: \"enhancedSearchGuide\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.48\": { d: \"protocolInformation\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.49\": { d: \"distinguishedName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.50\": { d: \"uniqueMember\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.51\": { d: \"houseIdentifier\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.52\": { d: \"supportedAlgorithms\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.53\": { d: \"deltaRevocationList\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.54\": { d: \"dmdName\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.55\": { d: \"clearance\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.56\": { d: \"defaultDirQop\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.57\": { d: \"attributeIntegrityInfo\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.58\": { d: \"attributeCertificate\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.59\": { d: \"attributeCertificateRevocationList\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.60\": { d: \"confKeyInfo\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.61\": { d: \"aACertificate\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.62\": { d: \"attributeDescriptorCertificate\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.63\": { d: \"attributeAuthorityRevocationList\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.64\": { d: \"familyInformation\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.65\": { d: \"pseudonym\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.66\": { d: \"communicationsService\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.67\": { d: \"communicationsNetwork\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.68\": { d: \"certificationPracticeStmt\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.69\": { d: \"certificatePolicy\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.70\": { d: \"pkiPath\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.71\": { d: \"privPolicy\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.72\": { d: \"role\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.73\": { d: \"delegationPath\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.74\": { d: \"protPrivPolicy\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.75\": { d: \"xMLPrivilegeInfo\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.76\": { d: \"xmlPrivPolicy\", c: \"X.520 DN component\", w: false },\n    \"2.5.4.82\": { d: \"permission\", c: \"X.520 DN component\", w: false },\n    \"2.5.6.0\": { d: \"top\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.1\": { d: \"alias\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.2\": { d: \"country\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.3\": { d: \"locality\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.4\": { d: \"organization\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.5\": { d: \"organizationalUnit\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.6\": { d: \"person\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.7\": { d: \"organizationalPerson\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.8\": { d: \"organizationalRole\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.9\": { d: \"groupOfNames\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.10\": { d: \"residentialPerson\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.11\": { d: \"applicationProcess\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.12\": { d: \"applicationEntity\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.13\": { d: \"dSA\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.14\": { d: \"device\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.15\": { d: \"strongAuthenticationUser\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.16\": { d: \"certificateAuthority\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.17\": { d: \"groupOfUniqueNames\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.21\": { d: \"pkiUser\", c: \"X.520 objectClass\", w: false },\n    \"2.5.6.22\": { d: \"pkiCA\", c: \"X.520 objectClass\", w: false },\n\n    \"2.5.29.1\": { d: \"authorityKeyIdentifier\", c: \"X.509 extension. Deprecated, use 2 5 29 35 instead\", w: true },\n    \"2.5.29.2\": { d: \"keyAttributes\", c: \"X.509 extension. Obsolete, use keyUsage/extKeyUsage instead\", w: true },\n    \"2.5.29.3\": { d: \"certificatePolicies\", c: \"X.509 extension. Deprecated, use 2 5 29 32 instead\", w: true },\n    \"2.5.29.4\": {\n        d: \"keyUsageRestriction\",\n        c: \"X.509 extension. Obsolete, use keyUsage/extKeyUsage instead\",\n        w: true,\n    },\n    \"2.5.29.5\": { d: \"policyMapping\", c: \"X.509 extension. Deprecated, use 2 5 29 33 instead\", w: true },\n    \"2.5.29.6\": { d: \"subtreesConstraint\", c: \"X.509 extension. Obsolete, use nameConstraints instead\", w: true },\n    \"2.5.29.7\": { d: \"subjectAltName\", c: \"X.509 extension. Deprecated, use 2 5 29 17 instead\", w: true },\n    \"2.5.29.8\": { d: \"issuerAltName\", c: \"X.509 extension. Deprecated, use 2 5 29 18 instead\", w: true },\n    \"2.5.29.9\": { d: \"subjectDirectoryAttributes\", c: \"X.509 extension\", w: false },\n    \"2.5.29.10\": { d: \"basicConstraints\", c: \"X.509 extension. Deprecated, use 2 5 29 19 instead\", w: true },\n    \"2.5.29.11\": { d: \"nameConstraints\", c: \"X.509 extension. Deprecated, use 2 5 29 30 instead\", w: true },\n    \"2.5.29.12\": { d: \"policyConstraints\", c: \"X.509 extension. Deprecated, use 2 5 29 36 instead\", w: true },\n    \"2.5.29.13\": { d: \"basicConstraints\", c: \"X.509 extension. Deprecated, use 2 5 29 19 instead\", w: true },\n    \"2.5.29.14\": { d: \"subjectKeyIdentifier\", c: \"X.509 extension\", w: false },\n    \"2.5.29.15\": { d: \"keyUsage\", c: \"X.509 extension\", w: false },\n    \"2.5.29.16\": { d: \"privateKeyUsagePeriod\", c: \"X.509 extension\", w: false },\n    \"2.5.29.17\": { d: \"subjectAltName\", c: \"X.509 extension\", w: false },\n    \"2.5.29.18\": { d: \"issuerAltName\", c: \"X.509 extension\", w: false },\n    \"2.5.29.19\": { d: \"basicConstraints\", c: \"X.509 extension\", w: false },\n    \"2.5.29.20\": { d: \"cRLNumber\", c: \"X.509 extension\", w: false },\n    \"2.5.29.21\": { d: \"cRLReason\", c: \"X.509 extension\", w: false },\n    \"2.5.29.22\": { d: \"expirationDate\", c: \"X.509 extension. Deprecated, alternative OID uncertain\", w: true },\n    \"2.5.29.23\": { d: \"instructionCode\", c: \"X.509 extension\", w: false },\n    \"2.5.29.24\": { d: \"invalidityDate\", c: \"X.509 extension\", w: false },\n    \"2.5.29.25\": { d: \"cRLDistributionPoints\", c: \"X.509 extension. Deprecated, use 2 5 29 31 instead\", w: true },\n    \"2.5.29.26\": {\n        d: \"issuingDistributionPoint\",\n        c: \"X.509 extension. Deprecated, use 2 5 29 28 instead\",\n        w: true,\n    },\n    \"2.5.29.27\": { d: \"deltaCRLIndicator\", c: \"X.509 extension\", w: false },\n    \"2.5.29.28\": { d: \"issuingDistributionPoint\", c: \"X.509 extension\", w: false },\n    \"2.5.29.29\": { d: \"certificateIssuer\", c: \"X.509 extension\", w: false },\n    \"2.5.29.30\": { d: \"nameConstraints\", c: \"X.509 extension\", w: false },\n    \"2.5.29.31\": { d: \"cRLDistributionPoints\", c: \"X.509 extension\", w: false },\n    \"2.5.29.32\": { d: \"certificatePolicies\", c: \"X.509 extension\", w: false },\n    \"2.5.29.32.0\": { d: \"anyPolicy\", c: \"X.509 certificate policy\", w: false },\n    \"2.5.29.33\": { d: \"policyMappings\", c: \"X.509 extension\", w: false },\n    \"2.5.29.34\": { d: \"policyConstraints\", c: \"X.509 extension. Deprecated, use 2 5 29 36 instead\", w: true },\n    \"2.5.29.35\": { d: \"authorityKeyIdentifier\", c: \"X.509 extension\", w: false },\n    \"2.5.29.36\": { d: \"policyConstraints\", c: \"X.509 extension\", w: false },\n    \"2.5.29.37\": { d: \"extKeyUsage\", c: \"X.509 extension\", w: false },\n    \"2.5.29.37.0\": { d: \"anyExtendedKeyUsage\", c: \"X.509 extended key usage\", w: false },\n    \"2.5.29.38\": { d: \"authorityAttributeIdentifier\", c: \"X.509 extension\", w: false },\n    \"2.5.29.39\": { d: \"roleSpecCertIdentifier\", c: \"X.509 extension\", w: false },\n    \"2.5.29.40\": { d: \"cRLStreamIdentifier\", c: \"X.509 extension\", w: false },\n    \"2.5.29.41\": { d: \"basicAttConstraints\", c: \"X.509 extension\", w: false },\n    \"2.5.29.42\": { d: \"delegatedNameConstraints\", c: \"X.509 extension\", w: false },\n    \"2.5.29.43\": { d: \"timeSpecification\", c: \"X.509 extension\", w: false },\n    \"2.5.29.44\": { d: \"cRLScope\", c: \"X.509 extension\", w: false },\n    \"2.5.29.45\": { d: \"statusReferrals\", c: \"X.509 extension\", w: false },\n    \"2.5.29.46\": { d: \"freshestCRL\", c: \"X.509 extension\", w: false },\n    \"2.5.29.47\": { d: \"orderedList\", c: \"X.509 extension\", w: false },\n    \"2.5.29.48\": { d: \"attributeDescriptor\", c: \"X.509 extension\", w: false },\n    \"2.5.29.49\": { d: \"userNotice\", c: \"X.509 extension\", w: false },\n    \"2.5.29.50\": { d: \"sOAIdentifier\", c: \"X.509 extension\", w: false },\n    \"2.5.29.51\": { d: \"baseUpdateTime\", c: \"X.509 extension\", w: false },\n    \"2.5.29.52\": { d: \"acceptableCertPolicies\", c: \"X.509 extension\", w: false },\n    \"2.5.29.53\": { d: \"deltaInfo\", c: \"X.509 extension\", w: false },\n    \"2.5.29.54\": { d: \"inhibitAnyPolicy\", c: \"X.509 extension\", w: false },\n    \"2.5.29.55\": { d: \"targetInformation\", c: \"X.509 extension\", w: false },\n    \"2.5.29.56\": { d: \"noRevAvail\", c: \"X.509 extension\", w: false },\n    \"2.5.29.57\": { d: \"acceptablePrivilegePolicies\", c: \"X.509 extension\", w: false },\n    \"2.5.29.58\": { d: \"toBeRevoked\", c: \"X.509 extension\", w: false },\n    \"2.5.29.59\": { d: \"revokedGroups\", c: \"X.509 extension\", w: false },\n    \"2.5.29.60\": { d: \"expiredCertsOnCRL\", c: \"X.509 extension\", w: false },\n    \"2.5.29.61\": { d: \"indirectIssuer\", c: \"X.509 extension\", w: false },\n    \"2.5.29.62\": { d: \"noAssertion\", c: \"X.509 extension\", w: false },\n    \"2.5.29.63\": { d: \"aAissuingDistributionPoint\", c: \"X.509 extension\", w: false },\n    \"2.5.29.64\": { d: \"issuedOnBehalfOf\", c: \"X.509 extension\", w: false },\n    \"2.5.29.65\": { d: \"singleUse\", c: \"X.509 extension\", w: false },\n    \"2.5.29.66\": { d: \"groupAC\", c: \"X.509 extension\", w: false },\n    \"2.5.29.67\": { d: \"allowedAttAss\", c: \"X.509 extension\", w: false },\n    \"2.5.29.68\": { d: \"attributeMappings\", c: \"X.509 extension\", w: false },\n    \"2.5.29.69\": { d: \"holderNameConstraints\", c: \"X.509 extension\", w: false },\n\n    // Netscape certificate type\n    // An X.509 v3 certificate extension used to identify whether\n    // the certificate subject is an SSL client, …\n    \"2.16.840.1.113730.1\": { d: \"certExtension\", c: \"Netscape\" },\n    \"2.16.840.1.113730.1.1\": { d: \"netscapeCertType\", c: \"Netscape certificate extension\" },\n    \"2.16.840.1.113730.1.2\": { d: \"netscapeBaseUrl\", c: \"Netscape certificate extension\" },\n    \"2.16.840.1.113730.1.3\": { d: \"netscapeRevocationUrl\", c: \"Netscape certificate extension\" },\n    \"2.16.840.1.113730.1.4\": { d: \"netscapeCaRevocationUrl\", c: \"Netscape certificate extension\" },\n    \"2.16.840.1.113730.1.7\": { d: \"netscapeCertRenewalUrl\", c: \"Netscape certificate extension\" },\n    \"2.16.840.1.113730.1.8\": { d: \"netscapeCaPolicyUrl\", c: \"Netscape certificate extension\" },\n    \"2.16.840.1.113730.1.9\": { d: \"HomePageUrl\", c: \"Netscape certificate extension\" },\n    \"2.16.840.1.113730.1.10\": { d: \"EntityLogo\", c: \"Netscape certificate extension\" },\n    \"2.16.840.1.113730.1.11\": { d: \"UserPicture\", c: \"Netscape certificate extension\" },\n    \"2.16.840.1.113730.1.12\": { d: \"netscapeSslServerName\", c: \"Netscape certificate extension\" },\n    \"2.16.840.1.113730.1.13\": { d: \"netscapeComment\", c: \"Netscape certificate extension\" },\n\n    done: { d: \"\", c: \"\" },\n};\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\n// tslint:disabled:no-var-requires\n/**\n * @module node_opcua_crypto\n */\nimport constants from \"constants\";\nimport assert from \"assert\";\nimport {\n    createHash,\n    createSign,\n    createVerify,\n    publicEncrypt as publicEncrypt1,\n    privateDecrypt as privateDecrypt1,\n    KeyLike,\n    KeyObject,\n} from \"crypto\";\n\nimport pkg_hexy from \"hexy\";\nconst { hexy } = pkg_hexy;\n\nimport { createFastUninitializedBuffer } from \"./buffer_utils.js\";\nimport { Certificate, CertificatePEM, DER, PEM, PublicKeyPEM, Signature, PrivateKey } from \"./common.js\";\nimport { combine_der } from \"./crypto_explore_certificate.js\";\nimport jsrsasign from \"jsrsasign\";\n\nconst PEM_REGEX = /^(-----BEGIN (.*)-----\\r?\\n([/+=a-zA-Z0-9\\r\\n]*)\\r?\\n-----END \\2-----\\r?\\n?)/gm;\n\nconst PEM_TYPE_REGEX = /^(-----BEGIN (.*)-----)/m;\n// Copyright 2012 The Obvious Corporation.\n// identifyPemType\n\n/*=\n * Extract and identify the PEM file type represented in the given\n * buffer. Returns the extracted type string or undefined if the\n * buffer doesn't seem to be any sort of PEM format file.\n */\nexport function identifyPemType(rawKey: Buffer | string): undefined | string {\n    if (Buffer.isBuffer(rawKey)) {\n        rawKey = rawKey.toString(\"utf8\");\n    }\n    const match = PEM_TYPE_REGEX.exec(rawKey as string);\n    return !match ? undefined : match[2];\n}\n\nexport function removeTrailingLF(str: string): string {\n    const tmp = str.replace(/(\\r|\\n)+$/m, \"\").replace(/\\r\\n/gm, \"\\n\");\n    return tmp;\n}\n\nexport function toPem(raw_key: Buffer | string, pem: string): string {\n    assert(raw_key, \"expecting a key\");\n    assert(typeof pem === \"string\");\n    let pemType = identifyPemType(raw_key);\n    if (pemType) {\n        return Buffer.isBuffer(raw_key)\n            ? removeTrailingLF((raw_key as Buffer).toString(\"utf8\"))\n            : removeTrailingLF(raw_key as string);\n    } else {\n        pemType = pem;\n        assert([\"CERTIFICATE REQUEST\", \"CERTIFICATE\", \"RSA PRIVATE KEY\", \"PUBLIC KEY\", \"X509 CRL\"].indexOf(pemType) >= 0);\n        let b = (raw_key as Buffer).toString(\"base64\");\n        let str = \"-----BEGIN \" + pemType + \"-----\\n\";\n        while (b.length) {\n            str += b.substring(0, 64) + \"\\n\";\n            b = b.substring(64);\n        }\n        str += \"-----END \" + pemType + \"-----\";\n        // no leading \\n\n        return str;\n    }\n}\n\nexport function convertPEMtoDER(raw_key: PEM): DER {\n    let match: any;\n    let pemType;\n    let base64str;\n\n    const parts: DER[] = [];\n\n    PEM_REGEX.lastIndex = 0;\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((match = PEM_REGEX.exec(raw_key)) !== null) {\n        pemType = match[2];\n        // pemType shall be \"RSA PRIVATE KEY\" , \"PUBLIC KEY\", \"CERTIFICATE\", \"X509 CRL\"\n        base64str = match[3];\n        base64str = base64str.replace(/\\r?\\n/g, \"\");\n        parts.push(Buffer.from(base64str, \"base64\"));\n    }\n    return combine_der(parts);\n}\n\n// istanbul ignore next\nexport function hexDump(buffer: Buffer, width?: number): string {\n    if (!buffer) {\n        return \"<>\";\n    }\n    width = width || 32;\n    if (buffer.length > 1024) {\n        return hexy(buffer.subarray(0, 1024), { width, format: \"twos\" }) + \"\\n .... ( \" + buffer.length + \")\";\n    } else {\n        return hexy(buffer, { width, format: \"twos\" });\n    }\n}\n\ninterface MakeMessageChunkSignatureOptions {\n    signatureLength: number;\n    algorithm: string;\n    privateKey: PrivateKey;\n}\n\nexport function makeMessageChunkSignature(chunk: Buffer, options: MakeMessageChunkSignatureOptions): Buffer {\n    // signature length = 128 bytes\n    const signer = createSign(options.algorithm);\n    signer.update(chunk);\n    const signature = signer.sign(options.privateKey.hidden as KeyObject);\n    assert(!options.signatureLength || signature.length === options.signatureLength);\n    return signature;\n}\n\nexport interface VerifyMessageChunkSignatureOptions {\n    signatureLength?: number;\n    algorithm: string;\n    publicKey: PublicKeyPEM;\n}\n\n/**\n * @method verifyMessageChunkSignature\n *\n *     const signer = {\n *           signatureLength : 128,\n *           algorithm : \"RSA-SHA256\",\n *           publicKey: \"qsdqsdqsd\"\n *     };\n * @param blockToVerify\n * @param signature\n * @param options\n * @param options.signatureLength\n * @param options.algorithm    for example \"RSA-SHA256\"\n * @param options.publicKey\n * @return true if the signature is valid\n */\nexport function verifyMessageChunkSignature(\n    blockToVerify: Buffer,\n    signature: Signature,\n    options: VerifyMessageChunkSignatureOptions\n): boolean {\n    // Note those assets are failing in web browse\n    // assert(blockToVerify instanceof Buffer || blockToVerify instanceof Uint8Array);\n    // assert(signature instanceof Buffer || blockToVerify instanceof Uint8Array);\n    // assert(typeof options.publicKey === \"string\");\n    // assert(identifyPemType(options.publicKey));\n\n    const verify = createVerify(options.algorithm);\n    verify.update(blockToVerify);\n    return verify.verify(options.publicKey, signature);\n}\n\nexport function makeSHA1Thumbprint(buffer: Buffer): Signature {\n    return createHash(\"sha1\").update(buffer).digest();\n}\n\n// Basically when you =encrypt something using an RSA key (whether public or private), the encrypted value must\n// be smaller than the key (due to the maths used to do the actual encryption). So if you have a 1024-bit key,\n// in theory you could encrypt any 1023-bit value (or a 1024-bit value smaller than the key) with that key.\n// However, the PKCS#1 standard, which OpenSSL uses, specifies a padding scheme (so you can encrypt smaller\n// quantities without losing security), and that padding scheme takes a minimum of 11 bytes (it will be longer\n// if the value you're encrypting is smaller). So the highest number of bits you can encrypt with a 1024-bit\n// key is 936 bits because of this (unless you disable the padding by adding the OPENSSL_NO_PADDING flag,\n// in which case you can go up to 1023-1024 bits). With a 2048-bit key it's 1960 bits instead.\n\nexport const RSA_PKCS1_OAEP_PADDING: number = constants.RSA_PKCS1_OAEP_PADDING;\nexport const RSA_PKCS1_PADDING: number = constants.RSA_PKCS1_PADDING;\n\nexport enum PaddingAlgorithm {\n    RSA_PKCS1_OAEP_PADDING = 4,\n    RSA_PKCS1_PADDING = 1,\n}\n\nassert(PaddingAlgorithm.RSA_PKCS1_OAEP_PADDING === constants.RSA_PKCS1_OAEP_PADDING);\nassert(PaddingAlgorithm.RSA_PKCS1_PADDING === constants.RSA_PKCS1_PADDING);\n\n// publicEncrypt and  privateDecrypt only work with\n// small buffer that depends of the key size.\nexport function publicEncrypt_native(buffer: Buffer, publicKey: KeyLike, algorithm?: PaddingAlgorithm): Buffer {\n    if (algorithm === undefined) {\n        algorithm = PaddingAlgorithm.RSA_PKCS1_OAEP_PADDING;\n    }\n    return publicEncrypt1(\n        {\n            key: publicKey,\n            padding: algorithm,\n        },\n        buffer\n    );\n}\n\nexport function privateDecrypt_native(buffer: Buffer, privateKey: PrivateKey, algorithm?: PaddingAlgorithm): Buffer {\n    if (algorithm === undefined) {\n        algorithm = PaddingAlgorithm.RSA_PKCS1_OAEP_PADDING;\n    }\n\n    try {\n        return privateDecrypt1(\n            {\n                key: privateKey.hidden as KeyObject,\n                padding: algorithm,\n            },\n            buffer\n        );\n    } catch (err) {\n        return Buffer.alloc(1);\n    }\n}\n\nexport const publicEncrypt = publicEncrypt_native;\nexport const privateDecrypt = privateDecrypt_native;\n\nexport function publicEncrypt_long(\n    buffer: Buffer,\n    publicKey: KeyLike,\n    blockSize: number,\n    padding?: number,\n    paddingAlgorithm?: PaddingAlgorithm\n): Buffer {\n    if (paddingAlgorithm === undefined) {\n        paddingAlgorithm = PaddingAlgorithm.RSA_PKCS1_OAEP_PADDING;\n    }\n    if (paddingAlgorithm === RSA_PKCS1_PADDING) {\n        padding = padding || 11;\n        if (padding !== 11) throw new Error(\"padding should be 11\");\n    } else if (paddingAlgorithm === RSA_PKCS1_OAEP_PADDING) {\n        padding = padding || 42;\n        if (padding !== 42) throw new Error(\"padding should be 42\");\n    } else {\n        throw new Error(\"Invalid padding algorithm \" + paddingAlgorithm);\n    }\n\n    const chunk_size = blockSize - padding;\n    const nbBlocks = Math.ceil(buffer.length / chunk_size);\n\n    const outputBuffer = createFastUninitializedBuffer(nbBlocks * blockSize);\n    for (let i = 0; i < nbBlocks; i++) {\n        const currentBlock = buffer.subarray(chunk_size * i, chunk_size * (i + 1));\n        const encrypted_chunk = publicEncrypt(currentBlock, publicKey, paddingAlgorithm);\n        // istanbul ignore next\n        if (encrypted_chunk.length !== blockSize) {\n            throw new Error(`publicEncrypt_long unexpected chunk length ${encrypted_chunk.length}  expecting ${blockSize}`);\n        }\n        encrypted_chunk.copy(outputBuffer, i * blockSize);\n    }\n    return outputBuffer;\n}\n\nexport function privateDecrypt_long(buffer: Buffer, privateKey: PrivateKey, blockSize: number, paddingAlgorithm?: number): Buffer {\n    paddingAlgorithm = paddingAlgorithm || RSA_PKCS1_OAEP_PADDING;\n    // istanbul ignore next\n    if (paddingAlgorithm !== RSA_PKCS1_PADDING && paddingAlgorithm !== RSA_PKCS1_OAEP_PADDING) {\n        throw new Error(\"Invalid padding algorithm \" + paddingAlgorithm);\n    }\n\n    const nbBlocks = Math.ceil(buffer.length / blockSize);\n\n    const outputBuffer = createFastUninitializedBuffer(nbBlocks * blockSize);\n\n    let total_length = 0;\n    for (let i = 0; i < nbBlocks; i++) {\n        const currentBlock = buffer.subarray(blockSize * i, Math.min(blockSize * (i + 1), buffer.length));\n        const decrypted_buf = privateDecrypt(currentBlock, privateKey, paddingAlgorithm);\n        decrypted_buf.copy(outputBuffer, total_length);\n        total_length += decrypted_buf.length;\n    }\n    return outputBuffer.subarray(0, total_length);\n}\n\nexport function coerceCertificatePem(certificate: Certificate | CertificatePEM): CertificatePEM {\n    if (Buffer.isBuffer(certificate)) {\n        certificate = toPem(certificate, \"CERTIFICATE\");\n    }\n    assert(typeof certificate === \"string\");\n    return certificate;\n}\n\nexport function extractPublicKeyFromCertificateSync(certificate: Certificate | CertificatePEM): PublicKeyPEM {\n    certificate = coerceCertificatePem(certificate);\n    const key = jsrsasign.KEYUTIL.getKey(certificate);\n    const publicKeyAsPem = jsrsasign.KEYUTIL.getPEM(key);\n    assert(typeof publicKeyAsPem === \"string\");\n    return publicKeyAsPem;\n}\n\n// https://github.com/kjur/jsrsasign/blob/master/x509-1.1.js\n// tool to analyse asn1 base64 blocks : http://lapo.it/asn1js\n/**\n * extract the publickey from a certificate\n * @async\n */\nexport function extractPublicKeyFromCertificate(\n    certificate: CertificatePEM | Certificate,\n    callback: (err: Error | null, publicKeyPEM?: PublicKeyPEM) => void\n): void {\n    let err1: any = null;\n    let keyPem: PublicKeyPEM;\n    try {\n        keyPem = extractPublicKeyFromCertificateSync(certificate);\n    } catch (err) {\n        err1 = err;\n    }\n    setImmediate(() => {\n        callback(err1, keyPem);\n    });\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// note: new Buffer(size)#  is deprecated since: v6.0. and is replaced with Buffer.allocUnsafe\n//       to ensure backward compatibility we have to replace\n//       new Buffer(size) with createFastUninitializedBuffer(size)\n//\n//       Buffer.alloc and Buffer.allocUnsafe have been introduced in nodejs 5.1.0\n//  in node 0.11 new Buffer\n//\n/**\n * @internal\n * @private\n */\nexport const createFastUninitializedBuffer = Buffer.allocUnsafe\n    ? Buffer.allocUnsafe\n    : (size: number): Buffer => {\n          // istanbul ignore next\n          return new Buffer(size);\n      };\n","/**\n * @module node_opcua_crypto\n */\n// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\n// portion of this code has been ported from :\n//\n// ASN.1 JavaScript decoder Copyright (c) 2008-2014 Lapo Luchini lapo@lapo.it\n// Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby\n// granted, provided that the above copyright notice and this permission notice appear in all copies.\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n// AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n// PERFORMANCE OF THIS SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n/*jslint bitwise: true */\n// tslint:disable:no-shadowed-variable\n\n// references:\n//  - http://tools.ietf.org/html/rfc5280\n//  - http://www-lor.int-evry.fr/~michel/Supports/presentation.pdf\n//  - ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc\n//  - pubs.opengroup.org/onlinepubs/009609799/7a_nch02.htm#tagcjh_49_03\n//  - https://github.com/lapo-luchini/asn1js/blob/master/asn1.js\n//  - http://lapo.it/asn1js\n//  - https://www.cs.auckland.ac.nz/~pgut001/dumpasn1.cfg\n//  - http://pubs.opengroup.org/onlinepubs/009609799/7a_nch02.htm\n//  - http://stackoverflow.com/questions/5929050/how-does-asn-1-encode-an-object-identifier\n//  - http://luca.ntop.org/Teaching/Appunti/asn1.html\n\n// note:\n//  - http://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art030\n//  openssl can be also used to discover the content of a DER file\n//  $ openssl asn1parse -in cert.pem\nimport assert from \"assert\";\n\nimport {\n    AlgorithmIdentifier,\n    BlockInfo,\n    SignatureValue,\n    TagType,\n    findBlockAtIndex,\n    formatBuffer2DigitHexWithColum,\n    getBlock,\n    readAlgorithmIdentifier,\n    readBitString,\n    readBooleanValue,\n    readECCAlgorithmIdentifier,\n    readIntegerValue,\n    readListOfInteger,\n    readLongIntegerValue,\n    readObjectIdentifier,\n    readOctetString,\n    readSignatureValue,\n    readStruct,\n    readTag,\n    readTime,\n    readValue,\n    readVersionValue,\n} from \"./asn1.js\";\nimport { DirectoryName, readDirectoryName } from \"./directory_name.js\";\nimport { Certificate } from \"./common.js\";\nimport { PublicKeyLength } from \"./explore_certificate.js\";\nimport { makeSHA1Thumbprint } from \"./crypto_utils.js\";\n\n// Converted from: https://www.cs.auckland.ac.nz/~pgut001/dumpasn1.cfg\n// which is made by Peter Gutmann and whose license states:\n// You can use this code in whatever way you want,\n// as long as you don't try to claim you wrote it.\n\nconst doDebug = false;\n\nexport interface AttributeTypeAndValue {\n    [key: string]: any;\n}\n\nfunction _readAttributeTypeAndValue(buffer: Buffer, block: BlockInfo): AttributeTypeAndValue {\n    let inner_blocks = readStruct(buffer, block);\n    inner_blocks = readStruct(buffer, inner_blocks[0]);\n\n    const data = {\n        identifier: readObjectIdentifier(buffer, inner_blocks[0]).name,\n        value: readValue(buffer, inner_blocks[1]),\n    };\n\n    const result: AttributeTypeAndValue = {};\n\n    for (const [key, value] of Object.entries(data)) {\n        result[key] = value;\n    }\n    return result;\n}\n\ninterface RelativeDistinguishedName {\n    [prop: string]: any;\n}\n\nfunction _readRelativeDistinguishedName(buffer: Buffer, block: BlockInfo): RelativeDistinguishedName {\n    const inner_blocks = readStruct(buffer, block);\n    const data = inner_blocks.map((block) => _readAttributeTypeAndValue(buffer, block));\n    const result: any = {};\n    for (const e of data) {\n        result[e.identifier] = e.value;\n    }\n    return result;\n}\n\nfunction _readName(buffer: Buffer, block: BlockInfo): RelativeDistinguishedName {\n    return _readRelativeDistinguishedName(buffer, block);\n}\n\nexport interface Validity {\n    notBefore: Date;\n    notAfter: Date;\n}\n\nfunction _readValidity(buffer: Buffer, block: BlockInfo): Validity {\n    const inner_blocks = readStruct(buffer, block);\n    return {\n        notBefore: readTime(buffer, inner_blocks[0]),\n        notAfter: readTime(buffer, inner_blocks[1]),\n    };\n}\n\nfunction _readAuthorityKeyIdentifier(buffer: Buffer): AuthorityKeyIdentifier {\n    /**\n     *  where a CA distributes its public key in the form of a \"self-signed\"\n     *  certificate, the authority key identifier MAY be omitted.  Th\n     *  signature on a self-signed certificate is generated with the private\n     * key associated with the certificate's subject public key.  (This\n     * proves that the issuer possesses both the public and private keys.)\n     * In this case, the subject and authority key identifiers would be\n     * identical, but only the subject key identifier is needed for\n     * certification path building.\n     */\n    // see: https://www.ietf.org/rfc/rfc3280.txt page 25\n    // AuthorityKeyIdentifier ::= SEQUENCE {\n    //      keyIdentifier             [0] KeyIdentifier           OPTIONAL,\n    //      authorityCertIssuer       [1] GeneralNames            OPTIONAL,\n    //      authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\n    // KeyIdentifier ::= OCTET STRING\n\n    const block_info = readTag(buffer, 0);\n    const blocks = readStruct(buffer, block_info);\n\n    const keyIdentifier_block = findBlockAtIndex(blocks, 0);\n    const authorityCertIssuer_block = findBlockAtIndex(blocks, 1);\n    const authorityCertSerialNumber_block = findBlockAtIndex(blocks, 2);\n\n    function _readAuthorityCertIssuer(block: BlockInfo): DirectoryName {\n        const inner_blocks = readStruct(buffer, block);\n        const directoryName_block = findBlockAtIndex(inner_blocks, 4);\n        if (directoryName_block) {\n            const a = readStruct(buffer, directoryName_block);\n            return readDirectoryName(buffer, a[0]);\n        } else {\n            throw new Error(\"Invalid _readAuthorityCertIssuer\");\n        }\n    }\n    function _readAuthorityCertIssuerFingerPrint(block: BlockInfo): string {\n        const inner_blocks = readStruct(buffer, block);\n        const directoryName_block = findBlockAtIndex(inner_blocks, 4)!;\n        if (!directoryName_block) {\n            return \"\";\n        }\n        const a = readStruct(buffer, directoryName_block);\n        if (a.length < 1) {\n            return \"\";\n        }\n        return directoryName_block ? formatBuffer2DigitHexWithColum(makeSHA1Thumbprint(getBlock(buffer, a[0]))) : \"\";\n    }\n\n    const authorityCertIssuer = authorityCertIssuer_block ? _readAuthorityCertIssuer(authorityCertIssuer_block) : null;\n    const authorityCertIssuerFingerPrint = authorityCertIssuer_block\n        ? _readAuthorityCertIssuerFingerPrint(authorityCertIssuer_block)\n        : \"\";\n\n    return {\n        authorityCertIssuer,\n        authorityCertIssuerFingerPrint,\n        serial: authorityCertSerialNumber_block\n            ? formatBuffer2DigitHexWithColum(getBlock(buffer, authorityCertSerialNumber_block!))\n            : null, // can be null for self-signed cert\n        keyIdentifier: keyIdentifier_block ? formatBuffer2DigitHexWithColum(getBlock(buffer, keyIdentifier_block!)) : null, // can be null for self-signed certf\n    };\n}\n\n/*\n Extension  ::=  SEQUENCE  {\n        extnID      OBJECT IDENTIFIER,\n        critical    BOOLEAN DEFAULT FALSE,\n        extnValue   OCTET STRING\n                    -- contains the DER encoding of an ASN.1 value\n                    -- corresponding to the extension type identified\n                    -- by extnID\n        }\n\n      id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }\n\n      KeyUsage ::= BIT STRING {\n           digitalSignature        (0),\n           nonRepudiation          (1), -- recent editions of X.509 have\n                                -- renamed this bit to contentCommitment\n           keyEncipherment         (2),\n           dataEncipherment        (3),\n           keyAgreement            (4),\n           keyCertSign             (5),\n           cRLSign                 (6),\n           encipherOnly            (7),\n           decipherOnly            (8) }\n\nextKeyUsage\n*/\n\nfunction readBasicConstraint2_5_29_19(buffer: Buffer, block: BlockInfo): BasicConstraints {\n    const block_info = readTag(buffer, 0);\n    const inner_blocks = readStruct(buffer, block_info).slice(0, 2);\n    let cA = false;\n    let pathLengthConstraint = 0;\n    let breakControl = 0;\n\n    for (const inner_block of inner_blocks) {\n        switch (inner_block.tag) {\n            case TagType.BOOLEAN:\n                cA = readBooleanValue(buffer, inner_block);\n                break;\n            case TagType.INTEGER:\n                pathLengthConstraint = readIntegerValue(buffer, inner_block);\n                breakControl = 1;\n                break;\n        }\n\n        if (breakControl) {\n            break;\n        }\n    }\n\n    return { critical: true, cA, pathLengthConstraint };\n}\n\n// GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\n// GeneralName ::= CHOICE {\n//        otherName                 [0]  AnotherName,\n//        rfc822Name                [1]  IA5String,\n//        dNSName                   [2]  IA5String,\n//        x400Address               [3]  ORAddress,\n//        directoryName             [4]  Name,\n//        ediPartyName              [5]  EDIPartyName,\n//        uniformResourceIdentifier [6]  IA5String,\n//        iPAddress                 [7]  OCTET STRING,\n//        registeredID              [8]  OBJECT IDENTIFIER }\nfunction _readGeneralNames(buffer: Buffer, block: BlockInfo) {\n    const _data: { [key: number]: { name: string; type: string } } = {\n        1: { name: \"rfc822Name\", type: \"IA5String\" },\n        2: { name: \"dNSName\", type: \"IA5String\" },\n        3: { name: \"x400Address\", type: \"ORAddress\" },\n        4: { name: \"directoryName\", type: \"Name\" },\n        5: { name: \"ediPartyName\", type: \"EDIPartyName\" },\n        6: { name: \"uniformResourceIdentifier\", type: \"IA5String\" },\n        7: { name: \"iPAddress\", type: \"OCTET_STRING\" },\n        8: { name: \"registeredID\", type: \"OBJECT_IDENTIFIER\" },\n        32: { name: \"otherName\", type: \"AnotherName\" },\n    };\n    const blocks = readStruct(buffer, block);\n\n    function _readFromType(buffer: Buffer, block: BlockInfo, type: string) {\n        switch (type) {\n            case \"IA5String\":\n                return buffer.subarray(block.position, block.position + block.length).toString(\"ascii\");\n            default:\n                return buffer.subarray(block.position, block.position + block.length).toString(\"hex\");\n        }\n    }\n\n    const n: { [key: string]: string[] } = {};\n    for (const block of blocks) {\n        // tslint:disable-next-line: no-bitwise\n        assert((block.tag & 0x80) === 0x80);\n        // tslint:disable-next-line: no-bitwise\n        const t = block.tag & 0x7f;\n        const type = _data[t] as { name: string; type: string } | undefined;\n        // istanbul ignore next\n        if (!type) {\n            console.log(\"_readGeneralNames: INVALID TYPE => \" + t + \" 0x\" + t.toString(16));\n            continue;\n        }\n\n        if (t == 32) {\n            // console.log(buffer.subarray(block.start, block.position+ block.length).toString(\"hex\"));\n            n[type.name] = n[type.name] || [];\n\n            const blocks2 = readStruct(buffer, block);\n            const name = readObjectIdentifier(buffer, blocks2[0]).name;\n            const buf = getBlock(buffer, blocks2[1]);\n            const b = readTag(buf, 0);\n            const nn = readValue(buf, b);\n            // console.log(buf.toString(\"hex\"), buf.toString(\"ascii\"));\n            // console.log(\"name = \", name, nn);\n            const data = {\n                identifier: name,\n                value: nn,\n            };\n            n[type.name].push(data.value);\n        } else {\n            n[type.name] = n[type.name] || [];\n            n[type.name].push(_readFromType(buffer, block, type.type));\n        }\n    }\n    return n;\n}\n\nfunction _readSubjectAltNames(buffer: Buffer) {\n    const block_info = readTag(buffer, 0);\n    return _readGeneralNames(buffer, block_info);\n}\n\n// named X509KeyUsage not to confuse with DOM KeyUsage\nexport interface X509KeyUsage {\n    digitalSignature: boolean;\n    nonRepudiation: boolean;\n    keyEncipherment: boolean;\n    dataEncipherment: boolean;\n    keyAgreement: boolean;\n    keyCertSign: boolean;\n    cRLSign: boolean;\n    encipherOnly: boolean;\n    decipherOnly: boolean;\n}\nexport interface X509ExtKeyUsage {\n    clientAuth: boolean;\n    serverAuth: boolean;\n    codeSigning: boolean;\n    emailProtection: boolean;\n    timeStamping: boolean;\n    ocspSigning: boolean;\n    ipsecEndSystem: boolean;\n    ipsecTunnel: boolean;\n    ipsecUser: boolean;\n    // etc ... to be completed\n}\n\nfunction readKeyUsage(oid: string, buffer: Buffer): X509KeyUsage {\n    const block_info = readTag(buffer, 0);\n\n    // get value as BIT STRING\n    let b2 = 0x00;\n    let b3 = 0x00;\n    if (block_info.length > 1) {\n        // skip first byte, just indicates unused bits which\n        // will be padded with 0s anyway\n        // get bytes with flag bits\n        b2 = buffer[block_info.position + 1];\n        b3 = block_info.length > 2 ? buffer[block_info.position + 2] : 0;\n    }\n\n    // set flags\n    return {\n        // tslint:disable-next-line: no-bitwise\n        digitalSignature: (b2 & 0x80) === 0x80,\n        // tslint:disable-next-line: no-bitwise\n        nonRepudiation: (b2 & 0x40) === 0x40,\n        // tslint:disable-next-line: no-bitwise\n        keyEncipherment: (b2 & 0x20) === 0x20,\n        // tslint:disable-next-line: no-bitwise\n        dataEncipherment: (b2 & 0x10) === 0x10,\n        // tslint:disable-next-line: no-bitwise\n        keyAgreement: (b2 & 0x08) === 0x08,\n        // tslint:disable-next-line: no-bitwise\n        keyCertSign: (b2 & 0x04) === 0x04,\n        // tslint:disable-next-line: no-bitwise\n        cRLSign: (b2 & 0x02) === 0x02,\n        // tslint:disable-next-line: no-bitwise\n        encipherOnly: (b2 & 0x01) === 0x01,\n        // tslint:disable-next-line: no-bitwise\n        decipherOnly: (b3 & 0x80) === 0x80,\n    };\n}\n\nfunction readExtKeyUsage(oid: string, buffer: Buffer): X509ExtKeyUsage {\n    assert(oid === \"2.5.29.37\");\n    // see https://tools.ietf.org/html/rfc5280#section-4.2.1.12\n    const block_info = readTag(buffer, 0);\n\n    const inner_blocks = readStruct(buffer, block_info);\n\n    const extKeyUsage: X509ExtKeyUsage = {\n        serverAuth: false,\n        clientAuth: false,\n        codeSigning: false,\n        emailProtection: false,\n        timeStamping: false,\n        ipsecEndSystem: false,\n        ipsecTunnel: false,\n        ipsecUser: false,\n        ocspSigning: false,\n    };\n    for (const block of inner_blocks) {\n        const identifier = readObjectIdentifier(buffer, block);\n        (extKeyUsage as any)[identifier.name] = true;\n    }\n    /*\n    \n   id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }\n\n   id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }\n   -- TLS WWW server authentication\n   -- Key usage bits that may be consistent: digitalSignature,\n   -- keyEncipherment or keyAgreement\n\n   id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }\n   -- TLS WWW client authentication\n   -- Key usage bits that may be consistent: digitalSignature\n   -- and/or keyAgreement\n\n   id-kp-codeSigning             OBJECT IDENTIFIER ::= { id-kp 3 }\n   -- Signing of downloadable executable code\n   -- Key usage bits that may be consistent: digitalSignature\n\n   id-kp-emailProtection         OBJECT IDENTIFIER ::= { id-kp 4 }\n   -- Email protection\n   -- Key usage bits that may be consistent: digitalSignature,\n   -- nonRepudiation, and/or (keyEncipherment or keyAgreement)\n\n   id-kp-timeStamping            OBJECT IDENTIFIER ::= { id-kp 8 }\n   -- Binding the hash of an object to a time\n   -- Key usage bits that may be consistent: digitalSignature\n   -- and/or nonRepudiation\n\n   id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }\n   -- Signing OCSP responses\n   -- Key usage bits that may be consistent: digitalSignature\n   -- and/or nonRepudiation\n\n   */\n    // set flags\n    return extKeyUsage;\n}\n\nexport interface SubjectPublicKey {\n    modulus: Buffer;\n}\nfunction _readSubjectPublicKey(buffer: Buffer): SubjectPublicKey {\n    const block_info = readTag(buffer, 0);\n    const blocks = readStruct(buffer, block_info);\n\n    return {\n        modulus: buffer.subarray(blocks[0].position + 1, blocks[0].position + blocks[0].length),\n    };\n}\n/*\n Extension  ::=  SEQUENCE  {\n extnID      OBJECT IDENTIFIER,\n critical    BOOLEAN DEFAULT FALSE,\n extnValue   OCTET STRING\n -- contains the DER encoding of an ASN.1 value\n -- corresponding to the extension type identified\n -- by extnID\n }\n */\nexport function readExtension(buffer: Buffer, block: BlockInfo): { identifier: { oid: string; name: string }; value: any } {\n    const inner_blocks = readStruct(buffer, block);\n\n    if (inner_blocks.length === 3) {\n        assert(inner_blocks[1].tag === TagType.BOOLEAN);\n        inner_blocks[1] = inner_blocks[2];\n    }\n\n    const identifier = readObjectIdentifier(buffer, inner_blocks[0]);\n    const buf = getBlock(buffer, inner_blocks[1]);\n    let value: string | null | any = null;\n    switch (identifier.name) {\n        case \"subjectKeyIdentifier\":\n            /* from https://tools.ietf.org/html/rfc3280#section-4.1 :\n               For CA certificates, subject key identifiers SHOULD be derived from\n               the public key or a method that generates unique values.  Two common\n               methods for generating key identifiers from the public key are:\n\n                  (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the\n                  value of the BIT STRING subjectPublicKey (excluding the tag,\n                  length, and number of unused bits).\n\n                  (2) The keyIdentifier is composed of a four bit type field with\n                  the value 0100 followed by the least significant 60 bits of the\n                  SHA-1 hash of the value of the BIT STRING subjectPublicKey\n                  (excluding the tag, length, and number of unused bit string bits).\n            */\n            value = formatBuffer2DigitHexWithColum(readOctetString(buffer, inner_blocks[1]));\n            break;\n        case \"subjectAltName\":\n            value = _readSubjectAltNames(buf);\n            break;\n        case \"authorityKeyIdentifier\":\n            value = _readAuthorityKeyIdentifier(buf);\n            break;\n        case \"basicConstraints\":\n            value = readBasicConstraint2_5_29_19(buf, inner_blocks[1]); //  \"2.5.29.19\":\n            // \"basicConstraints ( not implemented yet) \" + buf.toString(\"hex\");\n            break;\n        case \"certExtension\": // Netscape\n            value = \"basicConstraints ( not implemented yet) \" + buf.toString(\"hex\");\n            break;\n        case \"extKeyUsage\":\n            value = readExtKeyUsage(identifier.oid, buf);\n            break;\n        case \"keyUsage\":\n            value = readKeyUsage(identifier.oid, buf);\n            break;\n        default:\n            value = \"Unknown \" + identifier.name + buf.toString(\"hex\");\n    }\n    return {\n        identifier,\n        value,\n    };\n}\n\n// Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\nfunction _readExtensions(buffer: Buffer, block: BlockInfo): CertificateExtension {\n    assert(block.tag === 0xa3);\n    let inner_blocks = readStruct(buffer, block);\n    inner_blocks = readStruct(buffer, inner_blocks[0]);\n\n    const extensions = inner_blocks.map((block) => readExtension(buffer, block));\n\n    const result: any = {};\n    for (const e of extensions) {\n        result[e.identifier.name] = e.value;\n    }\n    return result as CertificateExtension;\n}\n\n/*\n SEQUENCE {\n 204   13:       SEQUENCE {\n 206    9:         OBJECT IDENTIFIER\n :           rsaEncryption (1 2 840 113549 1 1 1)\n 217    0:         NULL\n :         }\n 219  141:       BIT STRING, encapsulates {\n 223  137:         SEQUENCE {\n 226  129:           INTEGER\n :             00 C2 D7 97 6D 28 70 AA 5B CF 23 2E 80 70 39 EE\n :             DB 6F D5 2D D5 6A 4F 7A 34 2D F9 22 72 47 70 1D\n :             EF 80 E9 CA 30 8C 00 C4 9A 6E 5B 45 B4 6E A5 E6\n :             6C 94 0D FA 91 E9 40 FC 25 9D C7 B7 68 19 56 8F\n :             11 70 6A D7 F1 C9 11 4F 3A 7E 3F 99 8D 6E 76 A5\n :             74 5F 5E A4 55 53 E5 C7 68 36 53 C7 1D 3B 12 A6\n :             85 FE BD 6E A1 CA DF 35 50 AC 08 D7 B9 B4 7E 5C\n :             FE E2 A3 2C D1 23 84 AA 98 C0 9B 66 18 9A 68 47\n :             E9\n 358    3:           INTEGER 65537\n :           }\n :         }\n :       }\n */\n\nfunction _readSubjectPublicKeyInfo(buffer: Buffer, block: BlockInfo): SubjectPublicKeyInfo {\n    const inner_blocks = readStruct(buffer, block);\n\n    // algorithm identifier\n    const algorithm = readAlgorithmIdentifier(buffer, inner_blocks[0]);\n    //const parameters         = _readBitString(buffer,inner_blocks[1]);\n    const subjectPublicKey = readBitString(buffer, inner_blocks[1]);\n\n    // read the 2 big integers of the key\n    const data = subjectPublicKey.data;\n    const values = readListOfInteger(data);\n    // xx const value = _readListOfInteger(data);\n    return {\n        algorithm: algorithm.identifier,\n        keyLength: (values[0].length - 1) as PublicKeyLength,\n        subjectPublicKey: _readSubjectPublicKey(subjectPublicKey.data),\n        //xx values: values,\n        //xx values_length : values.map(function (a){ return a.length; })\n    };\n}\n\nfunction _readSubjectECCPublicKeyInfo(buffer: Buffer, block: BlockInfo): SubjectPublicKeyInfo {\n    const inner_blocks = readStruct(buffer, block);\n\n    // first parameter is the second element of the first block, which is why we have another algorithm\n    const algorithm = readECCAlgorithmIdentifier(buffer, inner_blocks[0]);\n\n    // the public key is already in bit format, we just need to read it\n    const subjectPublicKey = readBitString(buffer, inner_blocks[1]);\n\n    // take out the data which is the entirity of our public key\n    const data = subjectPublicKey.data;\n    return {\n        algorithm: algorithm.identifier,\n        keyLength: (data.length - 1) as PublicKeyLength,\n        subjectPublicKey: {\n            modulus: data,\n        },\n    };\n}\n\nexport interface SubjectPublicKeyInfo {\n    algorithm: string;\n    keyLength: PublicKeyLength;\n    subjectPublicKey: SubjectPublicKey;\n}\n\nexport interface BasicConstraints {\n    critical: boolean;\n    cA: boolean;\n    pathLengthConstraint?: number; // 0 Unlimited\n}\n\nexport interface AuthorityKeyIdentifier {\n    keyIdentifier: string | null;\n    authorityCertIssuer: DirectoryName | null;\n    authorityCertIssuerFingerPrint: string;\n    serial: string | null;\n}\n\nexport interface CertificateExtension {\n    basicConstraints: BasicConstraints;\n    subjectKeyIdentifier?: string;\n    authorityKeyIdentifier?: AuthorityKeyIdentifier;\n    keyUsage?: X509KeyUsage;\n    extKeyUsage?: X509ExtKeyUsage;\n    subjectAltName?: any;\n}\n\nexport interface TbsCertificate {\n    version: number;\n    serialNumber: string;\n    issuer: any;\n    signature: AlgorithmIdentifier;\n    validity: Validity;\n    subject: DirectoryName;\n    subjectFingerPrint: string;\n    subjectPublicKeyInfo: SubjectPublicKeyInfo;\n    extensions: CertificateExtension | null;\n}\n\nexport function readTbsCertificate(buffer: Buffer, block: BlockInfo): TbsCertificate {\n    const blocks = readStruct(buffer, block);\n\n    let version, serialNumber, signature, issuer, validity, subject, subjectFingerPrint, extensions;\n    let subjectPublicKeyInfo: SubjectPublicKeyInfo;\n\n    if (blocks.length === 6) {\n        // X509 Version 1:\n        version = 1;\n\n        serialNumber = formatBuffer2DigitHexWithColum(readLongIntegerValue(buffer, blocks[0]));\n        signature = readAlgorithmIdentifier(buffer, blocks[1]);\n        issuer = _readName(buffer, blocks[2]);\n        validity = _readValidity(buffer, blocks[3]);\n        subject = _readName(buffer, blocks[4]);\n        subjectFingerPrint = formatBuffer2DigitHexWithColum(makeSHA1Thumbprint(getBlock(buffer, blocks[4])));\n        subjectPublicKeyInfo = _readSubjectPublicKeyInfo(buffer, blocks[5]);\n\n        extensions = null;\n    } else {\n        // X509 Version 3:\n        const version_block = findBlockAtIndex(blocks, 0);\n        if (!version_block) {\n            throw new Error(\"cannot find version block\");\n        }\n        version = readVersionValue(buffer, version_block) + 1;\n        serialNumber = formatBuffer2DigitHexWithColum(readLongIntegerValue(buffer, blocks[1]));\n        signature = readAlgorithmIdentifier(buffer, blocks[2]);\n        issuer = _readName(buffer, blocks[3]);\n        validity = _readValidity(buffer, blocks[4]);\n        subject = _readName(buffer, blocks[5]);\n        subjectFingerPrint = formatBuffer2DigitHexWithColum(makeSHA1Thumbprint(getBlock(buffer, blocks[5])));\n\n        const inner_block = readStruct(buffer, blocks[6]);\n        const what_type = readAlgorithmIdentifier(buffer, inner_block[0]).identifier;\n\n        switch (what_type) {\n            case \"rsaEncryption\": {\n                subjectPublicKeyInfo = _readSubjectPublicKeyInfo(buffer, blocks[6]);\n                break;\n            }\n            case \"ecPublicKey\":\n            default: {\n                subjectPublicKeyInfo = _readSubjectECCPublicKeyInfo(buffer, blocks[6]);\n                break;\n            }\n        }\n\n        const extensionBlock = findBlockAtIndex(blocks, 3);\n        if (!extensionBlock) {\n            // tslint:disable-next-line: no-console\n            doDebug && console.log(\"X509 certificate is invalid : cannot find extension block version =\" + version_block);\n            extensions = null;\n        } else {\n            extensions = _readExtensions(buffer, extensionBlock);\n        }\n    }\n\n    return {\n        version,\n        serialNumber,\n        signature,\n        issuer,\n        validity,\n        subject,\n        subjectFingerPrint,\n        subjectPublicKeyInfo,\n        extensions,\n    };\n}\nexport interface CertificateInternals {\n    tbsCertificate: TbsCertificate;\n    signatureAlgorithm: AlgorithmIdentifier;\n    signatureValue: SignatureValue;\n}\n\n/**\n * explore a certificate structure\n * @param certificate\n * @returns a json object that exhibits the internal data of the certificate\n */\nexport function exploreCertificate(certificate: Certificate): CertificateInternals {\n    assert(Buffer.isBuffer(certificate));\n    if (!(certificate as any)._exploreCertificate_cache) {\n        const block_info = readTag(certificate, 0);\n        const blocks = readStruct(certificate, block_info);\n        (certificate as any)._exploreCertificate_cache = {\n            tbsCertificate: readTbsCertificate(certificate, blocks[0]),\n            signatureAlgorithm: readAlgorithmIdentifier(certificate, blocks[1]),\n            signatureValue: readSignatureValue(certificate, blocks[2]),\n        };\n    }\n    return (certificate as any)._exploreCertificate_cache;\n}\n\n/**\n * @method split_der\n * split a multi chain certificates\n * @param certificateChain  the certificate chain in der (binary) format}\n * @returns an array of Der , each element of the array is one certificate of the chain\n */\nexport function split_der(certificateChain: Certificate): Certificate[] {\n    const certificate_chain: Buffer[] = [];\n\n    do {\n        const block_info = readTag(certificateChain, 0);\n        const length = block_info.position + block_info.length;\n        const der_certificate = certificateChain.subarray(0, length);\n        certificate_chain.push(der_certificate);\n        certificateChain = certificateChain.subarray(length);\n    } while (certificateChain.length > 0);\n    return certificate_chain;\n}\n\n/**\n * @method combine_der\n * combine an array of certificates into a single blob\n * @param certificates a array with the individual DER certificates of the chain\n * @return a concatenated buffer containing the certificates\n */\nexport function combine_der(certificates: Certificate[]): Certificate {\n    // perform some sanity check\n    for (const cert of certificates) {\n        const b = split_der(cert);\n        let sum = 0;\n        b.forEach((block) => {\n            const block_info = readTag(block, 0);\n            //xx console.log(\"xxxx\" ,cert.length,block_info);\n            //xx console.log(cert.toString(\"base64\"));\n            assert(block_info.position + block_info.length === block.length);\n            sum += block.length;\n        });\n        assert(sum === cert.length);\n    }\n    return Buffer.concat(certificates);\n}\n","import assert from \"assert\";\nimport { BlockInfo, readObjectIdentifier, readStruct, readValue } from \"./asn1\";\n\nexport interface DirectoryName {\n    stateOrProvinceName?: string;\n    localityName?: string;\n    organizationName?: string;\n    organizationUnitName?: string;\n    commonName?: string;\n    countryName?: string;\n}\n\nexport function readDirectoryName(buffer: Buffer, block: BlockInfo): DirectoryName {\n    // AttributeTypeAndValue ::= SEQUENCE {\n    //    type   ATTRIBUTE.&id({SupportedAttributes}),\n    //    value  ATTRIBUTE.&Type({SupportedAttributes}{@type}),\n    const set_blocks = readStruct(buffer, block);\n    const names: DirectoryName = {};\n    for (const set_block of set_blocks) {\n        assert(set_block.tag === 0x31);\n        const blocks = readStruct(buffer, set_block);\n        assert(blocks.length === 1);\n        assert(blocks[0].tag === 0x30);\n\n        const sequenceBlock = readStruct(buffer, blocks[0]);\n        assert(sequenceBlock.length === 2);\n\n        const type = readObjectIdentifier(buffer, sequenceBlock[0]);\n        (names as any)[type.name] = readValue(buffer, sequenceBlock[1]);\n    }\n    return names;\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport { BlockInfo, TagType, readTag, readStruct } from \"./asn1.js\";\nimport { PrivateKey } from \"./common.js\";\nimport { convertPEMtoDER } from \"./crypto_utils.js\";\n\n// tslint:disable:no-empty-interface\nexport interface PrivateKeyInternals {\n    /***/\n    version: Buffer;\n    modulus: Buffer;\n    publicExponent: Buffer;\n    privateExponent: Buffer;\n    prime1: Buffer;\n    prime2: Buffer;\n    exponent1: Buffer;\n    exponent2: Buffer;\n}\n\nfunction f(buffer: Buffer, b: BlockInfo) {\n    return buffer.subarray(b.position + 1, b.position + b.length);\n}\nconst doDebug = !!process.env.DEBUG;\n/**\n * \n * @param privateKey RSAPrivateKey ::= SEQUENCE {\n *  version           Version,\n *  modulus           INTEGER,  -- n\n *  publicExponent    INTEGER,  -- e\n *  privateExponent   INTEGER,  -- d\n *  prime1            INTEGER,  -- p\n *  prime2            INTEGER,  -- q\n *  exponent1         INTEGER,  -- d mod (p-1)\n *  exponent2         INTEGER,  -- d mod (q-1)\n *  coefficient       INTEGER,  -- (inverse of q) mod p\n *  otherPrimeInfos   OtherPrimeInfos OPTIONAL\n}\n */\nexport function explorePrivateKey(privateKey2: PrivateKey): PrivateKeyInternals {\n    const privateKey1 = privateKey2.hidden;\n    const privateKey =\n        typeof privateKey1 === \"string\" ? convertPEMtoDER(privateKey1) : privateKey1.export({ format: \"der\", type: \"pkcs1\" });\n\n    const block_info = readTag(privateKey, 0);\n    const blocks = readStruct(privateKey, block_info);\n\n    if (blocks.length === 9) {\n        // alice_rsa\n        const version = f(privateKey, blocks[0]);\n        const modulus = f(privateKey, blocks[1]);\n        const publicExponent = f(privateKey, blocks[2]);\n        const privateExponent = f(privateKey, blocks[3]);\n        const prime1 = f(privateKey, blocks[4]);\n        const prime2 = f(privateKey, blocks[5]);\n        const exponent1 = f(privateKey, blocks[6]);\n        const exponent2 = f(privateKey, blocks[7]);\n\n        return {\n            version,\n            modulus,\n            publicExponent,\n            privateExponent,\n            prime1,\n            prime2,\n            exponent1,\n            exponent2,\n        };\n    }\n    /* istanbul ignore next */\n    if (doDebug) {\n        // tslint:disable:no-console\n        console.log(\"-------------------- private key:\");\n        console.log(block_info);\n\n        // tslint:disable:no-console\n        console.log(\n            blocks.map((b) => ({\n                tag: TagType[b.tag] + \" 0x\" + b.tag.toString(16),\n                l: b.length,\n                p: b.position,\n                buff: privateKey.subarray(b.position, b.position + b.length).toString(\"hex\"),\n            }))\n        );\n    }\n\n    const b = blocks[2];\n    const bb = privateKey.subarray(b.position, b.position + b.length);\n    const block_info1 = readTag(bb, 0);\n    const blocks1 = readStruct(bb, block_info1);\n\n    /* istanbul ignore next */\n    if (doDebug) {\n        // tslint:disable:no-console\n        console.log(\n            blocks1.map((b) => ({\n                tag: TagType[b.tag] + \" 0x\" + b.tag.toString(16),\n                l: b.length,\n                p: b.position,\n                buff: bb.subarray(b.position, b.position + b.length).toString(\"hex\"),\n            }))\n        );\n    }\n\n    const version = f(bb, blocks1[0]);\n    const modulus = f(bb, blocks1[1]);\n    const publicExponent = f(bb, blocks1[2]);\n    const privateExponent = f(bb, blocks1[3]);\n    const prime1 = f(bb, blocks1[4]);\n    const prime2 = f(bb, blocks1[5]);\n    const exponent1 = f(bb, blocks1[6]);\n    const exponent2 = f(bb, blocks1[7]);\n\n    return {\n        version,\n        modulus,\n        publicExponent,\n        privateExponent,\n        prime1,\n        prime2,\n        exponent1,\n        exponent2,\n    };\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport { explorePrivateKey } from \"./explore_private_key.js\";\nimport { Certificate, CertificatePEM, PrivateKey } from \"./common.js\";\nimport { privateDecrypt_long, publicEncrypt_long, toPem } from \"./crypto_utils.js\";\nimport { exploreCertificate } from \"./crypto_explore_certificate.js\";\n\nexport function publicKeyAndPrivateKeyMatches(certificate: Certificate, privateKey: PrivateKey): boolean {\n    const i = exploreCertificate(certificate);\n    const j = explorePrivateKey(privateKey);\n\n    const modulus1 = i.tbsCertificate.subjectPublicKeyInfo.subjectPublicKey.modulus;\n    const modulus2 = j.modulus;\n\n    if (modulus1.length != modulus2.length) {\n        return false;\n    }\n    return modulus1.toString(\"hex\") === modulus2.toString(\"hex\");\n}\n\n/**\n * check that the given certificate matches the given private key\n * @param certificate\n * @param privateKey\n */\nfunction certificateMatchesPrivateKeyPEM(certificate: CertificatePEM, privateKey: PrivateKey, blockSize: number): boolean {\n    const initialBuffer = Buffer.from(\"Lorem Ipsum\");\n    const encryptedBuffer = publicEncrypt_long(initialBuffer, certificate, blockSize);\n    const decryptedBuffer = privateDecrypt_long(encryptedBuffer, privateKey, blockSize);\n    const finalString = decryptedBuffer.toString(\"utf-8\");\n    return initialBuffer.toString(\"utf-8\") === finalString;\n}\n\nexport function certificateMatchesPrivateKey(certificate: Certificate, privateKey: PrivateKey): boolean {\n    const e = explorePrivateKey(privateKey);\n    const blockSize = e.modulus.length;\n    const certificatePEM = toPem(certificate, \"CERTIFICATE\");\n    return certificateMatchesPrivateKeyPEM(certificatePEM, privateKey, blockSize);\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\nimport __crypto from \"crypto\";\nconst KeyObjectOrig = __crypto.KeyObject;\n\nexport const { createPrivateKey: createPrivateKeyFromNodeJSCrypto } = __crypto;\n\ntype KeyFormat = \"pem\" | \"der\" | \"jwk\";\ntype KeyObjectType = \"secret\" | \"public\" | \"private\";\ninterface KeyExportOptions<T extends KeyFormat> {\n    type: \"pkcs1\" | \"spki\" | \"pkcs8\" | \"sec1\";\n    format: T;\n    cipher?: string | undefined;\n    passphrase?: string | Buffer | undefined;\n}\ninterface JwkKeyExportOptions {\n    format: \"jwk\";\n}\nexport interface KeyObject {\n    export(options: KeyExportOptions<\"pem\">): string | Buffer;\n    export(options: KeyExportOptions<\"der\">): Buffer;\n    export(options: JwkKeyExportOptions): JsonWebKey;\n\n    type: KeyObjectType;\n}\nexport function isKeyObject(mayBeKeyObject: any): boolean {\n    if (KeyObjectOrig) {\n        return mayBeKeyObject instanceof KeyObjectOrig;\n    }\n    return typeof mayBeKeyObject === \"object\" && typeof (mayBeKeyObject as any).type === \"string\"; /// .constructor?.name === \"KeyObject\";\n}\nexport type PrivateKey = { hidden: string } | { hidden: KeyObject };\nexport type PublicKey = KeyObject;\n\nexport type Nonce = Buffer;\nexport type PEM = string;\nexport type DER = Buffer;\nexport type Certificate = DER;\nexport type CertificatePEM = PEM; // certificate as a PEM string\nexport type PrivateKeyPEM = PEM;\nexport type PublicKeyPEM = PEM;\n\nexport type Signature = Buffer;\nexport type CertificateRevocationList = Buffer;\n\nexport enum CertificatePurpose {\n    NotSpecified = 0,\n    ForCertificateAuthority = 1,\n    ForApplication = 2,\n    ForUserAuthentication = 3, // X509\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\n// tslint:disabled:no-var-requires\n/**\n * @module node_opcua_crypto\n */\nimport assert from \"assert\";\n\nimport { KeyObject, isKeyObject } from \"./common.js\";\n\nimport { PublicKey, PublicKeyPEM, PrivateKeyPEM, PrivateKey } from \"./common.js\";\nimport { removeTrailingLF, toPem } from \"./crypto_utils.js\";\n\nimport jsrsasign from \"jsrsasign\";\n\n/***\n * @method rsaLengthPrivateKey\n * A very expensive way to determine the rsa key length ( i.e 2048bits or 1024bits)\n * @param key  a PEM public key or a PEM rsa private key\n * @return the key length in bytes.\n */\nexport function rsaLengthPrivateKey(key: PrivateKey): number {\n    const keyPem = typeof key.hidden === \"string\" ? key.hidden : key.hidden.export({ type: \"pkcs1\", format: \"pem\" }).toString();\n    // in node 16 and above :\n    // return o.asymmetricKeyDetails.modulusLength/8\n    // in node <16 :\n    const a = jsrsasign.KEYUTIL.getKey(keyPem) as any;\n    return a.n.toString(16).length / 2;\n}\n\n/**\n * @method toPem2\n * @param raw_key\n * @param pem\n *\n *\n * @return a PEM string containing the Private Key\n *\n * Note:  a Pem key can be converted back to a private key object using coercePrivateKey\n *\n */\nexport function toPem2(raw_key: Buffer | string | KeyObject | PrivateKey, pem: string): string {\n    if ((raw_key as PrivateKey).hidden) {\n        return toPem2((raw_key as PrivateKey).hidden, pem);\n    }\n    assert(raw_key, \"expecting a key\");\n    assert(typeof pem === \"string\");\n\n    if (isKeyObject(raw_key)) {\n        const _raw_key = raw_key as KeyObject;\n        if (pem === \"RSA PRIVATE KEY\") {\n            return removeTrailingLF(_raw_key.export({ format: \"pem\", type: \"pkcs1\" }).toString());\n        } else if (pem === \"PRIVATE KEY\") {\n            return removeTrailingLF(_raw_key.export({ format: \"pem\", type: \"pkcs8\" }).toString());\n        } else {\n            throw new Error(\"Unsupported case!\");\n        }\n    }\n    return toPem(raw_key as Buffer | string, pem);\n}\n\nexport function coercePrivateKeyPem(privateKey: PrivateKey): PrivateKeyPEM {\n    return toPem2(privateKey, \"PRIVATE KEY\");\n    /*\n    if (Buffer.isBuffer(privateKey.hidden)) {\n        const o = createPrivateKeyFromNodeJSCrypto({ key: privateKey.hidden, format: \"der\", type: \"pkcs1\" });\n        const e = o.export({ format: \"der\", type: \"pkcs1\" });\n        return toPem(e, \"RSA PRIVATE KEY\");\n    } else if (privateKey.hidden instanceof KeyObject) {\n        const o = privateKey.hidden.export({ format: \"pem\", type: \"pkcs1\" });\n        return o.toString();\n    } else if (typeof privateKey.hidden === \"string\") {\n        return privateKey.hidden;\n    }\n    throw new Error(\"Invalid privateKey\");\n    */\n}\n\nexport function coercePublicKeyPem(publicKey: PublicKey | PublicKeyPEM): PublicKeyPEM {\n    if (isKeyObject(publicKey)) {\n        return (publicKey as KeyObject).export({ format: \"pem\", type: \"spki\" }).toString();\n    }\n    assert(typeof publicKey === \"string\");\n    return publicKey;\n}\nexport function coerceRsaPublicKeyPem(publicKey: PublicKey | KeyObject | PublicKeyPEM): PublicKeyPEM {\n    if (isKeyObject(publicKey)) {\n        return (publicKey as KeyObject).export({ format: \"pem\", type: \"spki\" }).toString();\n    }\n    assert(typeof publicKey === \"string\");\n    return publicKey;\n}\n\nexport function rsaLengthPublicKey(key: PublicKeyPEM | PublicKey): number {\n    key = coercePublicKeyPem(key);\n    assert(typeof key === \"string\");\n    const a = jsrsasign.KEYUTIL.getKey(key) as any;\n    return a.n.toString(16).length / 2;\n}\nexport function rsaLengthRsaPublicKey(key: PublicKeyPEM | PublicKey): number {\n    key = coerceRsaPublicKeyPem(key);\n    assert(typeof key === \"string\");\n    const a = jsrsasign.KEYUTIL.getKey(key) as any;\n    return a.n.toString(16).length / 2;\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\n/**\n * @module node_opcua_crypto\n */\nimport assert from \"assert\";\nimport { createCipheriv, createDecipheriv, createHmac } from \"crypto\";\n\nimport { createFastUninitializedBuffer } from \"./buffer_utils.js\";\nimport { Nonce } from \"./common.js\";\nimport { verifyMessageChunkSignature, VerifyMessageChunkSignatureOptions } from \"./crypto_utils.js\";\nimport { exploreCertificateInfo } from \"./explore_certificate.js\";\n\nfunction HMAC_HASH(sha1or256: \"SHA1\" | \"SHA256\", secret: Buffer, message: Buffer) {\n    return createHmac(sha1or256, secret).update(message).digest();\n}\n\nfunction plus(buf1: Buffer, buf2: Buffer): Buffer {\n    return Buffer.concat([buf1, buf2]);\n}\n\n// OPC-UA Spec 1.02 part 6 - 6.7.5  Deriving Keys page 42\n// Once the  SecureChannel  is established the  Messages  are signed and encrypted with keys derived\n// from the  Nonces  exchanged in t he  OpenSecureChannel  call. These keys are derived by passing the\n// Nonces  to a pseudo - random function which produces a sequence of bytes from a set of inputs.   A\n// pseudo- random function  is represented by the following function declaration:\n// Byte[] PRF(\n//     Byte[] secret,\n//     Byte[] seed,\n//     Int32 length,\n//     Int32 offset\n// )\n// Where length   is the number of bytes to return and  offset  is a number of bytes from the beginning of\n// the sequence.\n// The lengths of the keys that need to be generated depend on the  SecurityPolicy  used for the\n//    channel. The following information is specified by the  SecurityPolicy:\n//    a)  SigningKeyLength  (from the  DerivedSignatureKeyLength);\n//    b)  EncryptingKeyLength  (implied by the  SymmetricEncryptionAlgorithm);\n//    c)  EncryptingBlockSize  (implied by the  SymmetricEncryptionAlgorithm).\n//  The parameters  passed to the pseudo random function are specified in  Table 36.\n//  Table 36  - Cryptography Key Generation Parameters\n//\n// Key                         Secret       Seed         Length               Offset\n// ClientSigningKey            ServerNonce  ClientNonce  SigningKeyLength     0\n// ClientEncryptingKey         ServerNonce  ClientNonce  EncryptingKeyLength  SigningKeyLength\n// ClientInitializationVector  ServerNonce  ClientNonce  EncryptingBlockSize  SigningKeyLength+ EncryptingKeyLength\n// ServerSigningKey            ClientNonce  ServerNonce  SigningKeyLength     0\n// ServerEncryptingKey         ClientNonce  ServerNonce  EncryptingKeyLength  SigningKeyLength\n// ServerInitializationVector  ClientNonce  ServerNonce  EncryptingBlockSize  SigningKeyLength+ EncryptingKeyLength\n//\n// The  Client  keys are used to secure  Messages  sent by the  Client. The  Server  keys are used to\n// secure Messages  sent by the  Server.\n// The SSL/TLS  specification  defines a pseudo random function called P_HASH which is used for this purpose.\n//\n// The P_HASH  algorithm is defined as follows:\n//\n//    P_HASH(secret, seed) = HMAC_HASH(secret, A(1) + seed) +\n//                            HMAC_HASH(secret, A(2) + seed) +\n//                            HMAC_HASH(secret, A(3) + seed) + ...\n// Where A(n) is defined as:\n//       A(0) = seed\n//       A(n) = HMAC_HASH(secret, A(n-1))\n//            + indicates that the results are appended to previous results.\n// Where HASH is a hash function such as SHA1 or SHA256. The hash function to use depends on the SecurityPolicyUri.\n//\n//\n// see also http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/ws-secureconversation-1.3-os.html\n//          http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\nexport function makePseudoRandomBuffer(secret: Nonce, seed: Nonce, minLength: number, sha1or256: \"SHA1\" | \"SHA256\"): Buffer {\n    assert(Buffer.isBuffer(seed));\n    assert(sha1or256 === \"SHA1\" || sha1or256 === \"SHA256\");\n\n    const a: Buffer[] = [];\n    a[0] = seed;\n    let index = 1;\n    let p_hash = createFastUninitializedBuffer(0);\n    while (p_hash.length <= minLength) {\n        /* eslint  new-cap:0 */\n        a[index] = HMAC_HASH(sha1or256, secret, a[index - 1]);\n        p_hash = plus(p_hash, HMAC_HASH(sha1or256, secret, plus(a[index], seed)));\n        index += 1;\n    }\n    return p_hash.subarray(0, minLength);\n}\n\nexport interface ComputeDerivedKeysOptions {\n    signatureLength: number;\n    signingKeyLength: number;\n    encryptingKeyLength: number;\n\n    encryptingBlockSize: number;\n    algorithm: string;\n    sha1or256?: \"SHA1\" | \"SHA256\";\n}\n\nexport interface DerivedKeys extends ComputeDerivedKeysOptions {\n    signatureLength: number;\n    signingKeyLength: number;\n    encryptingKeyLength: number;\n\n    encryptingBlockSize: number;\n    algorithm: string;\n    sha1or256: \"SHA1\" | \"SHA256\";\n\n    signingKey: Buffer;\n    encryptingKey: Buffer;\n    initializationVector: Buffer;\n}\n\nexport function computeDerivedKeys(secret: Nonce, seed: Nonce, options: ComputeDerivedKeysOptions): DerivedKeys {\n    assert(Number.isFinite(options.signatureLength));\n    assert(Number.isFinite(options.encryptingKeyLength));\n    assert(Number.isFinite(options.encryptingBlockSize));\n    assert(typeof options.algorithm === \"string\");\n    options.sha1or256 = options.sha1or256 || \"SHA1\";\n    assert(typeof options.sha1or256 === \"string\");\n\n    const offset1 = options.signingKeyLength;\n    const offset2 = offset1 + options.encryptingKeyLength;\n    const minLength = offset2 + options.encryptingBlockSize;\n\n    const buf = makePseudoRandomBuffer(secret, seed, minLength, options.sha1or256);\n\n    // +---------------+---------------------+-----------------------+\n    // + signingKey    + encryptingKey       + initializationVector  +\n    // +---------------+---------------------+-----------------------+\n    return {\n        signatureLength: options.signatureLength,\n        signingKeyLength: options.signingKeyLength,\n        encryptingKeyLength: options.encryptingKeyLength,\n\n        encryptingBlockSize: options.encryptingBlockSize,\n        algorithm: options.algorithm,\n        sha1or256: options.sha1or256,\n\n        signingKey: buf.subarray(0, offset1),\n        encryptingKey: buf.subarray(offset1, offset2),\n        initializationVector: buf.subarray(offset2, minLength),\n    };\n}\n\n/**\n * @method reduceLength\n * @param buffer\n * @param byteToRemove\n * @return buffer\n */\nexport function reduceLength(buffer: Buffer, byteToRemove: number): Buffer {\n    return buffer.subarray(0, buffer.length - byteToRemove);\n}\n\n/**\n * @method removePadding\n * @param buffer\n * @return buffer with padding removed\n */\nexport function removePadding(buffer: Buffer): Buffer {\n    const nbPaddingBytes = buffer.readUInt8(buffer.length - 1) + 1;\n    return reduceLength(buffer, nbPaddingBytes);\n}\n\nexport type VerifyChunkSignatureOptions = VerifyMessageChunkSignatureOptions;\n\n/**\n * @method verifyChunkSignature\n *\n *     const signer = {\n *           signatureLength : 128,\n *           algorithm : \"RSA-SHA256\",\n *           public_key: \"qsdqsdqsd\"\n *     };\n *\n * @param chunk  The message chunk to verify.\n * @param options\n * @param options.signatureLength\n * @param options.algorithm  the algorithm.\n * @param options.publicKey\n * @return {*}\n */\nexport function verifyChunkSignature(chunk: Buffer, options: VerifyChunkSignatureOptions): boolean {\n    assert(Buffer.isBuffer(chunk));\n    let signatureLength = options.signatureLength || 0;\n    if (signatureLength === 0) {\n        // let's get the signatureLength by checking the size\n        // of the certificate's public key\n        const cert = exploreCertificateInfo(options.publicKey);\n        signatureLength = cert.publicKeyLength || 0; // 1024 bits = 128Bytes or 2048=256Bytes\n    }\n    const block_to_verify = chunk.subarray(0, chunk.length - signatureLength);\n    const signature = chunk.subarray(chunk.length - signatureLength);\n    return verifyMessageChunkSignature(block_to_verify, signature, options);\n}\n\n// /**\n//  * extract the public key from a certificate - using the pem module\n//  *\n//  * @method extractPublicKeyFromCertificate_WithPem\n//  * @async\n//  * @param certificate\n//  * @param callback {Function}\n//  * @param callback.err\n//  * @param callback.publicKey as pem\n//  */\n// exports.extractPublicKeyFromCertificate_WithPem = function (certificate, callback) {\n//\n//     const err1 = new Error();\n//     const cert_pem = crypto_utils.toPem(certificate, \"CERTIFICATE\");\n//     require(\"pem\").getPublicKey(cert_pem, function (err, data) {\n//         if (err) {\n//             console.log(err1.stack);\n//             console.log(\" CANNOT EXTRAT PUBLIC KEY from Certificate\".red, certificate);\n//             return callback(err);\n//         }\n//         callback(err, data.publicKey);\n//     });\n// };\n//\n\nexport function computePaddingFooter(buffer: Buffer, derivedKeys: DerivedKeys): Buffer {\n    assert(Object.prototype.hasOwnProperty.call(derivedKeys, \"encryptingBlockSize\"));\n    const paddingSize = derivedKeys.encryptingBlockSize - ((buffer.length + 1) % derivedKeys.encryptingBlockSize);\n    const padding = createFastUninitializedBuffer(paddingSize + 1);\n    padding.fill(paddingSize);\n    return padding;\n}\n\nfunction derivedKeys_algorithm(derivedKeys: DerivedKeys) {\n    assert(Object.prototype.hasOwnProperty.call(derivedKeys, \"algorithm\"));\n    const algorithm = derivedKeys.algorithm || \"aes-128-cbc\";\n    assert(algorithm === \"aes-128-cbc\" || algorithm === \"aes-256-cbc\");\n    return algorithm;\n}\n\nexport function encryptBufferWithDerivedKeys(buffer: Buffer, derivedKeys: DerivedKeys): Buffer {\n    const algorithm = derivedKeys_algorithm(derivedKeys);\n    const key = derivedKeys.encryptingKey;\n    const initVector = derivedKeys.initializationVector;\n    const cipher = createCipheriv(algorithm, key, initVector);\n\n    cipher.setAutoPadding(false);\n    const encrypted_chunks: Buffer[] = [];\n    encrypted_chunks.push(cipher.update(buffer));\n    encrypted_chunks.push(cipher.final());\n    return Buffer.concat(encrypted_chunks);\n}\n\nexport function decryptBufferWithDerivedKeys(buffer: Buffer, derivedKeys: DerivedKeys): Buffer {\n    const algorithm = derivedKeys_algorithm(derivedKeys);\n    const key = derivedKeys.encryptingKey;\n    const initVector = derivedKeys.initializationVector;\n    const cipher = createDecipheriv(algorithm, key, initVector);\n\n    cipher.setAutoPadding(false);\n\n    const decrypted_chunks: Buffer[] = [];\n    decrypted_chunks.push(cipher.update(buffer));\n    decrypted_chunks.push(cipher.final());\n\n    return Buffer.concat(decrypted_chunks);\n}\n\n/**\n * @method makeMessageChunkSignatureWithDerivedKeys\n * @param message\n * @param derivedKeys\n * @return\n */\nexport function makeMessageChunkSignatureWithDerivedKeys(message: Buffer, derivedKeys: DerivedKeys): Buffer {\n    assert(Buffer.isBuffer(message));\n    assert(Buffer.isBuffer(derivedKeys.signingKey));\n    assert(typeof derivedKeys.sha1or256 === \"string\");\n    assert(derivedKeys.sha1or256 === \"SHA1\" || derivedKeys.sha1or256 === \"SHA256\");\n    const signature = createHmac(derivedKeys.sha1or256, derivedKeys.signingKey).update(message).digest();\n    assert(signature.length === derivedKeys.signatureLength);\n    return signature;\n}\n\n/**\n * @method verifyChunkSignatureWithDerivedKeys\n * @param chunk\n * @param derivedKeys\n * @return\n */\nexport function verifyChunkSignatureWithDerivedKeys(chunk: Buffer, derivedKeys: DerivedKeys): boolean {\n    const message = chunk.subarray(0, chunk.length - derivedKeys.signatureLength);\n    const expectedSignature = chunk.subarray(chunk.length - derivedKeys.signatureLength);\n    const computedSignature = makeMessageChunkSignatureWithDerivedKeys(message, derivedKeys);\n    return computedSignature.toString(\"hex\") === expectedSignature.toString(\"hex\");\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n/**\n * @module node_opcua_crypto\n */\nimport assert from \"assert\";\n\nimport { Certificate, CertificatePEM } from \"./common.js\";\nimport { exploreCertificate, SubjectPublicKey } from \"./crypto_explore_certificate.js\";\nimport { DirectoryName } from \"./directory_name.js\";\nimport { convertPEMtoDER } from \"./crypto_utils.js\";\n\nexport type PublicKeyLength = 64 | 96 | 128 | 256 | 384 | 512;\n\n/**\n * A structure exposing useful information about a certificate\n */\nexport interface CertificateInfo {\n    /** the public key length in bits */\n    publicKeyLength: PublicKeyLength;\n    /** the date at which the certificate starts to be valid */\n    notBefore: Date;\n    /** the date after which the certificate is not valid any more */\n    notAfter: Date;\n    /** info about certificate owner */\n    subject: DirectoryName;\n    /** public key */\n    publicKey: SubjectPublicKey;\n}\n\nexport function coerceCertificate(certificate: Certificate | CertificatePEM): Certificate {\n    if (typeof certificate === \"string\") {\n        certificate = convertPEMtoDER(certificate);\n    }\n    assert(Buffer.isBuffer(certificate));\n    return certificate;\n}\n\n/**\n * @method exploreCertificateInfo\n * returns useful information about the certificate such as public key length, start date and end of validity date,\n * and CN\n * @param certificate the certificate to explore\n */\nexport function exploreCertificateInfo(certificate: Certificate | CertificatePEM): CertificateInfo {\n    certificate = coerceCertificate(certificate);\n\n    const certInfo = exploreCertificate(certificate);\n    const data: CertificateInfo = {\n        publicKeyLength: certInfo.tbsCertificate.subjectPublicKeyInfo.keyLength,\n        notBefore: certInfo.tbsCertificate.validity.notBefore,\n        notAfter: certInfo.tbsCertificate.validity.notAfter,\n        publicKey: certInfo.tbsCertificate.subjectPublicKeyInfo.subjectPublicKey,\n        subject: certInfo.tbsCertificate.subject,\n    };\n    // istanbul ignore next\n    if (\n        !(\n            data.publicKeyLength === 512 ||\n            data.publicKeyLength === 384 ||\n            data.publicKeyLength === 256 ||\n            data.publicKeyLength === 128\n        )\n    ) {\n        throw new Error(\"Invalid public key length (expecting 128,256,384 or 512)\" + data.publicKeyLength);\n    }\n    return data;\n}\n","import { BlockInfo, readTag, readStruct, TagType } from \"./asn1\";\nimport { hexDump } from \"./crypto_utils\";\n\nfunction t(tag: number) {\n    // convert Asn1 tag to string\n    return TagType[tag];\n}\nfunction bi(blockInfo: BlockInfo, depth: number) {\n    const indent = \"  \".repeat(depth);\n    const hl = blockInfo.position - blockInfo.start; // header length\n    return `${blockInfo.start.toString().padStart(5, \" \")}:d=${depth} hl=${hl.toString().padEnd(3, \" \")}  l=${blockInfo.length\n        .toString()\n        .padStart(6, \" \")} ${blockInfo.tag.toString(16).padEnd(2, \" \")} ${indent} ${t(blockInfo.tag)}`;\n}\n\nexport function exploreAsn1(buffer: Buffer) {\n    console.log(hexDump(buffer));\n\n    function dump(offset: number, depth: number) {\n        const blockInfo = readTag(buffer, offset);\n        dumpBlock(blockInfo, depth);\n\n        function dumpBlock(blockInfo: BlockInfo, depth: number) {\n            console.log(bi(blockInfo, depth));\n            if (blockInfo.tag === TagType.SEQUENCE || blockInfo.tag === TagType.SET || blockInfo.tag >= TagType.CONTEXT_SPECIFIC0) {\n                const blocks = readStruct(buffer, blockInfo);\n                for (const block of blocks) {\n                    dumpBlock(block, depth + 1);\n                }\n            }\n        }\n    }\n    dump(0, 0);\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport {\n    AlgorithmIdentifier,\n    BlockInfo,\n    TagType,\n    findBlockAtIndex,\n    formatBuffer2DigitHexWithColum,\n    getBlock,\n    readAlgorithmIdentifier,\n    readIntegerValue,\n    readLongIntegerValue,\n    readSignatureValueBin,\n    readStruct,\n    readTag,\n    readTime,\n} from \"./asn1.js\";\nimport { DirectoryName, readDirectoryName } from \"./directory_name.js\";\nimport { CertificateRevocationList } from \"./common.js\";\nimport { makeSHA1Thumbprint, convertPEMtoDER } from \"./crypto_utils.js\";\n\nexport type Version = string;\nexport type Name = string;\nexport type CertificateSerialNumber = string;\nexport type Extensions = Record<string, unknown>;\nexport interface RevokedCertificate {\n    userCertificate: CertificateSerialNumber;\n    revocationDate: Date;\n    crlEntryExtensions?: Extensions;\n}\nexport interface TBSCertList {\n    version?: Version; //OPTIONAL; // must be 2\n    signature: AlgorithmIdentifier;\n    issuer: Name;\n    issuerFingerprint: string; // 00:AA:BB:etc ...\n    thisUpdate: Date;\n    nextUpdate?: Date; //             Time OPTIONAL,\n    revokedCertificates: RevokedCertificate[];\n    //    crlExtensions[0]  EXPLICIT Extensions OPTIONAL\n}\nexport interface CertificateRevocationListInfo {\n    tbsCertList: TBSCertList;\n    signatureAlgorithm: AlgorithmIdentifier;\n    signatureValue: Buffer;\n}\n\nexport function readNameForCrl(buffer: Buffer, block: BlockInfo): DirectoryName {\n    return readDirectoryName(buffer, block);\n}\n\nfunction _readTbsCertList(buffer: Buffer, blockInfo: BlockInfo): TBSCertList {\n    const blocks = readStruct(buffer, blockInfo);\n\n    const hasOptionalVersion = blocks[0].tag === TagType.INTEGER;\n\n    if (hasOptionalVersion) {\n        const version = readIntegerValue(buffer, blocks[0]);\n        const signature = readAlgorithmIdentifier(buffer, blocks[1]);\n        const issuer = readNameForCrl(buffer, blocks[2]);\n        const issuerFingerprint = formatBuffer2DigitHexWithColum(makeSHA1Thumbprint(getBlock(buffer, blocks[2])));\n\n        const thisUpdate = readTime(buffer, blocks[3]);\n        const nextUpdate = readTime(buffer, blocks[4]);\n\n        const revokedCertificates: RevokedCertificate[] = [];\n\n        if (blocks[5] && blocks[5].tag < 0x80) {\n            const list = readStruct(buffer, blocks[5]);\n            for (const r of list) {\n                // sometime blocks[5] doesn't exits .. in this case\n                const rr = readStruct(buffer, r);\n                const userCertificate = formatBuffer2DigitHexWithColum(readLongIntegerValue(buffer, rr[0]));\n                const revocationDate = readTime(buffer, rr[1]);\n                revokedCertificates.push({\n                    revocationDate,\n                    userCertificate,\n                });\n            }\n        }\n\n        const ext0 = findBlockAtIndex(blocks, 0);\n        return { issuer, issuerFingerprint, thisUpdate, nextUpdate, signature, revokedCertificates } as TBSCertList;\n    } else {\n        const signature = readAlgorithmIdentifier(buffer, blocks[0]);\n        const issuer = readNameForCrl(buffer, blocks[1]);\n        const issuerFingerprint = formatBuffer2DigitHexWithColum(makeSHA1Thumbprint(getBlock(buffer, blocks[1])));\n\n        const thisUpdate = readTime(buffer, blocks[2]);\n        const nextUpdate = readTime(buffer, blocks[3]);\n\n        const revokedCertificates: RevokedCertificate[] = [];\n\n        if (blocks[4] && blocks[4].tag < 0x80) {\n            const list = readStruct(buffer, blocks[4]);\n            for (const r of list) {\n                // sometime blocks[5] doesn't exits .. in this case\n                const rr = readStruct(buffer, r);\n                const userCertificate = formatBuffer2DigitHexWithColum(readLongIntegerValue(buffer, rr[0]));\n                const revocationDate = readTime(buffer, rr[1]);\n                revokedCertificates.push({\n                    revocationDate,\n                    userCertificate,\n                });\n            }\n        }\n        return { issuer, issuerFingerprint, thisUpdate, nextUpdate, signature, revokedCertificates } as TBSCertList;\n    }\n}\n// see https://tools.ietf.org/html/rfc5280\n\nexport function exploreCertificateRevocationList(crl: CertificateRevocationList): CertificateRevocationListInfo {\n    const blockInfo = readTag(crl, 0);\n    const blocks = readStruct(crl, blockInfo);\n    const tbsCertList = _readTbsCertList(crl, blocks[0]);\n    const signatureAlgorithm = readAlgorithmIdentifier(crl, blocks[1]);\n    const signatureValue = readSignatureValueBin(crl, blocks[2]);\n    return { tbsCertList, signatureAlgorithm, signatureValue };\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport { BlockInfo, findBlockAtIndex, getBlock, readObjectIdentifier, readStruct, readTag } from \"./asn1.js\";\n\nimport { BasicConstraints, X509KeyUsage, readExtension } from \"./crypto_explore_certificate.js\";\n\nexport interface ExtensionRequest {\n    basicConstraints: BasicConstraints;\n    keyUsage: X509KeyUsage;\n    subjectAltName: any;\n}\nexport interface CertificateSigningRequestInfo {\n    extensionRequest: ExtensionRequest;\n}\n\nfunction _readExtensionRequest(buffer: Buffer): ExtensionRequest {\n    const block = readTag(buffer, 0);\n\n    const inner_blocks = readStruct(buffer, block);\n    const extensions = inner_blocks.map((block1) => readExtension(buffer, block1));\n\n    const result: any = {};\n    for (const e of extensions) {\n        result[e.identifier.name] = e.value;\n    }\n    const { basicConstraints, keyUsage, subjectAltName } = result;\n    return { basicConstraints, keyUsage, subjectAltName };\n}\n\nexport function readCertificationRequestInfo(buffer: Buffer, block: BlockInfo): CertificateSigningRequestInfo {\n    const blocks = readStruct(buffer, block);\n    if (blocks.length === 4) {\n        const extensionRequestBlock = findBlockAtIndex(blocks, 0);\n        if (!extensionRequestBlock) {\n            throw new Error(\"cannot find extensionRequest block\");\n        }\n        const blocks1 = readStruct(buffer, extensionRequestBlock);\n        const blocks2 = readStruct(buffer, blocks1[0]);\n        const identifier = readObjectIdentifier(buffer, blocks2[0]);\n        if (identifier.name !== \"extensionRequest\") {\n            throw new Error(\" Cannot find extension Request in ASN1 block\");\n        }\n        const buf = getBlock(buffer, blocks2[1]);\n\n        const extensionRequest = _readExtensionRequest(buf);\n\n        return { extensionRequest };\n    }\n    throw new Error(\"Invalid CSR or \");\n}\n\n// see https://tools.ietf.org/html/rfc2986 : Certification Request Syntax Specification Version 1.7\n\nexport function exploreCertificateSigningRequest(crl: Buffer): CertificateSigningRequestInfo {\n    const blockInfo = readTag(crl, 0);\n    const blocks = readStruct(crl, blockInfo);\n    const csrInfo = readCertificationRequestInfo(crl, blocks[0]);\n    return csrInfo;\n}\n","import { PrivateKey } from \"./common.js\";\nexport function makePrivateKeyFromPem(privateKeyInPem: string): PrivateKey {\n    return { hidden: privateKeyInPem };\n}\n","import { PrivateKey } from \"./common.js\";\nexport function makePrivateKeyThumbPrint(privateKey: PrivateKey): Buffer {\n    //   // .export({ format: \"der\", type: \"pkcs1\" });\n    //   if (typeof privateKey === \"string\") {\n    //\n    //   } else {\n    //    return makeSHA1Thumbprint(privateKey.hidden);\n    //   }\n    // to do\n    return Buffer.alloc(0);\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport interface SubjectOptions {\n    commonName?: string;\n    organization?: string;\n    organizationalUnit?: string;\n    locality?: string;\n    state?: string;\n    country?: string;\n    domainComponent?: string;\n}\n\nconst _keys = {\n    C: \"country\",\n    CN: \"commonName\",\n    DC: \"domainComponent\",\n    L: \"locality\",\n    O: \"organization\",\n    OU: \"organizationalUnit\",\n    ST: \"state\",\n};\n\nconst enquoteIfNecessary = (str: string) => {\n    str = str.replace(/\"/g, \"”\");\n    return str.match(/\\/|=/) ? `\"${str}\"` : str;\n};\nconst unquote = (str: string) => str.replace(/\"/gm, \"\");\nconst unquote2 = (str?: string | undefined) => {\n    if (!str) return str;\n    const m = str.match(/^\"(.*)\"$/);\n    return m ? m[1] : str;\n};\n/**\n * subjectName\tThe subject name to use for the Certificate.\n * If not specified the ApplicationName and/or domainNames are used to create a suitable default value.\n */\nexport class Subject implements SubjectOptions {\n    public readonly commonName?: string;\n    public readonly organization?: string;\n    public readonly organizationalUnit?: string;\n    public readonly locality?: string;\n    public readonly state?: string;\n    public readonly country?: string;\n    public readonly domainComponent?: string;\n\n    constructor(options: SubjectOptions | string) {\n        if (typeof options === \"string\") {\n            options = Subject.parse(options);\n        }\n        this.commonName = unquote2(options.commonName);\n        this.organization = unquote2(options.organization);\n        this.organizationalUnit = unquote2(options.organizationalUnit);\n        this.locality = unquote2(options.locality);\n        this.state = unquote2(options.state);\n        this.country = unquote2(options.country);\n        this.domainComponent = unquote2(options.domainComponent);\n    }\n\n    public static parse(str: string): SubjectOptions {\n        const elements = str.split(/\\/(?=[^/]*?=)/);\n        const options: Record<string, unknown> = {};\n\n        elements.forEach((element: string) => {\n            if (element.length === 0) {\n                return;\n            }\n            const s: string[] = element.split(\"=\");\n\n            if (s.length !== 2) {\n                throw new Error(\"invalid format for \" + element);\n            }\n            const longName = (_keys as Record<string, string>)[s[0]];\n            if (!longName) {\n                throw new Error(\"Invalid field found in subject name \" + s[0]);\n            }\n            const value = s[1];\n            options[longName] = unquote(Buffer.from(value, \"ascii\").toString(\"utf8\"));\n        });\n        return options as SubjectOptions;\n    }\n\n    public toStringInternal(sep: string): string {\n        // https://reference.opcfoundation.org/v104/GDS/docs/7.6.4/\n        // The format of the subject name is a sequence of name value pairs separated by a ‘/’.\n        // The name shall be one of ‘CN’, ‘O’, ‘OU’, ‘DC’, ‘L’, ‘S’ or ‘C’ and\n        // shall be followed by a ‘=’ and then followed by the value.\n        // The value may be any printable character except for ‘”’.\n        // If the value contains a ‘/’ or a ‘=’ then it shall be enclosed in double quotes (‘”’).\n\n        const tmp: string[] = [];\n        if (this.country) {\n            tmp.push(\"C=\" + enquoteIfNecessary(this.country));\n        }\n        if (this.state) {\n            tmp.push(\"ST=\" + enquoteIfNecessary(this.state));\n        }\n        if (this.locality) {\n            tmp.push(\"L=\" + enquoteIfNecessary(this.locality));\n        }\n        if (this.organization) {\n            tmp.push(\"O=\" + enquoteIfNecessary(this.organization));\n        }\n        if (this.organizationalUnit) {\n            tmp.push(\"OU=\" + enquoteIfNecessary(this.organizationalUnit));\n        }\n        if (this.commonName) {\n            tmp.push(\"CN=\" + enquoteIfNecessary(this.commonName));\n        }\n        if (this.domainComponent) {\n            tmp.push(\"DC=\" + enquoteIfNecessary(this.domainComponent));\n        }\n        return tmp.join(sep);\n    }\n    public toStringForOPCUA(): string {\n        return this.toStringInternal(\"/\");\n    }\n    public toString(): string {\n        // standard for SSL is to have a / in front of each Field\n        // see https://www.digicert.com/kb/ssl-support/openssl-quick-reference-guide.htm\n        const t = this.toStringForOPCUA();\n        return t ? \"/\" + t : t;\n    }\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\n\n// tslint:disable: no-console\n\n// Now that we got a hash of the original certificate,\n// we need to verify if we can obtain the same hash by using the same hashing function\n// (in this case SHA-384). In order to do that, we need to extract just the body of\n// the signed certificate. Which, in our case, is everything but the signature.\n// The start of the body is always the first digit of the second line of the following command:\nimport { createVerify } from \"crypto\";\n\nimport { Certificate } from \"./common.js\";\nimport { split_der, exploreCertificate } from \"./crypto_explore_certificate.js\";\nimport { toPem } from \"./crypto_utils.js\";\nimport { readAlgorithmIdentifier, readSignatureValueBin, readTag, readStruct } from \"./asn1.js\";\n\nexport function verifyCertificateOrClrSignature(certificateOrCrl: Buffer, parentCertificate: Certificate): boolean {\n    const block_info = readTag(certificateOrCrl, 0);\n    const blocks = readStruct(certificateOrCrl, block_info);\n    const bufferToBeSigned = certificateOrCrl.subarray(block_info.position, blocks[1].position - 2);\n\n    //xx console.log(\"bufferToBeSigned  = \", bufferToBeSigned.length, bufferToBeSigned.toString(\"hex\").substr(0, 50), bufferToBeSigned.toString(\"hex\").substr(-10));\n    const signatureAlgorithm = readAlgorithmIdentifier(certificateOrCrl, blocks[1]);\n    const signatureValue = readSignatureValueBin(certificateOrCrl, blocks[2]);\n\n    const p = split_der(parentCertificate)[0];\n    //xx    const publicKey = extractPublicKeyFromCertificateSync(p);\n    const certPem = toPem(p, \"CERTIFICATE\");\n    const verify = createVerify(signatureAlgorithm.identifier);\n    verify.update(bufferToBeSigned);\n    verify.end();\n    return verify.verify(certPem, signatureValue);\n}\n\nexport function verifyCertificateSignature(certificate: Certificate, parentCertificate: Certificate): boolean {\n    return verifyCertificateOrClrSignature(certificate, parentCertificate);\n}\nexport function verifyCertificateRevocationListSignature(\n    certificateRevocationList: Certificate,\n    parentCertificate: Certificate\n): boolean {\n    return verifyCertificateOrClrSignature(certificateRevocationList, parentCertificate);\n}\n\nexport type _VerifyStatus = \"BadCertificateIssuerUseNotAllowed\" | \"BadCertificateInvalid\" | \"Good\";\nexport async function verifyCertificateChain(certificateChain: Certificate[]): Promise<{ status: _VerifyStatus; reason: string }> {\n    // verify that all the certificate\n    // second certificate must be used for CertificateSign\n\n    for (let index = 1; index < certificateChain.length; index++) {\n        const cert = certificateChain[index - 1];\n        const certParent = certificateChain[index];\n\n        // parent child must have keyCertSign\n        const certParentInfo = exploreCertificate(certParent);\n        const keyUsage = certParentInfo.tbsCertificate.extensions!.keyUsage!;\n\n        // istanbul ignore next\n        if (!keyUsage.keyCertSign) {\n            return {\n                status: \"BadCertificateIssuerUseNotAllowed\",\n                reason: \"One of the certificate in the chain has not keyUsage set for Certificate Signing\",\n            };\n        }\n\n        const parentSignChild = verifyCertificateSignature(cert, certParent);\n        if (!parentSignChild) {\n            return {\n                status: \"BadCertificateInvalid\",\n                reason: \"One of the certificate in the chain is not signing the previous certificate\",\n            };\n        }\n        const certInfo = exploreCertificate(cert);\n\n        // istanbul ignore next\n        if (!certInfo.tbsCertificate.extensions) {\n            return {\n                status: \"BadCertificateInvalid\",\n                reason: \"Cannot find X409 Extension 3 in certificate\",\n            };\n        }\n\n        // istanbul ignore next\n        if (!certParentInfo.tbsCertificate.extensions || !certInfo.tbsCertificate.extensions.authorityKeyIdentifier) {\n            return {\n                status: \"BadCertificateInvalid\",\n                reason: \"Cannot find X409 Extension 3 in certificate (parent)\",\n            };\n        }\n\n        // istanbul ignore next\n        if (\n            certParentInfo.tbsCertificate.extensions.subjectKeyIdentifier !==\n            certInfo.tbsCertificate.extensions.authorityKeyIdentifier.keyIdentifier\n        ) {\n            return {\n                status: \"BadCertificateInvalid\",\n                reason: \"subjectKeyIdentifier authorityKeyIdentifier in child certificate do not match subjectKeyIdentifier of parent certificate\",\n            };\n        }\n    }\n    return {\n        status: \"Good\",\n        reason: `certificate chain is valid(length = ${certificateChain.length})`,\n    };\n}\n","import * as x509 from \"@peculiar/x509\";\n\nimport { Crypto as PeculiarWebCrypto } from \"@peculiar/webcrypto\";\nimport nativeCrypto from \"crypto\";\n\nlet doDebug = false;\n\nlet _crypto: PeculiarWebCrypto | undefined;\n\ndeclare const crypto: any;\ndeclare const window: any;\n\nconst ignoreCrypto = process.env.IGNORE_SUBTLE_FROM_CRYPTO;\n\nif (typeof window === \"undefined\") {\n    _crypto = nativeCrypto as any;\n\n    if (!_crypto?.subtle || ignoreCrypto) {\n        _crypto = new PeculiarWebCrypto();\n        doDebug && console.warn(\"using @peculiar/webcrypto\");\n    } else {\n        doDebug && console.warn(\"using nodejs crypto (native)\");\n    }\n    x509.cryptoProvider.set(_crypto);\n} else {\n    // using browser crypto\n    doDebug && console.warn(\"using browser crypto (native)\");\n    _crypto = crypto;\n    x509.cryptoProvider.set(crypto);\n}\n\ninterface CryptoInterface {}\nexport function getCrypto(): PeculiarWebCrypto {\n    return _crypto || crypto || require(\"crypto\");\n}\nexport * as x509 from \"@peculiar/x509\";\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\nimport { x509 } from \"./_crypto.js\";\nimport { getCrypto } from \"./_crypto.js\";\n\nexport async function generateKeyPair(modulusLength: 1024 | 2048 | 3072 | 4096 = 2048): Promise<CryptoKeyPair> {\n    const crypto = getCrypto();\n\n    const alg: RsaHashedKeyGenParams = {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: { name: \"SHA-256\" },\n        publicExponent: new Uint8Array([1, 0, 1]),\n        modulusLength,\n    };\n    const keys = await crypto.subtle.generateKey(alg, true, [\"sign\", \"verify\"]);\n\n    return keys;\n}\n\n/**\n *  generate a pair of private/public keys of length 1024,2048, 3072, or 4096 bits\n */\nexport async function generatePrivateKey(modulusLength: 1024 | 2048 | 3072 | 4096 = 2048): Promise<CryptoKey> {\n    return (await generateKeyPair(modulusLength)).privateKey;\n}\n\n/**\n *  convert  a CryptoKey to a PEM string\n */\nexport async function privateKeyToPEM(privateKey: CryptoKey) {\n    const crypto = getCrypto();\n    const privDer = await crypto.subtle.exportKey(\"pkcs8\", privateKey);\n    const privPem = x509.PemConverter.encode(privDer, \"PRIVATE KEY\");\n    return { privPem, privDer };\n}\n\nexport async function derToPrivateKey(privDer: ArrayBuffer): Promise<CryptoKey> {\n    const crypto = getCrypto();\n\n    return await crypto.subtle.importKey(\n        \"pkcs8\",\n        privDer,\n        {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: { name: \"SHA-256\" },\n        },\n        true,\n        [\n            \"sign\",\n            // \"encrypt\",\n            // \"decrypt\",\n            // \"verify\",\n            //    \"wrapKey\",\n            //    \"unwrapKey\",\n            //    \"deriveKey\",\n            //    \"deriveBits\"\n        ]\n    );\n}\n\nexport async function pemToPrivateKey(pem: string): Promise<CryptoKey> {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    const privDer = x509.PemConverter.decode(pem);\n    return derToPrivateKey(privDer[0]);\n}\n","import { PrivateKey, KeyObject, createPrivateKeyFromNodeJSCrypto } from \"../common.js\";\nimport { getCrypto } from \"./_crypto.js\";\nimport { derToPrivateKey, pemToPrivateKey } from \"./create_key_pair.js\";\n\nconst crypto = getCrypto();\n\nconst doDebug = false;\n\nexport function coercePEMorDerToPrivateKey(privateKeyInDerOrPem: string | Buffer): PrivateKey {\n    if (typeof privateKeyInDerOrPem === \"string\") {\n        const hidden = createPrivateKeyFromNodeJSCrypto(privateKeyInDerOrPem);\n        return { hidden };\n    }\n    //istanbul ignore next\n    throw new Error(\"not implemented\");\n    // return privateKey.hidden;\n}\n\n/**\n *\n * @private\n */\nexport async function _coercePrivateKey(privateKey: any): Promise<KeyObject> {\n    const KeyObject = (crypto as any).KeyObject;\n    if (Buffer.isBuffer(privateKey)) {\n        const privateKey1 = await derToPrivateKey(privateKey as any); //\n        return KeyObject.from(privateKey1);\n    } else if (typeof privateKey === \"string\") {\n        try {\n            // privateKey = privateKey.replace(/RSA PRIVATE KEY-----\\n.*/mg, \"RSA PRIVATE KEY-----\");\n            const privateKey1 = await pemToPrivateKey(privateKey);\n            return KeyObject.from(privateKey1);\n        } catch (err) {\n            doDebug && console.log(privateKey);\n            throw err;\n        }\n    } else if (privateKey instanceof KeyObject) {\n        return privateKey;\n    }\n    throw new Error(\"Invalid privateKey\");\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\nimport { CertificatePurpose } from \"../common.js\";\nimport { x509 } from \"./_crypto.js\";\n\n// key usage of OPCUA Server or OPCUA Client\nconst keyUsageApplication =\n    x509.KeyUsageFlags.keyEncipherment |\n    x509.KeyUsageFlags.nonRepudiation |\n    x509.KeyUsageFlags.dataEncipherment |\n    x509.KeyUsageFlags.keyCertSign |\n    x509.KeyUsageFlags.digitalSignature;\n\n// key usage for CA certificate\nconst keyUsageCA = x509.KeyUsageFlags.keyCertSign | x509.KeyUsageFlags.cRLSign;\n\nexport function getAttributes(purpose: CertificatePurpose): {\n    nsComment: string;\n    basicConstraints: x509.BasicConstraintsExtension;\n    keyUsageExtension: x509.ExtendedKeyUsage[];\n    usages: x509.KeyUsageFlags;\n} {\n    let basicConstraints: x509.BasicConstraintsExtension;\n    let keyUsageExtension: x509.ExtendedKeyUsage[] = [];\n    let usages: x509.KeyUsageFlags;\n    let nsComment: string;\n    let extension: string;\n    switch (purpose) {\n        case CertificatePurpose.ForCertificateAuthority:\n            extension = \"v3_ca\";\n            /**\n                [ v3_ca ]\n                subjectKeyIdentifier        = hash\n                authorityKeyIdentifier      = keyid:always,issuer:always\n                *  basicConstraints            = CA:TRUE\n                * keyUsage                    = critical, cRLSign, keyCertSign\n                * nsComment                   = \"Self-signed Certificate for CA generated by Node-OPCUA Certificate utility\"\n                subjectAltName              = $ENV::ALTNAME\n             */\n            basicConstraints = new x509.BasicConstraintsExtension(true, undefined, false);\n            usages = keyUsageCA;\n            keyUsageExtension = [];\n            nsComment = \"Self-signed certificate for CA generated by Node-OPCUA Certificate utility V2\";\n            break;\n        case CertificatePurpose.ForApplication:\n        case CertificatePurpose.ForUserAuthentication:\n        default:\n            /**\n               [ v3_selfsigned]\n               subjectKeyIdentifier       = hash\n                authorityKeyIdentifier    = keyid,issuer\n                * basicConstraints          = critical, CA:FALSE\n                * keyUsage                  = nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment, keyCertSign\n                * extendedKeyUsage          = clientAuth,serverAuth\n                * nsComment                 = \"Self-signed certificate generated by Node-OPCUA Certificate utility\"\n                subjectAltName            = $ENV::ALTNAME\n             */\n            extension = \"v3_selfsigned\";\n            basicConstraints = new x509.BasicConstraintsExtension(false, undefined, true);\n            usages = keyUsageApplication;\n            keyUsageExtension = [x509.ExtendedKeyUsage.serverAuth, x509.ExtendedKeyUsage.clientAuth];\n            nsComment = \"Self-signed certificate generated by Node-OPCUA Certificate utility V2\";\n            break;\n    }\n    return { nsComment, basicConstraints, keyUsageExtension, usages };\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\nimport { getCrypto } from \"./_crypto.js\";\n\n// https://stackoverflow.com/questions/56807959/generate-public-key-from-private-key-using-webcrypto-api\nexport async function buildPublicKey(privateKey: CryptoKey): Promise<CryptoKey> {\n    const crypto = getCrypto();\n\n    // export private key to JWK\n    const jwk = await crypto.subtle.exportKey(\"jwk\", privateKey);\n\n    // remove private data from JWK\n    delete jwk.d;\n    delete jwk.dp;\n    delete jwk.dq;\n    delete jwk.q;\n    delete jwk.qi;\n    jwk.key_ops = [\n        \"encrypt\",\n        \"sign\",\n        // \"wrapKey\"\n    ];\n\n    // import public key\n    // const publicKey = await crypto.subtle.importKey(\"jwk\", jwk, { name: \"RSA-OAEP\", hash: { name: \"SHA-256\" } }, true, [\n    const publicKey = await crypto.subtle.importKey(\"jwk\", jwk, { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-256\" } }, true, [\n        //   \"encrypt\",\n        //     \"sign\",\n        // \"wrapKey\",\n    ]);\n\n    return publicKey;\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\nimport { Subject } from \"../subject.js\";\nimport { CertificatePurpose } from \"../common.js\";\nimport { getAttributes } from \"./_get_attributes.js\";\nimport { getCrypto, x509 } from \"./_crypto.js\";\nimport { buildPublicKey } from \"./_build_public_key.js\";\n\ninterface CreateCertificateSigningRequestOptions {\n    privateKey: CryptoKey;\n    notBefore?: Date;\n    notAfter?: Date;\n    validity?: number;\n    subject?: string;\n    dns?: string[];\n    ip?: string[];\n    applicationUri?: string;\n    purpose: CertificatePurpose;\n}\nexport async function createCertificateSigningRequest({\n    privateKey,\n    subject,\n    dns,\n    ip,\n    applicationUri,\n    purpose,\n}: CreateCertificateSigningRequestOptions) {\n    const crypto = getCrypto();\n\n    const modulusLength = 2048;\n\n    const alg = {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: { name: \"SHA-256\" },\n        publicExponent: new Uint8Array([1, 0, 1]),\n        modulusLength,\n    };\n\n    const publicKey = await buildPublicKey(privateKey);\n\n    const keys = {\n        privateKey,\n        publicKey,\n    };\n\n    const alternativeNameExtensions: x509.JsonGeneralName[] = [];\n    dns && dns.forEach((d) => alternativeNameExtensions.push({ type: \"dns\", value: d }));\n    ip && ip.forEach((d) => alternativeNameExtensions.push({ type: \"ip\", value: d }));\n    applicationUri && alternativeNameExtensions.push({ type: \"url\", value: applicationUri });\n\n    const { basicConstraints, usages } = getAttributes(purpose);\n\n    const s = new Subject(subject || \"\");\n    const s1 = s.toStringInternal(\", \");\n    const name = s1;\n\n    const csr = await x509.Pkcs10CertificateRequestGenerator.create(\n        {\n            name,\n            keys,\n            signingAlgorithm: alg,\n            extensions: [\n                basicConstraints,\n                new x509.KeyUsagesExtension(usages, true),\n                new x509.SubjectAlternativeNameExtension(alternativeNameExtensions),\n            ],\n        },\n        crypto\n    );\n    return { csr: csr.toString(\"pem\"), der: csr };\n}\n","/*!\n * Copyright (c) 2014, GMO GlobalSign\n * Copyright (c) 2015-2022, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\nimport * as pvtsutils from 'pvtsutils';\nimport * as pvutils from 'pvutils';\n\nfunction assertBigInt() {\r\n    if (typeof BigInt === \"undefined\") {\r\n        throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\r\n    }\r\n}\r\nfunction concat(buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (let i = 0; i < buffers.length; i++) {\r\n        const buffer = buffers[i];\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retView = new Uint8Array(outputLength);\r\n    for (let i = 0; i < buffers.length; i++) {\r\n        const buffer = buffers[i];\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retView.buffer;\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof Uint8Array)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be 'Uint8Array'\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\nclass ViewWriter {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n    write(buf) {\r\n        this.items.push(buf);\r\n    }\r\n    final() {\r\n        return concat(this.items);\r\n    }\r\n}\n\nconst powers2 = [new Uint8Array([1])];\r\nconst digitsString = \"0123456789\";\r\nconst NAME = \"name\";\r\nconst VALUE_HEX_VIEW = \"valueHexView\";\r\nconst IS_HEX_ONLY = \"isHexOnly\";\r\nconst ID_BLOCK = \"idBlock\";\r\nconst TAG_CLASS = \"tagClass\";\r\nconst TAG_NUMBER = \"tagNumber\";\r\nconst IS_CONSTRUCTED = \"isConstructed\";\r\nconst FROM_BER = \"fromBER\";\r\nconst TO_BER = \"toBER\";\r\nconst LOCAL = \"local\";\r\nconst EMPTY_STRING = \"\";\r\nconst EMPTY_BUFFER = new ArrayBuffer(0);\r\nconst EMPTY_VIEW = new Uint8Array(0);\r\nconst END_OF_CONTENT_NAME = \"EndOfContent\";\r\nconst OCTET_STRING_NAME = \"OCTET STRING\";\r\nconst BIT_STRING_NAME = \"BIT STRING\";\n\nfunction HexBlock(BaseClass) {\r\n    var _a;\r\n    return _a = class Some extends BaseClass {\r\n            constructor(...args) {\r\n                var _a;\r\n                super(...args);\r\n                const params = args[0] || {};\r\n                this.isHexOnly = (_a = params.isHexOnly) !== null && _a !== void 0 ? _a : false;\r\n                this.valueHexView = params.valueHex ? pvtsutils.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;\r\n            }\r\n            get valueHex() {\r\n                return this.valueHexView.slice().buffer;\r\n            }\r\n            set valueHex(value) {\r\n                this.valueHexView = new Uint8Array(value);\r\n            }\r\n            fromBER(inputBuffer, inputOffset, inputLength) {\r\n                const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\r\n                if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n                    return -1;\r\n                }\r\n                const endLength = inputOffset + inputLength;\r\n                this.valueHexView = view.subarray(inputOffset, endLength);\r\n                if (!this.valueHexView.length) {\r\n                    this.warnings.push(\"Zero buffer length\");\r\n                    return inputOffset;\r\n                }\r\n                this.blockLength = inputLength;\r\n                return endLength;\r\n            }\r\n            toBER(sizeOnly = false) {\r\n                if (!this.isHexOnly) {\r\n                    this.error = \"Flag 'isHexOnly' is not set, abort\";\r\n                    return EMPTY_BUFFER;\r\n                }\r\n                if (sizeOnly) {\r\n                    return new ArrayBuffer(this.valueHexView.byteLength);\r\n                }\r\n                return (this.valueHexView.byteLength === this.valueHexView.buffer.byteLength)\r\n                    ? this.valueHexView.buffer\r\n                    : this.valueHexView.slice().buffer;\r\n            }\r\n            toJSON() {\r\n                return {\r\n                    ...super.toJSON(),\r\n                    isHexOnly: this.isHexOnly,\r\n                    valueHex: pvtsutils.Convert.ToHex(this.valueHexView),\r\n                };\r\n            }\r\n        },\r\n        _a.NAME = \"hexBlock\",\r\n        _a;\r\n}\n\nclass LocalBaseBlock {\r\n    constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW, } = {}) {\r\n        this.blockLength = blockLength;\r\n        this.error = error;\r\n        this.warnings = warnings;\r\n        this.valueBeforeDecodeView = pvtsutils.BufferSourceConverter.toUint8Array(valueBeforeDecode);\r\n    }\r\n    static blockName() {\r\n        return this.NAME;\r\n    }\r\n    get valueBeforeDecode() {\r\n        return this.valueBeforeDecodeView.slice().buffer;\r\n    }\r\n    set valueBeforeDecode(value) {\r\n        this.valueBeforeDecodeView = new Uint8Array(value);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            blockName: this.constructor.NAME,\r\n            blockLength: this.blockLength,\r\n            error: this.error,\r\n            warnings: this.warnings,\r\n            valueBeforeDecode: pvtsutils.Convert.ToHex(this.valueBeforeDecodeView),\r\n        };\r\n    }\r\n}\r\nLocalBaseBlock.NAME = \"baseBlock\";\n\nclass ValueBlock extends LocalBaseBlock {\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\r\n    }\r\n}\r\nValueBlock.NAME = \"valueBlock\";\n\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\r\n    constructor({ idBlock = {}, } = {}) {\r\n        var _a, _b, _c, _d;\r\n        super();\r\n        if (idBlock) {\r\n            this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;\r\n            this.valueHexView = idBlock.valueHex ? pvtsutils.BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;\r\n            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;\r\n            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;\r\n            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;\r\n        }\r\n        else {\r\n            this.tagClass = -1;\r\n            this.tagNumber = -1;\r\n            this.isConstructed = false;\r\n        }\r\n    }\r\n    toBER(sizeOnly = false) {\r\n        let firstOctet = 0;\r\n        switch (this.tagClass) {\r\n            case 1:\r\n                firstOctet |= 0x00;\r\n                break;\r\n            case 2:\r\n                firstOctet |= 0x40;\r\n                break;\r\n            case 3:\r\n                firstOctet |= 0x80;\r\n                break;\r\n            case 4:\r\n                firstOctet |= 0xC0;\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return EMPTY_BUFFER;\r\n        }\r\n        if (this.isConstructed)\r\n            firstOctet |= 0x20;\r\n        if (this.tagNumber < 31 && !this.isHexOnly) {\r\n            const retView = new Uint8Array(1);\r\n            if (!sizeOnly) {\r\n                let number = this.tagNumber;\r\n                number &= 0x1F;\r\n                firstOctet |= number;\r\n                retView[0] = firstOctet;\r\n            }\r\n            return retView.buffer;\r\n        }\r\n        if (!this.isHexOnly) {\r\n            const encodedBuf = pvutils.utilToBase(this.tagNumber, 7);\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const size = encodedBuf.byteLength;\r\n            const retView = new Uint8Array(size + 1);\r\n            retView[0] = (firstOctet | 0x1F);\r\n            if (!sizeOnly) {\r\n                for (let i = 0; i < (size - 1); i++)\r\n                    retView[i + 1] = encodedView[i] | 0x80;\r\n                retView[size] = encodedView[size - 1];\r\n            }\r\n            return retView.buffer;\r\n        }\r\n        const retView = new Uint8Array(this.valueHexView.byteLength + 1);\r\n        retView[0] = (firstOctet | 0x1F);\r\n        if (!sizeOnly) {\r\n            const curView = this.valueHexView;\r\n            for (let i = 0; i < (curView.length - 1); i++)\r\n                retView[i + 1] = curView[i] | 0x80;\r\n            retView[this.valueHexView.byteLength] = curView[curView.length - 1];\r\n        }\r\n        return retView.buffer;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        if (intBuffer.length === 0) {\r\n            this.error = \"Zero buffer length\";\r\n            return -1;\r\n        }\r\n        const tagClassMask = intBuffer[0] & 0xC0;\r\n        switch (tagClassMask) {\r\n            case 0x00:\r\n                this.tagClass = (1);\r\n                break;\r\n            case 0x40:\r\n                this.tagClass = (2);\r\n                break;\r\n            case 0x80:\r\n                this.tagClass = (3);\r\n                break;\r\n            case 0xC0:\r\n                this.tagClass = (4);\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return -1;\r\n        }\r\n        this.isConstructed = (intBuffer[0] & 0x20) === 0x20;\r\n        this.isHexOnly = false;\r\n        const tagNumberMask = intBuffer[0] & 0x1F;\r\n        if (tagNumberMask !== 0x1F) {\r\n            this.tagNumber = (tagNumberMask);\r\n            this.blockLength = 1;\r\n        }\r\n        else {\r\n            let count = 1;\r\n            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);\r\n            let tagNumberBufferMaxLength = 255;\r\n            while (intBuffer[count] & 0x80) {\r\n                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n                count++;\r\n                if (count >= intBuffer.length) {\r\n                    this.error = \"End of input reached before message was fully decoded\";\r\n                    return -1;\r\n                }\r\n                if (count === tagNumberBufferMaxLength) {\r\n                    tagNumberBufferMaxLength += 255;\r\n                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);\r\n                    for (let i = 0; i < intTagNumberBuffer.length; i++)\r\n                        tempBufferView[i] = intTagNumberBuffer[i];\r\n                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);\r\n                }\r\n            }\r\n            this.blockLength = (count + 1);\r\n            intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n            const tempBufferView = new Uint8Array(count);\r\n            for (let i = 0; i < count; i++)\r\n                tempBufferView[i] = intTagNumberBuffer[i];\r\n            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);\r\n            intTagNumberBuffer.set(tempBufferView);\r\n            if (this.blockLength <= 9)\r\n                this.tagNumber = pvutils.utilFromBase(intTagNumberBuffer, 7);\r\n            else {\r\n                this.isHexOnly = true;\r\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\r\n            }\r\n        }\r\n        if (((this.tagClass === 1)) &&\r\n            (this.isConstructed)) {\r\n            switch (this.tagNumber) {\r\n                case 1:\r\n                case 2:\r\n                case 5:\r\n                case 6:\r\n                case 9:\r\n                case 13:\r\n                case 14:\r\n                case 23:\r\n                case 24:\r\n                case 31:\r\n                case 32:\r\n                case 33:\r\n                case 34:\r\n                    this.error = \"Constructed encoding used for primitive type\";\r\n                    return -1;\r\n            }\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            tagClass: this.tagClass,\r\n            tagNumber: this.tagNumber,\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalIdentificationBlock.NAME = \"identificationBlock\";\n\nclass LocalLengthBlock extends LocalBaseBlock {\r\n    constructor({ lenBlock = {}, } = {}) {\r\n        var _a, _b, _c;\r\n        super();\r\n        this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;\r\n        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;\r\n        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);\r\n        if (intBuffer.length === 0) {\r\n            this.error = \"Zero buffer length\";\r\n            return -1;\r\n        }\r\n        if (intBuffer[0] === 0xFF) {\r\n            this.error = \"Length block 0xFF is reserved by standard\";\r\n            return -1;\r\n        }\r\n        this.isIndefiniteForm = intBuffer[0] === 0x80;\r\n        if (this.isIndefiniteForm) {\r\n            this.blockLength = 1;\r\n            return (inputOffset + this.blockLength);\r\n        }\r\n        this.longFormUsed = !!(intBuffer[0] & 0x80);\r\n        if (this.longFormUsed === false) {\r\n            this.length = (intBuffer[0]);\r\n            this.blockLength = 1;\r\n            return (inputOffset + this.blockLength);\r\n        }\r\n        const count = intBuffer[0] & 0x7F;\r\n        if (count > 8) {\r\n            this.error = \"Too big integer\";\r\n            return -1;\r\n        }\r\n        if ((count + 1) > intBuffer.length) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        const lenOffset = inputOffset + 1;\r\n        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);\r\n        if (lengthBufferView[count - 1] === 0x00)\r\n            this.warnings.push(\"Needlessly long encoded length\");\r\n        this.length = pvutils.utilFromBase(lengthBufferView, 8);\r\n        if (this.longFormUsed && (this.length <= 127))\r\n            this.warnings.push(\"Unnecessary usage of long length form\");\r\n        this.blockLength = count + 1;\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toBER(sizeOnly = false) {\r\n        let retBuf;\r\n        let retView;\r\n        if (this.length > 127)\r\n            this.longFormUsed = true;\r\n        if (this.isIndefiniteForm) {\r\n            retBuf = new ArrayBuffer(1);\r\n            if (sizeOnly === false) {\r\n                retView = new Uint8Array(retBuf);\r\n                retView[0] = 0x80;\r\n            }\r\n            return retBuf;\r\n        }\r\n        if (this.longFormUsed) {\r\n            const encodedBuf = pvutils.utilToBase(this.length, 8);\r\n            if (encodedBuf.byteLength > 127) {\r\n                this.error = \"Too big length\";\r\n                return (EMPTY_BUFFER);\r\n            }\r\n            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\r\n            if (sizeOnly)\r\n                return retBuf;\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            retView = new Uint8Array(retBuf);\r\n            retView[0] = encodedBuf.byteLength | 0x80;\r\n            for (let i = 0; i < encodedBuf.byteLength; i++)\r\n                retView[i + 1] = encodedView[i];\r\n            return retBuf;\r\n        }\r\n        retBuf = new ArrayBuffer(1);\r\n        if (sizeOnly === false) {\r\n            retView = new Uint8Array(retBuf);\r\n            retView[0] = this.length;\r\n        }\r\n        return retBuf;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            isIndefiniteForm: this.isIndefiniteForm,\r\n            longFormUsed: this.longFormUsed,\r\n            length: this.length,\r\n        };\r\n    }\r\n}\r\nLocalLengthBlock.NAME = \"lengthBlock\";\n\nconst typeStore = {};\n\nclass BaseBlock extends LocalBaseBlock {\r\n    constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {\r\n        super(parameters);\r\n        this.name = name;\r\n        this.optional = optional;\r\n        if (primitiveSchema) {\r\n            this.primitiveSchema = primitiveSchema;\r\n        }\r\n        this.idBlock = new LocalIdentificationBlock(parameters);\r\n        this.lenBlock = new LocalLengthBlock(parameters);\r\n        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const _writer = writer || new ViewWriter();\r\n        if (!writer) {\r\n            prepareIndefiniteForm(this);\r\n        }\r\n        const idBlockBuf = this.idBlock.toBER(sizeOnly);\r\n        _writer.write(idBlockBuf);\r\n        if (this.lenBlock.isIndefiniteForm) {\r\n            _writer.write(new Uint8Array([0x80]).buffer);\r\n            this.valueBlock.toBER(sizeOnly, _writer);\r\n            _writer.write(new ArrayBuffer(2));\r\n        }\r\n        else {\r\n            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);\r\n            this.lenBlock.length = valueBlockBuf.byteLength;\r\n            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\r\n            _writer.write(lenBlockBuf);\r\n            _writer.write(valueBlockBuf);\r\n        }\r\n        if (!writer) {\r\n            return _writer.final();\r\n        }\r\n        return EMPTY_BUFFER;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            idBlock: this.idBlock.toJSON(),\r\n            lenBlock: this.lenBlock.toJSON(),\r\n            valueBlock: this.valueBlock.toJSON(),\r\n            name: this.name,\r\n            optional: this.optional,\r\n        };\r\n        if (this.primitiveSchema)\r\n            object.primitiveSchema = this.primitiveSchema.toJSON();\r\n        return object;\r\n    }\r\n    toString(encoding = \"ascii\") {\r\n        if (encoding === \"ascii\") {\r\n            return this.onAsciiEncoding();\r\n        }\r\n        return pvtsutils.Convert.ToHex(this.toBER());\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${pvtsutils.Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;\r\n    }\r\n    isEqual(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (!(other instanceof this.constructor)) {\r\n            return false;\r\n        }\r\n        const thisRaw = this.toBER();\r\n        const otherRaw = other.toBER();\r\n        return pvutils.isEqualBuffer(thisRaw, otherRaw);\r\n    }\r\n}\r\nBaseBlock.NAME = \"BaseBlock\";\r\nfunction prepareIndefiniteForm(baseBlock) {\r\n    if (baseBlock instanceof typeStore.Constructed) {\r\n        for (const value of baseBlock.valueBlock.value) {\r\n            if (prepareIndefiniteForm(value)) {\r\n                baseBlock.lenBlock.isIndefiniteForm = true;\r\n            }\r\n        }\r\n    }\r\n    return !!baseBlock.lenBlock.isIndefiniteForm;\r\n}\n\nclass BaseStringBlock extends BaseBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType) {\r\n        super(parameters, stringValueBlockType);\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.value;\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.value = value;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        this.fromBuffer(this.valueBlock.valueHexView);\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;\r\n    }\r\n}\r\nBaseStringBlock.NAME = \"BaseStringBlock\";\n\nclass LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ isHexOnly = true, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isHexOnly = isHexOnly;\r\n    }\r\n}\r\nLocalPrimitiveValueBlock.NAME = \"PrimitiveValueBlock\";\n\nvar _a$w;\r\nclass Primitive extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalPrimitiveValueBlock);\r\n        this.idBlock.isConstructed = false;\r\n    }\r\n}\r\n_a$w = Primitive;\r\n(() => {\r\n    typeStore.Primitive = _a$w;\r\n})();\r\nPrimitive.NAME = \"PRIMITIVE\";\n\nfunction localChangeType(inputObject, newType) {\r\n    if (inputObject instanceof newType) {\r\n        return inputObject;\r\n    }\r\n    const newObject = new newType();\r\n    newObject.idBlock = inputObject.idBlock;\r\n    newObject.lenBlock = inputObject.lenBlock;\r\n    newObject.warnings = inputObject.warnings;\r\n    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;\r\n    return newObject;\r\n}\r\nfunction localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {\r\n    const incomingOffset = inputOffset;\r\n    let returnObject = new BaseBlock({}, ValueBlock);\r\n    const baseBlock = new LocalBaseBlock();\r\n    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {\r\n        returnObject.error = baseBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);\r\n    if (!intBuffer.length) {\r\n        returnObject.error = \"Zero buffer length\";\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n    if (returnObject.idBlock.warnings.length) {\r\n        returnObject.warnings.concat(returnObject.idBlock.warnings);\r\n    }\r\n    if (resultOffset === -1) {\r\n        returnObject.error = returnObject.idBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    inputOffset = resultOffset;\r\n    inputLength -= returnObject.idBlock.blockLength;\r\n    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n    if (returnObject.lenBlock.warnings.length) {\r\n        returnObject.warnings.concat(returnObject.lenBlock.warnings);\r\n    }\r\n    if (resultOffset === -1) {\r\n        returnObject.error = returnObject.lenBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    inputOffset = resultOffset;\r\n    inputLength -= returnObject.lenBlock.blockLength;\r\n    if (!returnObject.idBlock.isConstructed &&\r\n        returnObject.lenBlock.isIndefiniteForm) {\r\n        returnObject.error = \"Indefinite length form used for primitive encoding form\";\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    let newASN1Type = BaseBlock;\r\n    switch (returnObject.idBlock.tagClass) {\r\n        case 1:\r\n            if ((returnObject.idBlock.tagNumber >= 37) &&\r\n                (returnObject.idBlock.isHexOnly === false)) {\r\n                returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\r\n                return {\r\n                    offset: -1,\r\n                    result: returnObject\r\n                };\r\n            }\r\n            switch (returnObject.idBlock.tagNumber) {\r\n                case 0:\r\n                    if ((returnObject.idBlock.isConstructed) &&\r\n                        (returnObject.lenBlock.length > 0)) {\r\n                        returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\r\n                        return {\r\n                            offset: -1,\r\n                            result: returnObject\r\n                        };\r\n                    }\r\n                    newASN1Type = typeStore.EndOfContent;\r\n                    break;\r\n                case 1:\r\n                    newASN1Type = typeStore.Boolean;\r\n                    break;\r\n                case 2:\r\n                    newASN1Type = typeStore.Integer;\r\n                    break;\r\n                case 3:\r\n                    newASN1Type = typeStore.BitString;\r\n                    break;\r\n                case 4:\r\n                    newASN1Type = typeStore.OctetString;\r\n                    break;\r\n                case 5:\r\n                    newASN1Type = typeStore.Null;\r\n                    break;\r\n                case 6:\r\n                    newASN1Type = typeStore.ObjectIdentifier;\r\n                    break;\r\n                case 10:\r\n                    newASN1Type = typeStore.Enumerated;\r\n                    break;\r\n                case 12:\r\n                    newASN1Type = typeStore.Utf8String;\r\n                    break;\r\n                case 13:\r\n                    newASN1Type = typeStore.RelativeObjectIdentifier;\r\n                    break;\r\n                case 14:\r\n                    newASN1Type = typeStore.TIME;\r\n                    break;\r\n                case 15:\r\n                    returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\r\n                    return {\r\n                        offset: -1,\r\n                        result: returnObject\r\n                    };\r\n                case 16:\r\n                    newASN1Type = typeStore.Sequence;\r\n                    break;\r\n                case 17:\r\n                    newASN1Type = typeStore.Set;\r\n                    break;\r\n                case 18:\r\n                    newASN1Type = typeStore.NumericString;\r\n                    break;\r\n                case 19:\r\n                    newASN1Type = typeStore.PrintableString;\r\n                    break;\r\n                case 20:\r\n                    newASN1Type = typeStore.TeletexString;\r\n                    break;\r\n                case 21:\r\n                    newASN1Type = typeStore.VideotexString;\r\n                    break;\r\n                case 22:\r\n                    newASN1Type = typeStore.IA5String;\r\n                    break;\r\n                case 23:\r\n                    newASN1Type = typeStore.UTCTime;\r\n                    break;\r\n                case 24:\r\n                    newASN1Type = typeStore.GeneralizedTime;\r\n                    break;\r\n                case 25:\r\n                    newASN1Type = typeStore.GraphicString;\r\n                    break;\r\n                case 26:\r\n                    newASN1Type = typeStore.VisibleString;\r\n                    break;\r\n                case 27:\r\n                    newASN1Type = typeStore.GeneralString;\r\n                    break;\r\n                case 28:\r\n                    newASN1Type = typeStore.UniversalString;\r\n                    break;\r\n                case 29:\r\n                    newASN1Type = typeStore.CharacterString;\r\n                    break;\r\n                case 30:\r\n                    newASN1Type = typeStore.BmpString;\r\n                    break;\r\n                case 31:\r\n                    newASN1Type = typeStore.DATE;\r\n                    break;\r\n                case 32:\r\n                    newASN1Type = typeStore.TimeOfDay;\r\n                    break;\r\n                case 33:\r\n                    newASN1Type = typeStore.DateTime;\r\n                    break;\r\n                case 34:\r\n                    newASN1Type = typeStore.Duration;\r\n                    break;\r\n                default: {\r\n                    const newObject = returnObject.idBlock.isConstructed\r\n                        ? new typeStore.Constructed()\r\n                        : new typeStore.Primitive();\r\n                    newObject.idBlock = returnObject.idBlock;\r\n                    newObject.lenBlock = returnObject.lenBlock;\r\n                    newObject.warnings = returnObject.warnings;\r\n                    returnObject = newObject;\r\n                }\r\n            }\r\n            break;\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n        default: {\r\n            newASN1Type = returnObject.idBlock.isConstructed\r\n                ? typeStore.Constructed\r\n                : typeStore.Primitive;\r\n        }\r\n    }\r\n    returnObject = localChangeType(returnObject, newASN1Type);\r\n    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);\r\n    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);\r\n    return {\r\n        offset: resultOffset,\r\n        result: returnObject\r\n    };\r\n}\r\nfunction fromBER(inputBuffer) {\r\n    if (!inputBuffer.byteLength) {\r\n        const result = new BaseBlock({}, ValueBlock);\r\n        result.error = \"Input buffer has zero length\";\r\n        return {\r\n            offset: -1,\r\n            result\r\n        };\r\n    }\r\n    return localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);\r\n}\n\nfunction checkLen(indefiniteLength, length) {\r\n    if (indefiniteLength) {\r\n        return 1;\r\n    }\r\n    return length;\r\n}\r\nclass LocalConstructedValueBlock extends ValueBlock {\r\n    constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n        this.isIndefiniteForm = isIndefiniteForm;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);\r\n        if (this.valueBeforeDecodeView.length === 0) {\r\n            this.warnings.push(\"Zero buffer length\");\r\n            return inputOffset;\r\n        }\r\n        let currentOffset = inputOffset;\r\n        while (checkLen(this.isIndefiniteForm, inputLength) > 0) {\r\n            const returnObject = localFromBER(view, currentOffset, inputLength);\r\n            if (returnObject.offset === -1) {\r\n                this.error = returnObject.result.error;\r\n                this.warnings.concat(returnObject.result.warnings);\r\n                return -1;\r\n            }\r\n            currentOffset = returnObject.offset;\r\n            this.blockLength += returnObject.result.blockLength;\r\n            inputLength -= returnObject.result.blockLength;\r\n            this.value.push(returnObject.result);\r\n            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {\r\n                break;\r\n            }\r\n        }\r\n        if (this.isIndefiniteForm) {\r\n            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {\r\n                this.value.pop();\r\n            }\r\n            else {\r\n                this.warnings.push(\"No EndOfContent block encoded\");\r\n            }\r\n        }\r\n        return currentOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const _writer = writer || new ViewWriter();\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            this.value[i].toBER(sizeOnly, _writer);\r\n        }\r\n        if (!writer) {\r\n            return _writer.final();\r\n        }\r\n        return EMPTY_BUFFER;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            isIndefiniteForm: this.isIndefiniteForm,\r\n            value: [],\r\n        };\r\n        for (const value of this.value) {\r\n            object.value.push(value.toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nLocalConstructedValueBlock.NAME = \"ConstructedValueBlock\";\n\nvar _a$v;\r\nclass Constructed extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalConstructedValueBlock);\r\n        this.idBlock.isConstructed = true;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    onAsciiEncoding() {\r\n        const values = [];\r\n        for (const value of this.valueBlock.value) {\r\n            values.push(value.toString(\"ascii\").split(\"\\n\").map(o => `  ${o}`).join(\"\\n\"));\r\n        }\r\n        const blockName = this.idBlock.tagClass === 3\r\n            ? `[${this.idBlock.tagNumber}]`\r\n            : this.constructor.NAME;\r\n        return values.length\r\n            ? `${blockName} :\\n${values.join(\"\\n\")}`\r\n            : `${blockName} :`;\r\n    }\r\n}\r\n_a$v = Constructed;\r\n(() => {\r\n    typeStore.Constructed = _a$v;\r\n})();\r\nConstructed.NAME = \"CONSTRUCTED\";\n\nclass LocalEndOfContentValueBlock extends ValueBlock {\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        return inputOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return EMPTY_BUFFER;\r\n    }\r\n}\r\nLocalEndOfContentValueBlock.override = \"EndOfContentValueBlock\";\n\nvar _a$u;\r\nclass EndOfContent extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalEndOfContentValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 0;\r\n    }\r\n}\r\n_a$u = EndOfContent;\r\n(() => {\r\n    typeStore.EndOfContent = _a$u;\r\n})();\r\nEndOfContent.NAME = END_OF_CONTENT_NAME;\n\nvar _a$t;\r\nclass Null extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, ValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 5;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (this.lenBlock.length > 0)\r\n            this.warnings.push(\"Non-zero length of value block for Null type\");\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        this.blockLength += inputLength;\r\n        if ((inputOffset + inputLength) > inputBuffer.byteLength) {\r\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n            return -1;\r\n        }\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const retBuf = new ArrayBuffer(2);\r\n        if (!sizeOnly) {\r\n            const retView = new Uint8Array(retBuf);\r\n            retView[0] = 0x05;\r\n            retView[1] = 0x00;\r\n        }\r\n        if (writer) {\r\n            writer.write(retBuf);\r\n        }\r\n        return retBuf;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME}`;\r\n    }\r\n}\r\n_a$t = Null;\r\n(() => {\r\n    typeStore.Null = _a$t;\r\n})();\r\nNull.NAME = \"NULL\";\n\nclass LocalBooleanValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ value, ...parameters } = {}) {\r\n        super(parameters);\r\n        if (parameters.valueHex) {\r\n            this.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(parameters.valueHex);\r\n        }\r\n        else {\r\n            this.valueHexView = new Uint8Array(1);\r\n        }\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n    get value() {\r\n        for (const octet of this.valueHexView) {\r\n            if (octet > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    set value(value) {\r\n        this.valueHexView[0] = value ? 0xFF : 0x00;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        if (inputLength > 1)\r\n            this.warnings.push(\"Boolean value encoded in more then 1 octet\");\r\n        this.isHexOnly = true;\r\n        pvutils.utilDecodeTC.call(this);\r\n        this.blockLength = inputLength;\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER() {\r\n        return this.valueHexView.slice();\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\nLocalBooleanValueBlock.NAME = \"BooleanValueBlock\";\n\nvar _a$s;\r\nclass Boolean extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalBooleanValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 1;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.value;\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.value = value;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.getValue}`;\r\n    }\r\n}\r\n_a$s = Boolean;\r\n(() => {\r\n    typeStore.Boolean = _a$s;\r\n})();\r\nBoolean.NAME = \"BOOLEAN\";\n\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\r\n    constructor({ isConstructed = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isConstructed = isConstructed;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = 0;\r\n        if (this.isConstructed) {\r\n            this.isHexOnly = false;\r\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n            if (resultOffset === -1)\r\n                return resultOffset;\r\n            for (let i = 0; i < this.value.length; i++) {\r\n                const currentBlockName = this.value[i].constructor.NAME;\r\n                if (currentBlockName === END_OF_CONTENT_NAME) {\r\n                    if (this.isIndefiniteForm)\r\n                        break;\r\n                    else {\r\n                        this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\r\n                        return -1;\r\n                    }\r\n                }\r\n                if (currentBlockName !== OCTET_STRING_NAME) {\r\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\r\n                    return -1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.isHexOnly = true;\r\n            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n            this.blockLength = inputLength;\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        if (this.isConstructed)\r\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\r\n        return sizeOnly\r\n            ? new ArrayBuffer(this.valueHexView.byteLength)\r\n            : this.valueHexView.slice().buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalOctetStringValueBlock.NAME = \"OctetStringValueBlock\";\n\nvar _a$r;\r\nclass OctetString extends BaseBlock {\r\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\r\n        var _b, _c;\r\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\r\n        super({\r\n            idBlock: {\r\n                isConstructed: parameters.isConstructed,\r\n                ...idBlock,\r\n            },\r\n            lenBlock: {\r\n                ...lenBlock,\r\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\r\n            },\r\n            ...parameters,\r\n        }, LocalOctetStringValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 4;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        if (inputLength === 0) {\r\n            if (this.idBlock.error.length === 0)\r\n                this.blockLength += this.idBlock.blockLength;\r\n            if (this.lenBlock.error.length === 0)\r\n                this.blockLength += this.lenBlock.blockLength;\r\n            return inputOffset;\r\n        }\r\n        if (!this.valueBlock.isConstructed) {\r\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\r\n            const buf = view.subarray(inputOffset, inputOffset + inputLength);\r\n            try {\r\n                if (buf.byteLength) {\r\n                    const asn = localFromBER(buf, 0, buf.byteLength);\r\n                    if (asn.offset !== -1 && asn.offset === inputLength) {\r\n                        this.valueBlock.value = [asn.result];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\r\n    }\r\n    onAsciiEncoding() {\r\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\r\n            return Constructed.prototype.onAsciiEncoding.call(this);\r\n        }\r\n        return `${this.constructor.NAME} : ${pvtsutils.Convert.ToHex(this.valueBlock.valueHexView)}`;\r\n    }\r\n    getValue() {\r\n        if (!this.idBlock.isConstructed) {\r\n            return this.valueBlock.valueHexView.slice().buffer;\r\n        }\r\n        const array = [];\r\n        for (const content of this.valueBlock.value) {\r\n            if (content instanceof OctetString) {\r\n                array.push(content.valueBlock.valueHexView);\r\n            }\r\n        }\r\n        return pvtsutils.BufferSourceConverter.concat(array);\r\n    }\r\n}\r\n_a$r = OctetString;\r\n(() => {\r\n    typeStore.OctetString = _a$r;\r\n})();\r\nOctetString.NAME = OCTET_STRING_NAME;\n\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\r\n    constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.unusedBits = unusedBits;\r\n        this.isConstructed = isConstructed;\r\n        this.blockLength = this.valueHexView.byteLength;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (!inputLength) {\r\n            return inputOffset;\r\n        }\r\n        let resultOffset = -1;\r\n        if (this.isConstructed) {\r\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n            if (resultOffset === -1)\r\n                return resultOffset;\r\n            for (const value of this.value) {\r\n                const currentBlockName = value.constructor.NAME;\r\n                if (currentBlockName === END_OF_CONTENT_NAME) {\r\n                    if (this.isIndefiniteForm)\r\n                        break;\r\n                    else {\r\n                        this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\r\n                        return -1;\r\n                    }\r\n                }\r\n                if (currentBlockName !== BIT_STRING_NAME) {\r\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\r\n                    return -1;\r\n                }\r\n                const valueBlock = value.valueBlock;\r\n                if ((this.unusedBits > 0) && (valueBlock.unusedBits > 0)) {\r\n                    this.error = \"Using of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\r\n                    return -1;\r\n                }\r\n                this.unusedBits = valueBlock.unusedBits;\r\n            }\r\n            return resultOffset;\r\n        }\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.unusedBits = intBuffer[0];\r\n        if (this.unusedBits > 7) {\r\n            this.error = \"Unused bits for BitString must be in range 0-7\";\r\n            return -1;\r\n        }\r\n        if (!this.unusedBits) {\r\n            const buf = intBuffer.subarray(1);\r\n            try {\r\n                if (buf.byteLength) {\r\n                    const asn = localFromBER(buf, 0, buf.byteLength);\r\n                    if (asn.offset !== -1 && asn.offset === (inputLength - 1)) {\r\n                        this.value = [asn.result];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        this.valueHexView = intBuffer.subarray(1);\r\n        this.blockLength = intBuffer.length;\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        if (this.isConstructed) {\r\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\r\n        }\r\n        if (sizeOnly) {\r\n            return new ArrayBuffer(this.valueHexView.byteLength + 1);\r\n        }\r\n        if (!this.valueHexView.byteLength) {\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(this.valueHexView.length + 1);\r\n        retView[0] = this.unusedBits;\r\n        retView.set(this.valueHexView, 1);\r\n        return retView.buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            unusedBits: this.unusedBits,\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalBitStringValueBlock.NAME = \"BitStringValueBlock\";\n\nvar _a$q;\r\nclass BitString extends BaseBlock {\r\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\r\n        var _b, _c;\r\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\r\n        super({\r\n            idBlock: {\r\n                isConstructed: parameters.isConstructed,\r\n                ...idBlock,\r\n            },\r\n            lenBlock: {\r\n                ...lenBlock,\r\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\r\n            },\r\n            ...parameters,\r\n        }, LocalBitStringValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 3;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\r\n    }\r\n    onAsciiEncoding() {\r\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\r\n            return Constructed.prototype.onAsciiEncoding.call(this);\r\n        }\r\n        else {\r\n            const bits = [];\r\n            const valueHex = this.valueBlock.valueHexView;\r\n            for (const byte of valueHex) {\r\n                bits.push(byte.toString(2).padStart(8, \"0\"));\r\n            }\r\n            const bitsStr = bits.join(\"\");\r\n            return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;\r\n        }\r\n    }\r\n}\r\n_a$q = BitString;\r\n(() => {\r\n    typeStore.BitString = _a$q;\r\n})();\r\nBitString.NAME = BIT_STRING_NAME;\n\nvar _a$p;\r\nfunction viewAdd(first, second) {\r\n    const c = new Uint8Array([0]);\r\n    const firstView = new Uint8Array(first);\r\n    const secondView = new Uint8Array(second);\r\n    let firstViewCopy = firstView.slice(0);\r\n    const firstViewCopyLength = firstViewCopy.length - 1;\r\n    const secondViewCopy = secondView.slice(0);\r\n    const secondViewCopyLength = secondViewCopy.length - 1;\r\n    let value = 0;\r\n    const max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\r\n    let counter = 0;\r\n    for (let i = max; i >= 0; i--, counter++) {\r\n        switch (true) {\r\n            case (counter < secondViewCopy.length):\r\n                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\r\n                break;\r\n            default:\r\n                value = firstViewCopy[firstViewCopyLength - counter] + c[0];\r\n        }\r\n        c[0] = value / 10;\r\n        switch (true) {\r\n            case (counter >= firstViewCopy.length):\r\n                firstViewCopy = pvutils.utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\r\n                break;\r\n            default:\r\n                firstViewCopy[firstViewCopyLength - counter] = value % 10;\r\n        }\r\n    }\r\n    if (c[0] > 0)\r\n        firstViewCopy = pvutils.utilConcatView(c, firstViewCopy);\r\n    return firstViewCopy;\r\n}\r\nfunction power2(n) {\r\n    if (n >= powers2.length) {\r\n        for (let p = powers2.length; p <= n; p++) {\r\n            const c = new Uint8Array([0]);\r\n            let digits = (powers2[p - 1]).slice(0);\r\n            for (let i = (digits.length - 1); i >= 0; i--) {\r\n                const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\r\n                c[0] = newValue[0] / 10;\r\n                digits[i] = newValue[0] % 10;\r\n            }\r\n            if (c[0] > 0)\r\n                digits = pvutils.utilConcatView(c, digits);\r\n            powers2.push(digits);\r\n        }\r\n    }\r\n    return powers2[n];\r\n}\r\nfunction viewSub(first, second) {\r\n    let b = 0;\r\n    const firstView = new Uint8Array(first);\r\n    const secondView = new Uint8Array(second);\r\n    const firstViewCopy = firstView.slice(0);\r\n    const firstViewCopyLength = firstViewCopy.length - 1;\r\n    const secondViewCopy = secondView.slice(0);\r\n    const secondViewCopyLength = secondViewCopy.length - 1;\r\n    let value;\r\n    let counter = 0;\r\n    for (let i = secondViewCopyLength; i >= 0; i--, counter++) {\r\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\r\n        switch (true) {\r\n            case (value < 0):\r\n                b = 1;\r\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n                break;\r\n            default:\r\n                b = 0;\r\n                firstViewCopy[firstViewCopyLength - counter] = value;\r\n        }\r\n    }\r\n    if (b > 0) {\r\n        for (let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++) {\r\n            value = firstViewCopy[firstViewCopyLength - counter] - b;\r\n            if (value < 0) {\r\n                b = 1;\r\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n            }\r\n            else {\r\n                b = 0;\r\n                firstViewCopy[firstViewCopyLength - counter] = value;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return firstViewCopy.slice();\r\n}\r\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ value, ...parameters } = {}) {\r\n        super(parameters);\r\n        this._valueDec = 0;\r\n        if (parameters.valueHex) {\r\n            this.setValueHex();\r\n        }\r\n        if (value !== undefined) {\r\n            this.valueDec = value;\r\n        }\r\n    }\r\n    setValueHex() {\r\n        if (this.valueHexView.length >= 4) {\r\n            this.warnings.push(\"Too big Integer for decoding, hex only\");\r\n            this.isHexOnly = true;\r\n            this._valueDec = 0;\r\n        }\r\n        else {\r\n            this.isHexOnly = false;\r\n            if (this.valueHexView.length > 0) {\r\n                this._valueDec = pvutils.utilDecodeTC.call(this);\r\n            }\r\n        }\r\n    }\r\n    set valueDec(v) {\r\n        this._valueDec = v;\r\n        this.isHexOnly = false;\r\n        this.valueHexView = new Uint8Array(pvutils.utilEncodeTC(v));\r\n    }\r\n    get valueDec() {\r\n        return this._valueDec;\r\n    }\r\n    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\r\n        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\r\n        if (offset === -1)\r\n            return offset;\r\n        const view = this.valueHexView;\r\n        if ((view[0] === 0x00) && ((view[1] & 0x80) !== 0)) {\r\n            this.valueHexView = view.subarray(1);\r\n        }\r\n        else {\r\n            if (expectedLength !== 0) {\r\n                if (view.length < expectedLength) {\r\n                    if ((expectedLength - view.length) > 1)\r\n                        expectedLength = view.length + 1;\r\n                    this.valueHexView = view.subarray(expectedLength - view.length);\r\n                }\r\n            }\r\n        }\r\n        return offset;\r\n    }\r\n    toDER(sizeOnly = false) {\r\n        const view = this.valueHexView;\r\n        switch (true) {\r\n            case ((view[0] & 0x80) !== 0):\r\n                {\r\n                    const updatedView = new Uint8Array(this.valueHexView.length + 1);\r\n                    updatedView[0] = 0x00;\r\n                    updatedView.set(view, 1);\r\n                    this.valueHexView = updatedView;\r\n                }\r\n                break;\r\n            case ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\r\n                {\r\n                    this.valueHexView = this.valueHexView.subarray(1);\r\n                }\r\n                break;\r\n        }\r\n        return this.toBER(sizeOnly);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n        if (resultOffset === -1) {\r\n            return resultOffset;\r\n        }\r\n        this.setValueHex();\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return sizeOnly\r\n            ? new ArrayBuffer(this.valueHexView.length)\r\n            : this.valueHexView.slice().buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n        };\r\n    }\r\n    toString() {\r\n        const firstBit = (this.valueHexView.length * 8) - 1;\r\n        let digits = new Uint8Array((this.valueHexView.length * 8) / 3);\r\n        let bitNumber = 0;\r\n        let currentByte;\r\n        const asn1View = this.valueHexView;\r\n        let result = \"\";\r\n        let flag = false;\r\n        for (let byteNumber = (asn1View.byteLength - 1); byteNumber >= 0; byteNumber--) {\r\n            currentByte = asn1View[byteNumber];\r\n            for (let i = 0; i < 8; i++) {\r\n                if ((currentByte & 1) === 1) {\r\n                    switch (bitNumber) {\r\n                        case firstBit:\r\n                            digits = viewSub(power2(bitNumber), digits);\r\n                            result = \"-\";\r\n                            break;\r\n                        default:\r\n                            digits = viewAdd(digits, power2(bitNumber));\r\n                    }\r\n                }\r\n                bitNumber++;\r\n                currentByte >>= 1;\r\n            }\r\n        }\r\n        for (let i = 0; i < digits.length; i++) {\r\n            if (digits[i])\r\n                flag = true;\r\n            if (flag)\r\n                result += digitsString.charAt(digits[i]);\r\n        }\r\n        if (flag === false)\r\n            result += digitsString.charAt(0);\r\n        return result;\r\n    }\r\n}\r\n_a$p = LocalIntegerValueBlock;\r\nLocalIntegerValueBlock.NAME = \"IntegerValueBlock\";\r\n(() => {\r\n    Object.defineProperty(_a$p.prototype, \"valueHex\", {\r\n        set: function (v) {\r\n            this.valueHexView = new Uint8Array(v);\r\n            this.setValueHex();\r\n        },\r\n        get: function () {\r\n            return this.valueHexView.slice().buffer;\r\n        },\r\n    });\r\n})();\n\nvar _a$o;\r\nclass Integer extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalIntegerValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 2;\r\n    }\r\n    toBigInt() {\r\n        assertBigInt();\r\n        return BigInt(this.valueBlock.toString());\r\n    }\r\n    static fromBigInt(value) {\r\n        assertBigInt();\r\n        const bigIntValue = BigInt(value);\r\n        const writer = new ViewWriter();\r\n        const hex = bigIntValue.toString(16).replace(/^-/, \"\");\r\n        const view = new Uint8Array(pvtsutils.Convert.FromHex(hex));\r\n        if (bigIntValue < 0) {\r\n            const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));\r\n            first[0] |= 0x80;\r\n            const firstInt = BigInt(`0x${pvtsutils.Convert.ToHex(first)}`);\r\n            const secondInt = firstInt + bigIntValue;\r\n            const second = pvtsutils.BufferSourceConverter.toUint8Array(pvtsutils.Convert.FromHex(secondInt.toString(16)));\r\n            second[0] |= 0x80;\r\n            writer.write(second);\r\n        }\r\n        else {\r\n            if (view[0] & 0x80) {\r\n                writer.write(new Uint8Array([0]));\r\n            }\r\n            writer.write(view);\r\n        }\r\n        const res = new Integer({\r\n            valueHex: writer.final(),\r\n        });\r\n        return res;\r\n    }\r\n    convertToDER() {\r\n        const integer = new Integer({ valueHex: this.valueBlock.valueHexView });\r\n        integer.valueBlock.toDER();\r\n        return integer;\r\n    }\r\n    convertFromDER() {\r\n        return new Integer({\r\n            valueHex: this.valueBlock.valueHexView[0] === 0\r\n                ? this.valueBlock.valueHexView.subarray(1)\r\n                : this.valueBlock.valueHexView,\r\n        });\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;\r\n    }\r\n}\r\n_a$o = Integer;\r\n(() => {\r\n    typeStore.Integer = _a$o;\r\n})();\r\nInteger.NAME = \"INTEGER\";\n\nvar _a$n;\r\nclass Enumerated extends Integer {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 10;\r\n    }\r\n}\r\n_a$n = Enumerated;\r\n(() => {\r\n    typeStore.Enumerated = _a$n;\r\n})();\r\nEnumerated.NAME = \"ENUMERATED\";\n\nclass LocalSidValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.valueDec = valueDec;\r\n        this.isFirstSid = isFirstSid;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (!inputLength) {\r\n            return inputOffset;\r\n        }\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.valueHexView = new Uint8Array(inputLength);\r\n        for (let i = 0; i < inputLength; i++) {\r\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\r\n            this.blockLength++;\r\n            if ((intBuffer[i] & 0x80) === 0x00)\r\n                break;\r\n        }\r\n        const tempView = new Uint8Array(this.blockLength);\r\n        for (let i = 0; i < this.blockLength; i++) {\r\n            tempView[i] = this.valueHexView[i];\r\n        }\r\n        this.valueHexView = tempView;\r\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        if (this.valueHexView[0] === 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n        if (this.blockLength <= 8)\r\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\r\n        else {\r\n            this.isHexOnly = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    set valueBigInt(value) {\r\n        assertBigInt();\r\n        let bits = BigInt(value).toString(2);\r\n        while (bits.length % 7) {\r\n            bits = \"0\" + bits;\r\n        }\r\n        const bytes = new Uint8Array(bits.length / 7);\r\n        for (let i = 0; i < bytes.length; i++) {\r\n            bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\r\n        }\r\n        this.fromBER(bytes.buffer, 0, bytes.length);\r\n    }\r\n    toBER(sizeOnly) {\r\n        if (this.isHexOnly) {\r\n            if (sizeOnly)\r\n                return (new ArrayBuffer(this.valueHexView.byteLength));\r\n            const curView = this.valueHexView;\r\n            const retView = new Uint8Array(this.blockLength);\r\n            for (let i = 0; i < (this.blockLength - 1); i++)\r\n                retView[i] = curView[i] | 0x80;\r\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n            return retView.buffer;\r\n        }\r\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\r\n        if (encodedBuf.byteLength === 0) {\r\n            this.error = \"Error during encoding SID value\";\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(encodedBuf.byteLength);\r\n        if (!sizeOnly) {\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const len = encodedBuf.byteLength - 1;\r\n            for (let i = 0; i < len; i++)\r\n                retView[i] = encodedView[i] | 0x80;\r\n            retView[len] = encodedView[len];\r\n        }\r\n        return retView;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        if (this.isHexOnly)\r\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\r\n        else {\r\n            if (this.isFirstSid) {\r\n                let sidValue = this.valueDec;\r\n                if (this.valueDec <= 39)\r\n                    result = \"0.\";\r\n                else {\r\n                    if (this.valueDec <= 79) {\r\n                        result = \"1.\";\r\n                        sidValue -= 40;\r\n                    }\r\n                    else {\r\n                        result = \"2.\";\r\n                        sidValue -= 80;\r\n                    }\r\n                }\r\n                result += sidValue.toString();\r\n            }\r\n            else\r\n                result = this.valueDec.toString();\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n            isFirstSid: this.isFirstSid,\r\n        };\r\n    }\r\n}\r\nLocalSidValueBlock.NAME = \"sidBlock\";\n\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = [];\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = inputOffset;\r\n        while (inputLength > 0) {\r\n            const sidBlock = new LocalSidValueBlock();\r\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n            if (resultOffset === -1) {\r\n                this.blockLength = 0;\r\n                this.error = sidBlock.error;\r\n                return resultOffset;\r\n            }\r\n            if (this.value.length === 0)\r\n                sidBlock.isFirstSid = true;\r\n            this.blockLength += sidBlock.blockLength;\r\n            inputLength -= sidBlock.blockLength;\r\n            this.value.push(sidBlock);\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        const retBuffers = [];\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            const valueBuf = this.value[i].toBER(sizeOnly);\r\n            if (valueBuf.byteLength === 0) {\r\n                this.error = this.value[i].error;\r\n                return EMPTY_BUFFER;\r\n            }\r\n            retBuffers.push(valueBuf);\r\n        }\r\n        return concat(retBuffers);\r\n    }\r\n    fromString(string) {\r\n        this.value = [];\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let sid = \"\";\r\n        let flag = false;\r\n        do {\r\n            pos2 = string.indexOf(\".\", pos1);\r\n            if (pos2 === -1)\r\n                sid = string.substring(pos1);\r\n            else\r\n                sid = string.substring(pos1, pos2);\r\n            pos1 = pos2 + 1;\r\n            if (flag) {\r\n                const sidBlock = this.value[0];\r\n                let plus = 0;\r\n                switch (sidBlock.valueDec) {\r\n                    case 0:\r\n                        break;\r\n                    case 1:\r\n                        plus = 40;\r\n                        break;\r\n                    case 2:\r\n                        plus = 80;\r\n                        break;\r\n                    default:\r\n                        this.value = [];\r\n                        return;\r\n                }\r\n                const parsedSID = parseInt(sid, 10);\r\n                if (isNaN(parsedSID))\r\n                    return;\r\n                sidBlock.valueDec = parsedSID + plus;\r\n                flag = false;\r\n            }\r\n            else {\r\n                const sidBlock = new LocalSidValueBlock();\r\n                if (sid > Number.MAX_SAFE_INTEGER) {\r\n                    assertBigInt();\r\n                    const sidValue = BigInt(sid);\r\n                    sidBlock.valueBigInt = sidValue;\r\n                }\r\n                else {\r\n                    sidBlock.valueDec = parseInt(sid, 10);\r\n                    if (isNaN(sidBlock.valueDec))\r\n                        return;\r\n                }\r\n                if (!this.value.length) {\r\n                    sidBlock.isFirstSid = true;\r\n                    flag = true;\r\n                }\r\n                this.value.push(sidBlock);\r\n            }\r\n        } while (pos2 !== -1);\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        let isHexOnly = false;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            isHexOnly = this.value[i].isHexOnly;\r\n            let sidStr = this.value[i].toString();\r\n            if (i !== 0)\r\n                result = `${result}.`;\r\n            if (isHexOnly) {\r\n                sidStr = `{${sidStr}}`;\r\n                if (this.value[i].isFirstSid)\r\n                    result = `2.{${sidStr} - 80}`;\r\n                else\r\n                    result += sidStr;\r\n            }\r\n            else\r\n                result += sidStr;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            value: this.toString(),\r\n            sidArray: [],\r\n        };\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            object.sidArray.push(this.value[i].toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nLocalObjectIdentifierValueBlock.NAME = \"ObjectIdentifierValueBlock\";\n\nvar _a$m;\r\nclass ObjectIdentifier extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalObjectIdentifierValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 6;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.toString();\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.fromString(value);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.getValue(),\r\n        };\r\n    }\r\n}\r\n_a$m = ObjectIdentifier;\r\n(() => {\r\n    typeStore.ObjectIdentifier = _a$m;\r\n})();\r\nObjectIdentifier.NAME = \"OBJECT IDENTIFIER\";\n\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\r\n    constructor({ valueDec = 0, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.valueDec = valueDec;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (inputLength === 0)\r\n            return inputOffset;\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength))\r\n            return -1;\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.valueHexView = new Uint8Array(inputLength);\r\n        for (let i = 0; i < inputLength; i++) {\r\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\r\n            this.blockLength++;\r\n            if ((intBuffer[i] & 0x80) === 0x00)\r\n                break;\r\n        }\r\n        const tempView = new Uint8Array(this.blockLength);\r\n        for (let i = 0; i < this.blockLength; i++)\r\n            tempView[i] = this.valueHexView[i];\r\n        this.valueHexView = tempView;\r\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        if (this.valueHexView[0] === 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n        if (this.blockLength <= 8)\r\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\r\n        else {\r\n            this.isHexOnly = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toBER(sizeOnly) {\r\n        if (this.isHexOnly) {\r\n            if (sizeOnly)\r\n                return (new ArrayBuffer(this.valueHexView.byteLength));\r\n            const curView = this.valueHexView;\r\n            const retView = new Uint8Array(this.blockLength);\r\n            for (let i = 0; i < (this.blockLength - 1); i++)\r\n                retView[i] = curView[i] | 0x80;\r\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n            return retView.buffer;\r\n        }\r\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\r\n        if (encodedBuf.byteLength === 0) {\r\n            this.error = \"Error during encoding SID value\";\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(encodedBuf.byteLength);\r\n        if (!sizeOnly) {\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const len = encodedBuf.byteLength - 1;\r\n            for (let i = 0; i < len; i++)\r\n                retView[i] = encodedView[i] | 0x80;\r\n            retView[len] = encodedView[len];\r\n        }\r\n        return retView.buffer;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        if (this.isHexOnly)\r\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\r\n        else {\r\n            result = this.valueDec.toString();\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n        };\r\n    }\r\n}\r\nLocalRelativeSidValueBlock.NAME = \"relativeSidBlock\";\n\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = [];\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = inputOffset;\r\n        while (inputLength > 0) {\r\n            const sidBlock = new LocalRelativeSidValueBlock();\r\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n            if (resultOffset === -1) {\r\n                this.blockLength = 0;\r\n                this.error = sidBlock.error;\r\n                return resultOffset;\r\n            }\r\n            this.blockLength += sidBlock.blockLength;\r\n            inputLength -= sidBlock.blockLength;\r\n            this.value.push(sidBlock);\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const retBuffers = [];\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            const valueBuf = this.value[i].toBER(sizeOnly);\r\n            if (valueBuf.byteLength === 0) {\r\n                this.error = this.value[i].error;\r\n                return EMPTY_BUFFER;\r\n            }\r\n            retBuffers.push(valueBuf);\r\n        }\r\n        return concat(retBuffers);\r\n    }\r\n    fromString(string) {\r\n        this.value = [];\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let sid = \"\";\r\n        do {\r\n            pos2 = string.indexOf(\".\", pos1);\r\n            if (pos2 === -1)\r\n                sid = string.substring(pos1);\r\n            else\r\n                sid = string.substring(pos1, pos2);\r\n            pos1 = pos2 + 1;\r\n            const sidBlock = new LocalRelativeSidValueBlock();\r\n            sidBlock.valueDec = parseInt(sid, 10);\r\n            if (isNaN(sidBlock.valueDec))\r\n                return true;\r\n            this.value.push(sidBlock);\r\n        } while (pos2 !== -1);\r\n        return true;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        let isHexOnly = false;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            isHexOnly = this.value[i].isHexOnly;\r\n            let sidStr = this.value[i].toString();\r\n            if (i !== 0)\r\n                result = `${result}.`;\r\n            if (isHexOnly) {\r\n                sidStr = `{${sidStr}}`;\r\n                result += sidStr;\r\n            }\r\n            else\r\n                result += sidStr;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            value: this.toString(),\r\n            sidArray: [],\r\n        };\r\n        for (let i = 0; i < this.value.length; i++)\r\n            object.sidArray.push(this.value[i].toJSON());\r\n        return object;\r\n    }\r\n}\r\nLocalRelativeObjectIdentifierValueBlock.NAME = \"RelativeObjectIdentifierValueBlock\";\n\nvar _a$l;\r\nclass RelativeObjectIdentifier extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalRelativeObjectIdentifierValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 13;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.toString();\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.fromString(value);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.getValue(),\r\n        };\r\n    }\r\n}\r\n_a$l = RelativeObjectIdentifier;\r\n(() => {\r\n    typeStore.RelativeObjectIdentifier = _a$l;\r\n})();\r\nRelativeObjectIdentifier.NAME = \"RelativeObjectIdentifier\";\n\nvar _a$k;\r\nclass Sequence extends Constructed {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 16;\r\n    }\r\n}\r\n_a$k = Sequence;\r\n(() => {\r\n    typeStore.Sequence = _a$k;\r\n})();\r\nSequence.NAME = \"SEQUENCE\";\n\nvar _a$j;\r\nclass Set extends Constructed {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 17;\r\n    }\r\n}\r\n_a$j = Set;\r\n(() => {\r\n    typeStore.Set = _a$j;\r\n})();\r\nSet.NAME = \"SET\";\n\nclass LocalStringValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isHexOnly = true;\r\n        this.value = EMPTY_STRING;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\nLocalStringValueBlock.NAME = \"StringValueBlock\";\n\nclass LocalSimpleStringValueBlock extends LocalStringValueBlock {\r\n}\r\nLocalSimpleStringValueBlock.NAME = \"SimpleStringValueBlock\";\n\nclass LocalSimpleStringBlock extends BaseStringBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters, LocalSimpleStringValueBlock);\r\n    }\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\r\n    }\r\n    fromString(inputString) {\r\n        const strLen = inputString.length;\r\n        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);\r\n        for (let i = 0; i < strLen; i++)\r\n            view[i] = inputString.charCodeAt(i);\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalSimpleStringBlock.NAME = \"SIMPLE STRING\";\n\nclass LocalUtf8StringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        try {\r\n            this.valueBlock.value = pvtsutils.Convert.ToUtf8String(inputBuffer);\r\n        }\r\n        catch (ex) {\r\n            this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\r\n            this.valueBlock.value = pvtsutils.Convert.ToBinary(inputBuffer);\r\n        }\r\n    }\r\n    fromString(inputString) {\r\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf8String(inputString));\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalUtf8StringValueBlock.NAME = \"Utf8StringValueBlock\";\n\nvar _a$i;\r\nclass Utf8String extends LocalUtf8StringValueBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 12;\r\n    }\r\n}\r\n_a$i = Utf8String;\r\n(() => {\r\n    typeStore.Utf8String = _a$i;\r\n})();\r\nUtf8String.NAME = \"UTF8String\";\n\nclass LocalBmpStringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.value = pvtsutils.Convert.ToUtf16String(inputBuffer);\r\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n    }\r\n    fromString(inputString) {\r\n        this.valueBlock.value = inputString;\r\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf16String(inputString));\r\n    }\r\n}\r\nLocalBmpStringValueBlock.NAME = \"BmpStringValueBlock\";\n\nvar _a$h;\r\nclass BmpString extends LocalBmpStringValueBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 30;\r\n    }\r\n}\r\n_a$h = BmpString;\r\n(() => {\r\n    typeStore.BmpString = _a$h;\r\n})();\r\nBmpString.NAME = \"BMPString\";\n\nclass LocalUniversalStringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);\r\n        const valueView = new Uint8Array(copyBuffer);\r\n        for (let i = 0; i < valueView.length; i += 4) {\r\n            valueView[i] = valueView[i + 3];\r\n            valueView[i + 1] = valueView[i + 2];\r\n            valueView[i + 2] = 0x00;\r\n            valueView[i + 3] = 0x00;\r\n        }\r\n        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\r\n    }\r\n    fromString(inputString) {\r\n        const strLength = inputString.length;\r\n        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);\r\n        for (let i = 0; i < strLength; i++) {\r\n            const codeBuf = pvutils.utilToBase(inputString.charCodeAt(i), 8);\r\n            const codeView = new Uint8Array(codeBuf);\r\n            if (codeView.length > 4)\r\n                continue;\r\n            const dif = 4 - codeView.length;\r\n            for (let j = (codeView.length - 1); j >= 0; j--)\r\n                valueHexView[i * 4 + j + dif] = codeView[j];\r\n        }\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalUniversalStringValueBlock.NAME = \"UniversalStringValueBlock\";\n\nvar _a$g;\r\nclass UniversalString extends LocalUniversalStringValueBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 28;\r\n    }\r\n}\r\n_a$g = UniversalString;\r\n(() => {\r\n    typeStore.UniversalString = _a$g;\r\n})();\r\nUniversalString.NAME = \"UniversalString\";\n\nvar _a$f;\r\nclass NumericString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 18;\r\n    }\r\n}\r\n_a$f = NumericString;\r\n(() => {\r\n    typeStore.NumericString = _a$f;\r\n})();\r\nNumericString.NAME = \"NumericString\";\n\nvar _a$e;\r\nclass PrintableString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 19;\r\n    }\r\n}\r\n_a$e = PrintableString;\r\n(() => {\r\n    typeStore.PrintableString = _a$e;\r\n})();\r\nPrintableString.NAME = \"PrintableString\";\n\nvar _a$d;\r\nclass TeletexString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 20;\r\n    }\r\n}\r\n_a$d = TeletexString;\r\n(() => {\r\n    typeStore.TeletexString = _a$d;\r\n})();\r\nTeletexString.NAME = \"TeletexString\";\n\nvar _a$c;\r\nclass VideotexString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 21;\r\n    }\r\n}\r\n_a$c = VideotexString;\r\n(() => {\r\n    typeStore.VideotexString = _a$c;\r\n})();\r\nVideotexString.NAME = \"VideotexString\";\n\nvar _a$b;\r\nclass IA5String extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 22;\r\n    }\r\n}\r\n_a$b = IA5String;\r\n(() => {\r\n    typeStore.IA5String = _a$b;\r\n})();\r\nIA5String.NAME = \"IA5String\";\n\nvar _a$a;\r\nclass GraphicString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 25;\r\n    }\r\n}\r\n_a$a = GraphicString;\r\n(() => {\r\n    typeStore.GraphicString = _a$a;\r\n})();\r\nGraphicString.NAME = \"GraphicString\";\n\nvar _a$9;\r\nclass VisibleString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 26;\r\n    }\r\n}\r\n_a$9 = VisibleString;\r\n(() => {\r\n    typeStore.VisibleString = _a$9;\r\n})();\r\nVisibleString.NAME = \"VisibleString\";\n\nvar _a$8;\r\nclass GeneralString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 27;\r\n    }\r\n}\r\n_a$8 = GeneralString;\r\n(() => {\r\n    typeStore.GeneralString = _a$8;\r\n})();\r\nGeneralString.NAME = \"GeneralString\";\n\nvar _a$7;\r\nclass CharacterString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 29;\r\n    }\r\n}\r\n_a$7 = CharacterString;\r\n(() => {\r\n    typeStore.CharacterString = _a$7;\r\n})();\r\nCharacterString.NAME = \"CharacterString\";\n\nvar _a$6;\r\nclass UTCTime extends VisibleString {\r\n    constructor({ value, valueDate, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.year = 0;\r\n        this.month = 0;\r\n        this.day = 0;\r\n        this.hour = 0;\r\n        this.minute = 0;\r\n        this.second = 0;\r\n        if (value) {\r\n            this.fromString(value);\r\n            this.valueBlock.valueHexView = new Uint8Array(value.length);\r\n            for (let i = 0; i < value.length; i++)\r\n                this.valueBlock.valueHexView[i] = value.charCodeAt(i);\r\n        }\r\n        if (valueDate) {\r\n            this.fromDate(valueDate);\r\n            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());\r\n        }\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 23;\r\n    }\r\n    fromBuffer(inputBuffer) {\r\n        this.fromString(String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer)));\r\n    }\r\n    toBuffer() {\r\n        const str = this.toString();\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new Uint8Array(buffer);\r\n        for (let i = 0; i < str.length; i++)\r\n            view[i] = str.charCodeAt(i);\r\n        return buffer;\r\n    }\r\n    fromDate(inputDate) {\r\n        this.year = inputDate.getUTCFullYear();\r\n        this.month = inputDate.getUTCMonth() + 1;\r\n        this.day = inputDate.getUTCDate();\r\n        this.hour = inputDate.getUTCHours();\r\n        this.minute = inputDate.getUTCMinutes();\r\n        this.second = inputDate.getUTCSeconds();\r\n    }\r\n    toDate() {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\r\n    }\r\n    fromString(inputString) {\r\n        const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\r\n        const parserArray = parser.exec(inputString);\r\n        if (parserArray === null) {\r\n            this.error = \"Wrong input string for conversion\";\r\n            return;\r\n        }\r\n        const year = parseInt(parserArray[1], 10);\r\n        if (year >= 50)\r\n            this.year = 1900 + year;\r\n        else\r\n            this.year = 2000 + year;\r\n        this.month = parseInt(parserArray[2], 10);\r\n        this.day = parseInt(parserArray[3], 10);\r\n        this.hour = parseInt(parserArray[4], 10);\r\n        this.minute = parseInt(parserArray[5], 10);\r\n        this.second = parseInt(parserArray[6], 10);\r\n    }\r\n    toString(encoding = \"iso\") {\r\n        if (encoding === \"iso\") {\r\n            const outputArray = new Array(7);\r\n            outputArray[0] = pvutils.padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\r\n            outputArray[1] = pvutils.padNumber(this.month, 2);\r\n            outputArray[2] = pvutils.padNumber(this.day, 2);\r\n            outputArray[3] = pvutils.padNumber(this.hour, 2);\r\n            outputArray[4] = pvutils.padNumber(this.minute, 2);\r\n            outputArray[5] = pvutils.padNumber(this.second, 2);\r\n            outputArray[6] = \"Z\";\r\n            return outputArray.join(\"\");\r\n        }\r\n        return super.toString(encoding);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            year: this.year,\r\n            month: this.month,\r\n            day: this.day,\r\n            hour: this.hour,\r\n            minute: this.minute,\r\n            second: this.second,\r\n        };\r\n    }\r\n}\r\n_a$6 = UTCTime;\r\n(() => {\r\n    typeStore.UTCTime = _a$6;\r\n})();\r\nUTCTime.NAME = \"UTCTime\";\n\nvar _a$5;\r\nclass GeneralizedTime extends UTCTime {\r\n    constructor(parameters = {}) {\r\n        var _b;\r\n        super(parameters);\r\n        (_b = this.millisecond) !== null && _b !== void 0 ? _b : (this.millisecond = 0);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 24;\r\n    }\r\n    fromDate(inputDate) {\r\n        super.fromDate(inputDate);\r\n        this.millisecond = inputDate.getUTCMilliseconds();\r\n    }\r\n    toDate() {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\r\n    }\r\n    fromString(inputString) {\r\n        let isUTC = false;\r\n        let timeString = \"\";\r\n        let dateTimeString = \"\";\r\n        let fractionPart = 0;\r\n        let parser;\r\n        let hourDifference = 0;\r\n        let minuteDifference = 0;\r\n        if (inputString[inputString.length - 1] === \"Z\") {\r\n            timeString = inputString.substring(0, inputString.length - 1);\r\n            isUTC = true;\r\n        }\r\n        else {\r\n            const number = new Number(inputString[inputString.length - 1]);\r\n            if (isNaN(number.valueOf()))\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            timeString = inputString;\r\n        }\r\n        if (isUTC) {\r\n            if (timeString.indexOf(\"+\") !== -1)\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            if (timeString.indexOf(\"-\") !== -1)\r\n                throw new Error(\"Wrong input string for conversion\");\r\n        }\r\n        else {\r\n            let multiplier = 1;\r\n            let differencePosition = timeString.indexOf(\"+\");\r\n            let differenceString = \"\";\r\n            if (differencePosition === -1) {\r\n                differencePosition = timeString.indexOf(\"-\");\r\n                multiplier = -1;\r\n            }\r\n            if (differencePosition !== -1) {\r\n                differenceString = timeString.substring(differencePosition + 1);\r\n                timeString = timeString.substring(0, differencePosition);\r\n                if ((differenceString.length !== 2) && (differenceString.length !== 4))\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                let number = parseInt(differenceString.substring(0, 2), 10);\r\n                if (isNaN(number.valueOf()))\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                hourDifference = multiplier * number;\r\n                if (differenceString.length === 4) {\r\n                    number = parseInt(differenceString.substring(2, 4), 10);\r\n                    if (isNaN(number.valueOf()))\r\n                        throw new Error(\"Wrong input string for conversion\");\r\n                    minuteDifference = multiplier * number;\r\n                }\r\n            }\r\n        }\r\n        let fractionPointPosition = timeString.indexOf(\".\");\r\n        if (fractionPointPosition === -1)\r\n            fractionPointPosition = timeString.indexOf(\",\");\r\n        if (fractionPointPosition !== -1) {\r\n            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);\r\n            if (isNaN(fractionPartCheck.valueOf()))\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            fractionPart = fractionPartCheck.valueOf();\r\n            dateTimeString = timeString.substring(0, fractionPointPosition);\r\n        }\r\n        else\r\n            dateTimeString = timeString;\r\n        switch (true) {\r\n            case (dateTimeString.length === 8):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1)\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                break;\r\n            case (dateTimeString.length === 10):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    let fractionResult = 60 * fractionPart;\r\n                    this.minute = Math.floor(fractionResult);\r\n                    fractionResult = 60 * (fractionResult - this.minute);\r\n                    this.second = Math.floor(fractionResult);\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length === 12):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    let fractionResult = 60 * fractionPart;\r\n                    this.second = Math.floor(fractionResult);\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length === 14):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    const fractionResult = 1000 * fractionPart;\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Wrong input string for conversion\");\r\n        }\r\n        const parserArray = parser.exec(dateTimeString);\r\n        if (parserArray === null)\r\n            throw new Error(\"Wrong input string for conversion\");\r\n        for (let j = 1; j < parserArray.length; j++) {\r\n            switch (j) {\r\n                case 1:\r\n                    this.year = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 2:\r\n                    this.month = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 3:\r\n                    this.day = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 4:\r\n                    this.hour = parseInt(parserArray[j], 10) + hourDifference;\r\n                    break;\r\n                case 5:\r\n                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;\r\n                    break;\r\n                case 6:\r\n                    this.second = parseInt(parserArray[j], 10);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n            }\r\n        }\r\n        if (isUTC === false) {\r\n            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n            this.year = tempDate.getUTCFullYear();\r\n            this.month = tempDate.getUTCMonth();\r\n            this.day = tempDate.getUTCDay();\r\n            this.hour = tempDate.getUTCHours();\r\n            this.minute = tempDate.getUTCMinutes();\r\n            this.second = tempDate.getUTCSeconds();\r\n            this.millisecond = tempDate.getUTCMilliseconds();\r\n        }\r\n    }\r\n    toString(encoding = \"iso\") {\r\n        if (encoding === \"iso\") {\r\n            const outputArray = [];\r\n            outputArray.push(pvutils.padNumber(this.year, 4));\r\n            outputArray.push(pvutils.padNumber(this.month, 2));\r\n            outputArray.push(pvutils.padNumber(this.day, 2));\r\n            outputArray.push(pvutils.padNumber(this.hour, 2));\r\n            outputArray.push(pvutils.padNumber(this.minute, 2));\r\n            outputArray.push(pvutils.padNumber(this.second, 2));\r\n            if (this.millisecond !== 0) {\r\n                outputArray.push(\".\");\r\n                outputArray.push(pvutils.padNumber(this.millisecond, 3));\r\n            }\r\n            outputArray.push(\"Z\");\r\n            return outputArray.join(\"\");\r\n        }\r\n        return super.toString(encoding);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            millisecond: this.millisecond,\r\n        };\r\n    }\r\n}\r\n_a$5 = GeneralizedTime;\r\n(() => {\r\n    typeStore.GeneralizedTime = _a$5;\r\n})();\r\nGeneralizedTime.NAME = \"GeneralizedTime\";\n\nvar _a$4;\r\nclass DATE extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 31;\r\n    }\r\n}\r\n_a$4 = DATE;\r\n(() => {\r\n    typeStore.DATE = _a$4;\r\n})();\r\nDATE.NAME = \"DATE\";\n\nvar _a$3;\r\nclass TimeOfDay extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 32;\r\n    }\r\n}\r\n_a$3 = TimeOfDay;\r\n(() => {\r\n    typeStore.TimeOfDay = _a$3;\r\n})();\r\nTimeOfDay.NAME = \"TimeOfDay\";\n\nvar _a$2;\r\nclass DateTime extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 33;\r\n    }\r\n}\r\n_a$2 = DateTime;\r\n(() => {\r\n    typeStore.DateTime = _a$2;\r\n})();\r\nDateTime.NAME = \"DateTime\";\n\nvar _a$1;\r\nclass Duration extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 34;\r\n    }\r\n}\r\n_a$1 = Duration;\r\n(() => {\r\n    typeStore.Duration = _a$1;\r\n})();\r\nDuration.NAME = \"Duration\";\n\nvar _a;\r\nclass TIME extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 14;\r\n    }\r\n}\r\n_a = TIME;\r\n(() => {\r\n    typeStore.TIME = _a;\r\n})();\r\nTIME.NAME = \"TIME\";\n\nclass Any {\r\n    constructor({ name = EMPTY_STRING, optional = false, } = {}) {\r\n        this.name = name;\r\n        this.optional = optional;\r\n    }\r\n}\n\nclass Choice extends Any {\r\n    constructor({ value = [], ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n    }\r\n}\n\nclass Repeated extends Any {\r\n    constructor({ value = new Any(), local = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n        this.local = local;\r\n    }\r\n}\n\nclass RawData {\r\n    constructor({ data = EMPTY_VIEW } = {}) {\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(data);\r\n    }\r\n    get data() {\r\n        return this.dataView.slice().buffer;\r\n    }\r\n    set data(value) {\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(value);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const endLength = inputOffset + inputLength;\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);\r\n        return endLength;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return this.dataView.slice().buffer;\r\n    }\r\n}\n\nfunction compareSchema(root, inputData, inputSchema) {\r\n    if (inputSchema instanceof Choice) {\r\n        for (let j = 0; j < inputSchema.value.length; j++) {\r\n            const result = compareSchema(root, inputData, inputSchema.value[j]);\r\n            if (result.verified) {\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            }\r\n        }\r\n        {\r\n            const _result = {\r\n                verified: false,\r\n                result: {\r\n                    error: \"Wrong values for Choice type\"\r\n                },\r\n            };\r\n            if (inputSchema.hasOwnProperty(NAME))\r\n                _result.name = inputSchema.name;\r\n            return _result;\r\n        }\r\n    }\r\n    if (inputSchema instanceof Any) {\r\n        if (inputSchema.hasOwnProperty(NAME))\r\n            root[inputSchema.name] = inputData;\r\n        return {\r\n            verified: true,\r\n            result: root\r\n        };\r\n    }\r\n    if ((root instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong root object\" }\r\n        };\r\n    }\r\n    if ((inputData instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 data\" }\r\n        };\r\n    }\r\n    if ((inputSchema instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((ID_BLOCK in inputSchema) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((FROM_BER in inputSchema.idBlock) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((TO_BER in inputSchema.idBlock) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    const encodedId = inputSchema.idBlock.toBER(false);\r\n    if (encodedId.byteLength === 0) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Error encoding idBlock for ASN.1 schema\" }\r\n        };\r\n    }\r\n    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\r\n    if (decodedOffset === -1) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Error decoding idBlock for ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isHexOnly) {\r\n        if ((VALUE_HEX_VIEW in inputSchema.idBlock) === false) {\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n        }\r\n        const schemaView = inputSchema.idBlock.valueHexView;\r\n        const asn1View = inputData.idBlock.valueHexView;\r\n        if (schemaView.length !== asn1View.length) {\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        }\r\n        for (let i = 0; i < schemaView.length; i++) {\r\n            if (schemaView[i] !== asn1View[1]) {\r\n                return {\r\n                    verified: false,\r\n                    result: root\r\n                };\r\n            }\r\n        }\r\n    }\r\n    if (inputSchema.name) {\r\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n        if (inputSchema.name)\r\n            root[inputSchema.name] = inputData;\r\n    }\r\n    if (inputSchema instanceof typeStore.Constructed) {\r\n        let admission = 0;\r\n        let result = {\r\n            verified: false,\r\n            result: {\r\n                error: \"Unknown error\",\r\n            }\r\n        };\r\n        let maxLength = inputSchema.valueBlock.value.length;\r\n        if (maxLength > 0) {\r\n            if (inputSchema.valueBlock.value[0] instanceof Repeated) {\r\n                maxLength = inputData.valueBlock.value.length;\r\n            }\r\n        }\r\n        if (maxLength === 0) {\r\n            return {\r\n                verified: true,\r\n                result: root\r\n            };\r\n        }\r\n        if ((inputData.valueBlock.value.length === 0) &&\r\n            (inputSchema.valueBlock.value.length !== 0)) {\r\n            let _optional = true;\r\n            for (let i = 0; i < inputSchema.valueBlock.value.length; i++)\r\n                _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\r\n            if (_optional) {\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            }\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name)\r\n                    delete root[inputSchema.name];\r\n            }\r\n            root.error = \"Inconsistent object length\";\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        }\r\n        for (let i = 0; i < maxLength; i++) {\r\n            if ((i - admission) >= inputData.valueBlock.value.length) {\r\n                if (inputSchema.valueBlock.value[i].optional === false) {\r\n                    const _result = {\r\n                        verified: false,\r\n                        result: root\r\n                    };\r\n                    root.error = \"Inconsistent length between ASN.1 data and schema\";\r\n                    if (inputSchema.name) {\r\n                        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                        if (inputSchema.name) {\r\n                            delete root[inputSchema.name];\r\n                            _result.name = inputSchema.name;\r\n                        }\r\n                    }\r\n                    return _result;\r\n                }\r\n            }\r\n            else {\r\n                if (inputSchema.valueBlock.value[0] instanceof Repeated) {\r\n                    result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\r\n                    if (result.verified === false) {\r\n                        if (inputSchema.valueBlock.value[0].optional)\r\n                            admission++;\r\n                        else {\r\n                            if (inputSchema.name) {\r\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                                if (inputSchema.name)\r\n                                    delete root[inputSchema.name];\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                    if ((NAME in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0)) {\r\n                        let arrayRoot = {};\r\n                        if ((LOCAL in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local))\r\n                            arrayRoot = inputData;\r\n                        else\r\n                            arrayRoot = root;\r\n                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\r\n                            arrayRoot[inputSchema.valueBlock.value[0].name] = [];\r\n                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\r\n                    }\r\n                }\r\n                else {\r\n                    result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\r\n                    if (result.verified === false) {\r\n                        if (inputSchema.valueBlock.value[i].optional)\r\n                            admission++;\r\n                        else {\r\n                            if (inputSchema.name) {\r\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                                if (inputSchema.name)\r\n                                    delete root[inputSchema.name];\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (result.verified === false) {\r\n            const _result = {\r\n                verified: false,\r\n                result: root\r\n            };\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name) {\r\n                    delete root[inputSchema.name];\r\n                    _result.name = inputSchema.name;\r\n                }\r\n            }\r\n            return _result;\r\n        }\r\n        return {\r\n            verified: true,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.primitiveSchema &&\r\n        (VALUE_HEX_VIEW in inputData.valueBlock)) {\r\n        const asn1 = localFromBER(inputData.valueBlock.valueHexView);\r\n        if (asn1.offset === -1) {\r\n            const _result = {\r\n                verified: false,\r\n                result: asn1.result\r\n            };\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name) {\r\n                    delete root[inputSchema.name];\r\n                    _result.name = inputSchema.name;\r\n                }\r\n            }\r\n            return _result;\r\n        }\r\n        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\r\n    }\r\n    return {\r\n        verified: true,\r\n        result: root\r\n    };\r\n}\r\nfunction verifySchema(inputBuffer, inputSchema) {\r\n    if ((inputSchema instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema type\" }\r\n        };\r\n    }\r\n    const asn1 = localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\r\n    if (asn1.offset === -1) {\r\n        return {\r\n            verified: false,\r\n            result: asn1.result\r\n        };\r\n    }\r\n    return compareSchema(asn1.result, asn1.result, inputSchema);\r\n}\n\nexport { Any, BaseBlock, BaseStringBlock, BitString, BmpString, Boolean, CharacterString, Choice, Constructed, DATE, DateTime, Duration, EndOfContent, Enumerated, GeneralString, GeneralizedTime, GraphicString, HexBlock, IA5String, Integer, Null, NumericString, ObjectIdentifier, OctetString, Primitive, PrintableString, RawData, RelativeObjectIdentifier, Repeated, Sequence, Set, TIME, TeletexString, TimeOfDay, UTCTime, UniversalString, Utf8String, ValueBlock, VideotexString, ViewWriter, VisibleString, compareSchema, fromBER, verifySchema };\n","/*!\n * MIT License\n * \n * Copyright (c) 2017-2022 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\nclass BufferSourceConverter {\n    static isArrayBuffer(data) {\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\n    }\n    static toArrayBuffer(data) {\n        if (this.isArrayBuffer(data)) {\n            return data;\n        }\n        if (data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        return this.toUint8Array(data.buffer)\n            .slice(data.byteOffset, data.byteOffset + data.byteLength)\n            .buffer;\n    }\n    static toUint8Array(data) {\n        return this.toView(data, Uint8Array);\n    }\n    static toView(data, type) {\n        if (data.constructor === type) {\n            return data;\n        }\n        if (this.isArrayBuffer(data)) {\n            return new type(data);\n        }\n        if (this.isArrayBufferView(data)) {\n            return new type(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n    static isBufferSource(data) {\n        return this.isArrayBufferView(data)\n            || this.isArrayBuffer(data);\n    }\n    static isArrayBufferView(data) {\n        return ArrayBuffer.isView(data)\n            || (data && this.isArrayBuffer(data.buffer));\n    }\n    static isEqual(a, b) {\n        const aView = BufferSourceConverter.toUint8Array(a);\n        const bView = BufferSourceConverter.toUint8Array(b);\n        if (aView.length !== bView.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < aView.length; i++) {\n            if (aView[i] !== bView[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static concat(...args) {\n        let buffers;\n        if (Array.isArray(args[0]) && !(args[1] instanceof Function)) {\n            buffers = args[0];\n        }\n        else if (Array.isArray(args[0]) && args[1] instanceof Function) {\n            buffers = args[0];\n        }\n        else {\n            if (args[args.length - 1] instanceof Function) {\n                buffers = args.slice(0, args.length - 1);\n            }\n            else {\n                buffers = args;\n            }\n        }\n        let size = 0;\n        for (const buffer of buffers) {\n            size += buffer.byteLength;\n        }\n        const res = new Uint8Array(size);\n        let offset = 0;\n        for (const buffer of buffers) {\n            const view = this.toUint8Array(buffer);\n            res.set(view, offset);\n            offset += view.length;\n        }\n        if (args[args.length - 1] instanceof Function) {\n            return this.toView(res, args[args.length - 1]);\n        }\n        return res.buffer;\n    }\n}\n\nconst STRING_TYPE = \"string\";\nconst HEX_REGEX = /^[0-9a-f]+$/i;\nconst BASE64_REGEX = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\nconst BASE64URL_REGEX = /^[a-zA-Z0-9-_]+$/;\nclass Utf8Converter {\n    static fromString(text) {\n        const s = unescape(encodeURIComponent(text));\n        const uintArray = new Uint8Array(s.length);\n        for (let i = 0; i < s.length; i++) {\n            uintArray[i] = s.charCodeAt(i);\n        }\n        return uintArray.buffer;\n    }\n    static toString(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let encodedString = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            encodedString += String.fromCharCode(buf[i]);\n        }\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n}\nclass Utf16Converter {\n    static toString(buffer, littleEndian = false) {\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\n        const dataView = new DataView(arrayBuffer);\n        let res = \"\";\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\n            const code = dataView.getUint16(i, littleEndian);\n            res += String.fromCharCode(code);\n        }\n        return res;\n    }\n    static fromString(text, littleEndian = false) {\n        const res = new ArrayBuffer(text.length * 2);\n        const dataView = new DataView(res);\n        for (let i = 0; i < text.length; i++) {\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\n        }\n        return res;\n    }\n}\nclass Convert {\n    static isHex(data) {\n        return typeof data === STRING_TYPE\n            && HEX_REGEX.test(data);\n    }\n    static isBase64(data) {\n        return typeof data === STRING_TYPE\n            && BASE64_REGEX.test(data);\n    }\n    static isBase64Url(data) {\n        return typeof data === STRING_TYPE\n            && BASE64URL_REGEX.test(data);\n    }\n    static ToString(buffer, enc = \"utf8\") {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.ToUtf8String(buf);\n            case \"binary\":\n                return this.ToBinary(buf);\n            case \"hex\":\n                return this.ToHex(buf);\n            case \"base64\":\n                return this.ToBase64(buf);\n            case \"base64url\":\n                return this.ToBase64Url(buf);\n            case \"utf16le\":\n                return Utf16Converter.toString(buf, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buf);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static FromString(str, enc = \"utf8\") {\n        if (!str) {\n            return new ArrayBuffer(0);\n        }\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.FromUtf8String(str);\n            case \"binary\":\n                return this.FromBinary(str);\n            case \"hex\":\n                return this.FromHex(str);\n            case \"base64\":\n                return this.FromBase64(str);\n            case \"base64url\":\n                return this.FromBase64Url(str);\n            case \"utf16le\":\n                return Utf16Converter.fromString(str, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(str);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static ToBase64(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        if (typeof btoa !== \"undefined\") {\n            const binary = this.ToString(buf, \"binary\");\n            return btoa(binary);\n        }\n        else {\n            return Buffer.from(buf).toString(\"base64\");\n        }\n    }\n    static FromBase64(base64) {\n        const formatted = this.formatString(base64);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64(formatted)) {\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\n        }\n        if (typeof atob !== \"undefined\") {\n            return this.FromBinary(atob(formatted));\n        }\n        else {\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\n        }\n    }\n    static FromBase64Url(base64url) {\n        const formatted = this.formatString(base64url);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64Url(formatted)) {\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\n        }\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\n    }\n    static ToBase64Url(data) {\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\n    }\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.FromBinary(text);\n            case \"utf8\":\n                return Utf8Converter.fromString(text);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(text);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.fromString(text, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.ToBinary(buffer);\n            case \"utf8\":\n                return Utf8Converter.toString(buffer);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buffer);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.toString(buffer, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static FromBinary(text) {\n        const stringLength = text.length;\n        const resultView = new Uint8Array(stringLength);\n        for (let i = 0; i < stringLength; i++) {\n            resultView[i] = text.charCodeAt(i);\n        }\n        return resultView.buffer;\n    }\n    static ToBinary(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let res = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            res += String.fromCharCode(buf[i]);\n        }\n        return res;\n    }\n    static ToHex(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let result = \"\";\n        const len = buf.length;\n        for (let i = 0; i < len; i++) {\n            const byte = buf[i];\n            if (byte < 16) {\n                result += \"0\";\n            }\n            result += byte.toString(16);\n        }\n        return result;\n    }\n    static FromHex(hexString) {\n        let formatted = this.formatString(hexString);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isHex(formatted)) {\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\n        }\n        if (formatted.length % 2) {\n            formatted = `0${formatted}`;\n        }\n        const res = new Uint8Array(formatted.length / 2);\n        for (let i = 0; i < formatted.length; i = i + 2) {\n            const c = formatted.slice(i, i + 2);\n            res[i / 2] = parseInt(c, 16);\n        }\n        return res.buffer;\n    }\n    static ToUtf16String(buffer, littleEndian = false) {\n        return Utf16Converter.toString(buffer, littleEndian);\n    }\n    static FromUtf16String(text, littleEndian = false) {\n        return Utf16Converter.fromString(text, littleEndian);\n    }\n    static Base64Padding(base64) {\n        const padCount = 4 - (base64.length % 4);\n        if (padCount < 4) {\n            for (let i = 0; i < padCount; i++) {\n                base64 += \"=\";\n            }\n        }\n        return base64;\n    }\n    static formatString(data) {\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\n    }\n}\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\n    const res = arguments[0];\n    for (let i = 1; i < arguments.length; i++) {\n        const obj = arguments[i];\n        for (const prop in obj) {\n            res[prop] = obj[prop];\n        }\n    }\n    return res;\n}\nfunction combine(...buf) {\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\n    const res = new Uint8Array(totalByteLength);\n    let currentPos = 0;\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\n        for (const item2 of arr) {\n            res[currentPos++] = item2;\n        }\n    });\n    return res.buffer;\n}\nfunction isEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport { BufferSourceConverter, Convert, assign, combine, isEqual };\n","/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\r\n    return new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\nfunction getParametersValue(parameters, name, defaultValue) {\r\n    var _a;\r\n    if ((parameters instanceof Object) === false) {\r\n        return defaultValue;\r\n    }\r\n    return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\r\n}\r\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false) {\r\n    let result = \"\";\r\n    for (const item of (new Uint8Array(inputBuffer, inputOffset, inputLength))) {\r\n        const str = item.toString(16).toUpperCase();\r\n        if (str.length === 1) {\r\n            result += \"0\";\r\n        }\r\n        result += str;\r\n        if (insertSpace) {\r\n            result += \" \";\r\n        }\r\n    }\r\n    return result.trim();\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof ArrayBuffer)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction utilFromBase(inputBuffer, inputBase) {\r\n    let result = 0;\r\n    if (inputBuffer.length === 1) {\r\n        return inputBuffer[0];\r\n    }\r\n    for (let i = (inputBuffer.length - 1); i >= 0; i--) {\r\n        result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n    }\r\n    return result;\r\n}\r\nfunction utilToBase(value, base, reserved = (-1)) {\r\n    const internalReserved = reserved;\r\n    let internalValue = value;\r\n    let result = 0;\r\n    let biggest = Math.pow(2, base);\r\n    for (let i = 1; i < 8; i++) {\r\n        if (value < biggest) {\r\n            let retBuf;\r\n            if (internalReserved < 0) {\r\n                retBuf = new ArrayBuffer(i);\r\n                result = i;\r\n            }\r\n            else {\r\n                if (internalReserved < i) {\r\n                    return (new ArrayBuffer(0));\r\n                }\r\n                retBuf = new ArrayBuffer(internalReserved);\r\n                result = internalReserved;\r\n            }\r\n            const retView = new Uint8Array(retBuf);\r\n            for (let j = (i - 1); j >= 0; j--) {\r\n                const basis = Math.pow(2, j * base);\r\n                retView[result - j - 1] = Math.floor(internalValue / basis);\r\n                internalValue -= (retView[result - j - 1]) * basis;\r\n            }\r\n            return retBuf;\r\n        }\r\n        biggest *= Math.pow(2, base);\r\n    }\r\n    return new ArrayBuffer(0);\r\n}\r\nfunction utilConcatBuf(...buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const buffer of buffers) {\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const buffer of buffers) {\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retBuf;\r\n}\r\nfunction utilConcatView(...views) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const view of views) {\r\n        outputLength += view.length;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const view of views) {\r\n        retView.set(view, prevLength);\r\n        prevLength += view.length;\r\n    }\r\n    return retView;\r\n}\r\nfunction utilDecodeTC() {\r\n    const buf = new Uint8Array(this.valueHex);\r\n    if (this.valueHex.byteLength >= 2) {\r\n        const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n        const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n        if (condition1 || condition2) {\r\n            this.warnings.push(\"Needlessly long format\");\r\n        }\r\n    }\r\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const bigIntView = new Uint8Array(bigIntBuffer);\r\n    for (let i = 0; i < this.valueHex.byteLength; i++) {\r\n        bigIntView[i] = 0;\r\n    }\r\n    bigIntView[0] = (buf[0] & 0x80);\r\n    const bigInt = utilFromBase(bigIntView, 8);\r\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const smallIntView = new Uint8Array(smallIntBuffer);\r\n    for (let j = 0; j < this.valueHex.byteLength; j++) {\r\n        smallIntView[j] = buf[j];\r\n    }\r\n    smallIntView[0] &= 0x7F;\r\n    const smallInt = utilFromBase(smallIntView, 8);\r\n    return (smallInt - bigInt);\r\n}\r\nfunction utilEncodeTC(value) {\r\n    const modValue = (value < 0) ? (value * (-1)) : value;\r\n    let bigInt = 128;\r\n    for (let i = 1; i < 8; i++) {\r\n        if (modValue <= bigInt) {\r\n            if (value < 0) {\r\n                const smallInt = bigInt - modValue;\r\n                const retBuf = utilToBase(smallInt, 8, i);\r\n                const retView = new Uint8Array(retBuf);\r\n                retView[0] |= 0x80;\r\n                return retBuf;\r\n            }\r\n            let retBuf = utilToBase(modValue, 8, i);\r\n            let retView = new Uint8Array(retBuf);\r\n            if (retView[0] & 0x80) {\r\n                const tempBuf = retBuf.slice(0);\r\n                const tempView = new Uint8Array(tempBuf);\r\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n                retView = new Uint8Array(retBuf);\r\n                for (let k = 0; k < tempBuf.byteLength; k++) {\r\n                    retView[k + 1] = tempView[k];\r\n                }\r\n                retView[0] = 0x00;\r\n            }\r\n            return retBuf;\r\n        }\r\n        bigInt *= Math.pow(2, 8);\r\n    }\r\n    return (new ArrayBuffer(0));\r\n}\r\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\r\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\r\n        return false;\r\n    }\r\n    const view1 = new Uint8Array(inputBuffer1);\r\n    const view2 = new Uint8Array(inputBuffer2);\r\n    for (let i = 0; i < view1.length; i++) {\r\n        if (view1[i] !== view2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction padNumber(inputNumber, fullLength) {\r\n    const str = inputNumber.toString(10);\r\n    if (fullLength < str.length) {\r\n        return \"\";\r\n    }\r\n    const dif = fullLength - str.length;\r\n    const padding = new Array(dif);\r\n    for (let i = 0; i < dif; i++) {\r\n        padding[i] = \"0\";\r\n    }\r\n    const paddingString = padding.join(\"\");\r\n    return paddingString.concat(str);\r\n}\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\r\n    let i = 0;\r\n    let flag1 = 0;\r\n    let flag2 = 0;\r\n    let output = \"\";\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    if (skipLeadingZeros) {\r\n        let nonZeroPosition = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            if (input.charCodeAt(i) !== 0) {\r\n                nonZeroPosition = i;\r\n                break;\r\n            }\r\n        }\r\n        input = input.slice(nonZeroPosition);\r\n    }\r\n    while (i < input.length) {\r\n        const chr1 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag1 = 1;\r\n        }\r\n        const chr2 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag2 = 1;\r\n        }\r\n        const chr3 = input.charCodeAt(i++);\r\n        const enc1 = chr1 >> 2;\r\n        const enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n        let enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n        let enc4 = chr3 & 0x3F;\r\n        if (flag1 === 1) {\r\n            enc3 = enc4 = 64;\r\n        }\r\n        else {\r\n            if (flag2 === 1) {\r\n                enc4 = 64;\r\n            }\r\n        }\r\n        if (skipPadding) {\r\n            if (enc3 === 64) {\r\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n            }\r\n            else {\r\n                if (enc4 === 64) {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n                }\r\n                else {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    function indexOf(toSearch) {\r\n        for (let i = 0; i < 64; i++) {\r\n            if (template.charAt(i) === toSearch)\r\n                return i;\r\n        }\r\n        return 64;\r\n    }\r\n    function test(incoming) {\r\n        return ((incoming === 64) ? 0x00 : incoming);\r\n    }\r\n    let i = 0;\r\n    let output = \"\";\r\n    while (i < input.length) {\r\n        const enc1 = indexOf(input.charAt(i++));\r\n        const enc2 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc3 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc4 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n        const chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n        const chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n        output += String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output += String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output += String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    if (cutTailZeros) {\r\n        const outputLength = output.length;\r\n        let nonZeroStart = (-1);\r\n        for (let i = (outputLength - 1); i >= 0; i--) {\r\n            if (output.charCodeAt(i) !== 0) {\r\n                nonZeroStart = i;\r\n                break;\r\n            }\r\n        }\r\n        if (nonZeroStart !== (-1)) {\r\n            output = output.slice(0, nonZeroStart + 1);\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction arrayBufferToString(buffer) {\r\n    let resultString = \"\";\r\n    const view = new Uint8Array(buffer);\r\n    for (const element of view) {\r\n        resultString += String.fromCharCode(element);\r\n    }\r\n    return resultString;\r\n}\r\nfunction stringToArrayBuffer(str) {\r\n    const stringLength = str.length;\r\n    const resultBuffer = new ArrayBuffer(stringLength);\r\n    const resultView = new Uint8Array(resultBuffer);\r\n    for (let i = 0; i < stringLength; i++) {\r\n        resultView[i] = str.charCodeAt(i);\r\n    }\r\n    return resultBuffer;\r\n}\r\nconst log2 = Math.log(2);\r\nfunction nearestPowerOf2(length) {\r\n    const base = (Math.log(length) / log2);\r\n    const floor = Math.floor(base);\r\n    const round = Math.round(base);\r\n    return ((floor === round) ? floor : round);\r\n}\r\nfunction clearProps(object, propsArray) {\r\n    for (const prop of propsArray) {\r\n        delete object[prop];\r\n    }\r\n}\n\nexport { arrayBufferToString, bufferToHexCodes, checkBufferParams, clearProps, fromBase64, getParametersValue, getUTCDate, isEqualBuffer, nearestPowerOf2, padNumber, stringToArrayBuffer, toBase64, utilConcatBuf, utilConcatView, utilDecodeTC, utilEncodeTC, utilFromBase, utilToBase };\n","export var AsnTypeTypes;\n(function (AsnTypeTypes) {\n    AsnTypeTypes[AsnTypeTypes[\"Sequence\"] = 0] = \"Sequence\";\n    AsnTypeTypes[AsnTypeTypes[\"Set\"] = 1] = \"Set\";\n    AsnTypeTypes[AsnTypeTypes[\"Choice\"] = 2] = \"Choice\";\n})(AsnTypeTypes || (AsnTypeTypes = {}));\nexport var AsnPropTypes;\n(function (AsnPropTypes) {\n    AsnPropTypes[AsnPropTypes[\"Any\"] = 1] = \"Any\";\n    AsnPropTypes[AsnPropTypes[\"Boolean\"] = 2] = \"Boolean\";\n    AsnPropTypes[AsnPropTypes[\"OctetString\"] = 3] = \"OctetString\";\n    AsnPropTypes[AsnPropTypes[\"BitString\"] = 4] = \"BitString\";\n    AsnPropTypes[AsnPropTypes[\"Integer\"] = 5] = \"Integer\";\n    AsnPropTypes[AsnPropTypes[\"Enumerated\"] = 6] = \"Enumerated\";\n    AsnPropTypes[AsnPropTypes[\"ObjectIdentifier\"] = 7] = \"ObjectIdentifier\";\n    AsnPropTypes[AsnPropTypes[\"Utf8String\"] = 8] = \"Utf8String\";\n    AsnPropTypes[AsnPropTypes[\"BmpString\"] = 9] = \"BmpString\";\n    AsnPropTypes[AsnPropTypes[\"UniversalString\"] = 10] = \"UniversalString\";\n    AsnPropTypes[AsnPropTypes[\"NumericString\"] = 11] = \"NumericString\";\n    AsnPropTypes[AsnPropTypes[\"PrintableString\"] = 12] = \"PrintableString\";\n    AsnPropTypes[AsnPropTypes[\"TeletexString\"] = 13] = \"TeletexString\";\n    AsnPropTypes[AsnPropTypes[\"VideotexString\"] = 14] = \"VideotexString\";\n    AsnPropTypes[AsnPropTypes[\"IA5String\"] = 15] = \"IA5String\";\n    AsnPropTypes[AsnPropTypes[\"GraphicString\"] = 16] = \"GraphicString\";\n    AsnPropTypes[AsnPropTypes[\"VisibleString\"] = 17] = \"VisibleString\";\n    AsnPropTypes[AsnPropTypes[\"GeneralString\"] = 18] = \"GeneralString\";\n    AsnPropTypes[AsnPropTypes[\"CharacterString\"] = 19] = \"CharacterString\";\n    AsnPropTypes[AsnPropTypes[\"UTCTime\"] = 20] = \"UTCTime\";\n    AsnPropTypes[AsnPropTypes[\"GeneralizedTime\"] = 21] = \"GeneralizedTime\";\n    AsnPropTypes[AsnPropTypes[\"DATE\"] = 22] = \"DATE\";\n    AsnPropTypes[AsnPropTypes[\"TimeOfDay\"] = 23] = \"TimeOfDay\";\n    AsnPropTypes[AsnPropTypes[\"DateTime\"] = 24] = \"DateTime\";\n    AsnPropTypes[AsnPropTypes[\"Duration\"] = 25] = \"Duration\";\n    AsnPropTypes[AsnPropTypes[\"TIME\"] = 26] = \"TIME\";\n    AsnPropTypes[AsnPropTypes[\"Null\"] = 27] = \"Null\";\n})(AsnPropTypes || (AsnPropTypes = {}));\n","import * as asn1js from \"asn1js\";\nimport { AsnPropTypes } from \"./enums\";\nimport { OctetString } from \"./types/index\";\nexport const AsnAnyConverter = {\n    fromASN: (value) => value instanceof asn1js.Null ? null : value.valueBeforeDecodeView,\n    toASN: (value) => {\n        if (value === null) {\n            return new asn1js.Null();\n        }\n        const schema = asn1js.fromBER(value);\n        if (schema.result.error) {\n            throw new Error(schema.result.error);\n        }\n        return schema.result;\n    },\n};\nexport const AsnIntegerConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView.byteLength >= 4\n        ? value.valueBlock.toString()\n        : value.valueBlock.valueDec,\n    toASN: (value) => new asn1js.Integer({ value: +value }),\n};\nexport const AsnEnumeratedConverter = {\n    fromASN: (value) => value.valueBlock.valueDec,\n    toASN: (value) => new asn1js.Enumerated({ value }),\n};\nexport const AsnIntegerArrayBufferConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView,\n    toASN: (value) => new asn1js.Integer({ valueHex: value }),\n};\nexport const AsnIntegerBigIntConverter = {\n    fromASN: (value) => value.toBigInt(),\n    toASN: (value) => asn1js.Integer.fromBigInt(value),\n};\nexport const AsnBitStringConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView,\n    toASN: (value) => new asn1js.BitString({ valueHex: value }),\n};\nexport const AsnObjectIdentifierConverter = {\n    fromASN: (value) => value.valueBlock.toString(),\n    toASN: (value) => new asn1js.ObjectIdentifier({ value }),\n};\nexport const AsnBooleanConverter = {\n    fromASN: (value) => value.valueBlock.value,\n    toASN: (value) => new asn1js.Boolean({ value }),\n};\nexport const AsnOctetStringConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView,\n    toASN: (value) => new asn1js.OctetString({ valueHex: value }),\n};\nexport const AsnConstructedOctetStringConverter = {\n    fromASN: (value) => new OctetString(value.getValue()),\n    toASN: (value) => value.toASN(),\n};\nfunction createStringConverter(Asn1Type) {\n    return {\n        fromASN: (value) => value.valueBlock.value,\n        toASN: (value) => new Asn1Type({ value }),\n    };\n}\nexport const AsnUtf8StringConverter = createStringConverter(asn1js.Utf8String);\nexport const AsnBmpStringConverter = createStringConverter(asn1js.BmpString);\nexport const AsnUniversalStringConverter = createStringConverter(asn1js.UniversalString);\nexport const AsnNumericStringConverter = createStringConverter(asn1js.NumericString);\nexport const AsnPrintableStringConverter = createStringConverter(asn1js.PrintableString);\nexport const AsnTeletexStringConverter = createStringConverter(asn1js.TeletexString);\nexport const AsnVideotexStringConverter = createStringConverter(asn1js.VideotexString);\nexport const AsnIA5StringConverter = createStringConverter(asn1js.IA5String);\nexport const AsnGraphicStringConverter = createStringConverter(asn1js.GraphicString);\nexport const AsnVisibleStringConverter = createStringConverter(asn1js.VisibleString);\nexport const AsnGeneralStringConverter = createStringConverter(asn1js.GeneralString);\nexport const AsnCharacterStringConverter = createStringConverter(asn1js.CharacterString);\nexport const AsnUTCTimeConverter = {\n    fromASN: (value) => value.toDate(),\n    toASN: (value) => new asn1js.UTCTime({ valueDate: value }),\n};\nexport const AsnGeneralizedTimeConverter = {\n    fromASN: (value) => value.toDate(),\n    toASN: (value) => new asn1js.GeneralizedTime({ valueDate: value }),\n};\nexport const AsnNullConverter = {\n    fromASN: () => null,\n    toASN: () => {\n        return new asn1js.Null();\n    },\n};\nexport function defaultConverter(type) {\n    switch (type) {\n        case AsnPropTypes.Any:\n            return AsnAnyConverter;\n        case AsnPropTypes.BitString:\n            return AsnBitStringConverter;\n        case AsnPropTypes.BmpString:\n            return AsnBmpStringConverter;\n        case AsnPropTypes.Boolean:\n            return AsnBooleanConverter;\n        case AsnPropTypes.CharacterString:\n            return AsnCharacterStringConverter;\n        case AsnPropTypes.Enumerated:\n            return AsnEnumeratedConverter;\n        case AsnPropTypes.GeneralString:\n            return AsnGeneralStringConverter;\n        case AsnPropTypes.GeneralizedTime:\n            return AsnGeneralizedTimeConverter;\n        case AsnPropTypes.GraphicString:\n            return AsnGraphicStringConverter;\n        case AsnPropTypes.IA5String:\n            return AsnIA5StringConverter;\n        case AsnPropTypes.Integer:\n            return AsnIntegerConverter;\n        case AsnPropTypes.Null:\n            return AsnNullConverter;\n        case AsnPropTypes.NumericString:\n            return AsnNumericStringConverter;\n        case AsnPropTypes.ObjectIdentifier:\n            return AsnObjectIdentifierConverter;\n        case AsnPropTypes.OctetString:\n            return AsnOctetStringConverter;\n        case AsnPropTypes.PrintableString:\n            return AsnPrintableStringConverter;\n        case AsnPropTypes.TeletexString:\n            return AsnTeletexStringConverter;\n        case AsnPropTypes.UTCTime:\n            return AsnUTCTimeConverter;\n        case AsnPropTypes.UniversalString:\n            return AsnUniversalStringConverter;\n        case AsnPropTypes.Utf8String:\n            return AsnUtf8StringConverter;\n        case AsnPropTypes.VideotexString:\n            return AsnVideotexStringConverter;\n        case AsnPropTypes.VisibleString:\n            return AsnVisibleStringConverter;\n        default:\n            return null;\n    }\n}\n","export function isConvertible(target) {\n    if (typeof target === \"function\" && target.prototype) {\n        if (target.prototype.toASN && target.prototype.fromASN) {\n            return true;\n        }\n        else {\n            return isConvertible(target.prototype);\n        }\n    }\n    else {\n        return !!(target && typeof target === \"object\" && \"toASN\" in target && \"fromASN\" in target);\n    }\n}\nexport function isTypeOfArray(target) {\n    var _a;\n    if (target) {\n        const proto = Object.getPrototypeOf(target);\n        if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {\n            return true;\n        }\n        return isTypeOfArray(proto);\n    }\n    return false;\n}\nexport function isArrayEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","import * as asn1js from \"asn1js\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport { isConvertible } from \"./helper\";\nexport class AsnSchemaStorage {\n    constructor() {\n        this.items = new WeakMap();\n    }\n    has(target) {\n        return this.items.has(target);\n    }\n    get(target, checkSchema = false) {\n        const schema = this.items.get(target);\n        if (!schema) {\n            throw new Error(`Cannot get schema for '${target.prototype.constructor.name}' target`);\n        }\n        if (checkSchema && !schema.schema) {\n            throw new Error(`Schema '${target.prototype.constructor.name}' doesn't contain ASN.1 schema. Call 'AsnSchemaStorage.cache'.`);\n        }\n        return schema;\n    }\n    cache(target) {\n        const schema = this.get(target);\n        if (!schema.schema) {\n            schema.schema = this.create(target, true);\n        }\n    }\n    createDefault(target) {\n        const schema = {\n            type: AsnTypeTypes.Sequence,\n            items: {},\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.items = Object.assign({}, schema.items, parentSchema.items);\n        }\n        return schema;\n    }\n    create(target, useNames) {\n        const schema = this.items.get(target) || this.createDefault(target);\n        const asn1Value = [];\n        for (const key in schema.items) {\n            const item = schema.items[key];\n            const name = useNames ? key : \"\";\n            let asn1Item;\n            if (typeof (item.type) === \"number\") {\n                const Asn1TypeName = AsnPropTypes[item.type];\n                const Asn1Type = asn1js[Asn1TypeName];\n                if (!Asn1Type) {\n                    throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);\n                }\n                asn1Item = new Asn1Type({ name });\n            }\n            else if (isConvertible(item.type)) {\n                const instance = new item.type();\n                asn1Item = instance.toSchema(name);\n            }\n            else if (item.optional) {\n                const itemSchema = this.get(item.type);\n                if (itemSchema.type === AsnTypeTypes.Choice) {\n                    asn1Item = new asn1js.Any({ name });\n                }\n                else {\n                    asn1Item = this.create(item.type, false);\n                    asn1Item.name = name;\n                }\n            }\n            else {\n                asn1Item = new asn1js.Any({ name });\n            }\n            const optional = !!item.optional || item.defaultValue !== undefined;\n            if (item.repeated) {\n                asn1Item.name = \"\";\n                const Container = item.repeated === \"set\"\n                    ? asn1js.Set\n                    : asn1js.Sequence;\n                asn1Item = new Container({\n                    name: \"\",\n                    value: [\n                        new asn1js.Repeated({\n                            name,\n                            value: asn1Item,\n                        }),\n                    ],\n                });\n            }\n            if (item.context !== null && item.context !== undefined) {\n                if (item.implicit) {\n                    if (typeof item.type === \"number\" || isConvertible(item.type)) {\n                        const Container = item.repeated\n                            ? asn1js.Constructed\n                            : asn1js.Primitive;\n                        asn1Value.push(new Container({\n                            name,\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context,\n                            },\n                        }));\n                    }\n                    else {\n                        this.cache(item.type);\n                        const isRepeated = !!item.repeated;\n                        let value = !isRepeated\n                            ? this.get(item.type, true).schema\n                            : asn1Item;\n                        value = \"valueBlock\" in value ? value.valueBlock.value : value.value;\n                        asn1Value.push(new asn1js.Constructed({\n                            name: !isRepeated ? name : \"\",\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context,\n                            },\n                            value: value,\n                        }));\n                    }\n                }\n                else {\n                    asn1Value.push(new asn1js.Constructed({\n                        optional,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: item.context,\n                        },\n                        value: [asn1Item],\n                    }));\n                }\n            }\n            else {\n                asn1Item.optional = optional;\n                asn1Value.push(asn1Item);\n            }\n        }\n        switch (schema.type) {\n            case AsnTypeTypes.Sequence:\n                return new asn1js.Sequence({ value: asn1Value, name: \"\" });\n            case AsnTypeTypes.Set:\n                return new asn1js.Set({ value: asn1Value, name: \"\" });\n            case AsnTypeTypes.Choice:\n                return new asn1js.Choice({ value: asn1Value, name: \"\" });\n            default:\n                throw new Error(`Unsupported ASN1 type in use`);\n        }\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = Object.getPrototypeOf(target);\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\n","import { AsnSchemaStorage } from \"./schema\";\nexport const schemaStorage = new AsnSchemaStorage();\n","export class AsnSchemaValidationError extends Error {\n    constructor() {\n        super(...arguments);\n        this.schemas = [];\n    }\n}\n","import * as asn1js from \"asn1js\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport * as converters from \"./converters\";\nimport { AsnSchemaValidationError } from \"./errors\";\nimport { isConvertible, isTypeOfArray } from \"./helper\";\nimport { schemaStorage } from \"./storage\";\nexport class AsnParser {\n    static parse(data, target) {\n        const asn1Parsed = asn1js.fromBER(data);\n        if (asn1Parsed.result.error) {\n            throw new Error(asn1Parsed.result.error);\n        }\n        const res = this.fromASN(asn1Parsed.result, target);\n        return res;\n    }\n    static fromASN(asn1Schema, target) {\n        var _a;\n        try {\n            if (isConvertible(target)) {\n                const value = new target();\n                return value.fromASN(asn1Schema);\n            }\n            const schema = schemaStorage.get(target);\n            schemaStorage.cache(target);\n            let targetSchema = schema.schema;\n            if (asn1Schema.constructor === asn1js.Constructed && schema.type !== AsnTypeTypes.Choice) {\n                targetSchema = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: asn1Schema.idBlock.tagNumber,\n                    },\n                    value: schema.schema.valueBlock.value,\n                });\n                for (const key in schema.items) {\n                    delete asn1Schema[key];\n                }\n            }\n            const asn1ComparedSchema = asn1js.compareSchema({}, asn1Schema, targetSchema);\n            if (!asn1ComparedSchema.verified) {\n                throw new AsnSchemaValidationError(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);\n            }\n            const res = new target();\n            if (isTypeOfArray(target)) {\n                if (!(\"value\" in asn1Schema.valueBlock && Array.isArray(asn1Schema.valueBlock.value))) {\n                    throw new Error(`Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.`);\n                }\n                const itemType = schema.itemType;\n                if (typeof itemType === \"number\") {\n                    const converter = converters.defaultConverter(itemType);\n                    if (!converter) {\n                        throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                    }\n                    return target.from(asn1Schema.valueBlock.value, (element) => converter.fromASN(element));\n                }\n                else {\n                    return target.from(asn1Schema.valueBlock.value, (element) => this.fromASN(element, itemType));\n                }\n            }\n            for (const key in schema.items) {\n                const asn1SchemaValue = asn1ComparedSchema.result[key];\n                if (!asn1SchemaValue) {\n                    continue;\n                }\n                const schemaItem = schema.items[key];\n                const schemaItemType = schemaItem.type;\n                if (typeof schemaItemType === \"number\" || isConvertible(schemaItemType)) {\n                    const converter = (_a = schemaItem.converter) !== null && _a !== void 0 ? _a : (isConvertible(schemaItemType)\n                        ? new schemaItemType()\n                        : null);\n                    if (!converter) {\n                        throw new Error(\"Converter is empty\");\n                    }\n                    if (schemaItem.repeated) {\n                        if (schemaItem.implicit) {\n                            const Container = schemaItem.repeated === \"sequence\"\n                                ? asn1js.Sequence\n                                : asn1js.Set;\n                            const newItem = new Container();\n                            newItem.valueBlock = asn1SchemaValue.valueBlock;\n                            const newItemAsn = asn1js.fromBER(newItem.toBER(false));\n                            if (newItemAsn.offset === -1) {\n                                throw new Error(`Cannot parse the child item. ${newItemAsn.result.error}`);\n                            }\n                            if (!(\"value\" in newItemAsn.result.valueBlock && Array.isArray(newItemAsn.result.valueBlock.value))) {\n                                throw new Error(\"Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.\");\n                            }\n                            const value = newItemAsn.result.valueBlock.value;\n                            res[key] = Array.from(value, (element) => converter.fromASN(element));\n                        }\n                        else {\n                            res[key] = Array.from(asn1SchemaValue, (element) => converter.fromASN(element));\n                        }\n                    }\n                    else {\n                        let value = asn1SchemaValue;\n                        if (schemaItem.implicit) {\n                            let newItem;\n                            if (isConvertible(schemaItemType)) {\n                                newItem = new schemaItemType().toSchema(\"\");\n                            }\n                            else {\n                                const Asn1TypeName = AsnPropTypes[schemaItemType];\n                                const Asn1Type = asn1js[Asn1TypeName];\n                                if (!Asn1Type) {\n                                    throw new Error(`Cannot get '${Asn1TypeName}' class from asn1js module`);\n                                }\n                                newItem = new Asn1Type();\n                            }\n                            newItem.valueBlock = value.valueBlock;\n                            value = asn1js.fromBER(newItem.toBER(false)).result;\n                        }\n                        res[key] = converter.fromASN(value);\n                    }\n                }\n                else {\n                    if (schemaItem.repeated) {\n                        if (!Array.isArray(asn1SchemaValue)) {\n                            throw new Error(\"Cannot get list of items from the ASN.1 parsed value. ASN.1 value should be iterable.\");\n                        }\n                        res[key] = Array.from(asn1SchemaValue, (element) => this.fromASN(element, schemaItemType));\n                    }\n                    else {\n                        res[key] = this.fromASN(asn1SchemaValue, schemaItemType);\n                    }\n                }\n            }\n            return res;\n        }\n        catch (error) {\n            if (error instanceof AsnSchemaValidationError) {\n                error.schemas.push(target.name);\n            }\n            throw error;\n        }\n    }\n}\n","import * as asn1js from \"asn1js\";\nimport * as converters from \"./converters\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport { isConvertible, isArrayEqual } from \"./helper\";\nimport { schemaStorage } from \"./storage\";\nexport class AsnSerializer {\n    static serialize(obj) {\n        if (obj instanceof asn1js.BaseBlock) {\n            return obj.toBER(false);\n        }\n        return this.toASN(obj).toBER(false);\n    }\n    static toASN(obj) {\n        if (obj && typeof obj === \"object\" && isConvertible(obj)) {\n            return obj.toASN();\n        }\n        if (!(obj && typeof obj === \"object\")) {\n            throw new TypeError(\"Parameter 1 should be type of Object.\");\n        }\n        const target = obj.constructor;\n        const schema = schemaStorage.get(target);\n        schemaStorage.cache(target);\n        let asn1Value = [];\n        if (schema.itemType) {\n            if (!Array.isArray(obj)) {\n                throw new TypeError(\"Parameter 1 should be type of Array.\");\n            }\n            if (typeof schema.itemType === \"number\") {\n                const converter = converters.defaultConverter(schema.itemType);\n                if (!converter) {\n                    throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                }\n                asn1Value = obj.map((o) => converter.toASN(o));\n            }\n            else {\n                asn1Value = obj.map((o) => this.toAsnItem({ type: schema.itemType }, \"[]\", target, o));\n            }\n        }\n        else {\n            for (const key in schema.items) {\n                const schemaItem = schema.items[key];\n                const objProp = obj[key];\n                if (objProp === undefined\n                    || schemaItem.defaultValue === objProp\n                    || (typeof schemaItem.defaultValue === \"object\" && typeof objProp === \"object\"\n                        && isArrayEqual(this.serialize(schemaItem.defaultValue), this.serialize(objProp)))) {\n                    continue;\n                }\n                const asn1Item = AsnSerializer.toAsnItem(schemaItem, key, target, objProp);\n                if (typeof schemaItem.context === \"number\") {\n                    if (schemaItem.implicit) {\n                        if (!schemaItem.repeated\n                            && (typeof schemaItem.type === \"number\" || isConvertible(schemaItem.type))) {\n                            const value = {};\n                            value.valueHex = asn1Item instanceof asn1js.Null ? asn1Item.valueBeforeDecodeView : asn1Item.valueBlock.toBER();\n                            asn1Value.push(new asn1js.Primitive({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context,\n                                },\n                                ...value,\n                            }));\n                        }\n                        else {\n                            asn1Value.push(new asn1js.Constructed({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context,\n                                },\n                                value: asn1Item.valueBlock.value,\n                            }));\n                        }\n                    }\n                    else {\n                        asn1Value.push(new asn1js.Constructed({\n                            optional: schemaItem.optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: schemaItem.context,\n                            },\n                            value: [asn1Item],\n                        }));\n                    }\n                }\n                else if (schemaItem.repeated) {\n                    asn1Value = asn1Value.concat(asn1Item);\n                }\n                else {\n                    asn1Value.push(asn1Item);\n                }\n            }\n        }\n        let asnSchema;\n        switch (schema.type) {\n            case AsnTypeTypes.Sequence:\n                asnSchema = new asn1js.Sequence({ value: asn1Value });\n                break;\n            case AsnTypeTypes.Set:\n                asnSchema = new asn1js.Set({ value: asn1Value });\n                break;\n            case AsnTypeTypes.Choice:\n                if (!asn1Value[0]) {\n                    throw new Error(`Schema '${target.name}' has wrong data. Choice cannot be empty.`);\n                }\n                asnSchema = asn1Value[0];\n                break;\n        }\n        return asnSchema;\n    }\n    static toAsnItem(schemaItem, key, target, objProp) {\n        let asn1Item;\n        if (typeof (schemaItem.type) === \"number\") {\n            const converter = schemaItem.converter;\n            if (!converter) {\n                throw new Error(`Property '${key}' doesn't have converter for type ${AsnPropTypes[schemaItem.type]} in schema '${target.name}'`);\n            }\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element) => converter.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\"\n                    ? asn1js.Sequence\n                    : asn1js.Set;\n                asn1Item = new Container({\n                    value: items,\n                });\n            }\n            else {\n                asn1Item = converter.toASN(objProp);\n            }\n        }\n        else {\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element) => this.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\"\n                    ? asn1js.Sequence\n                    : asn1js.Set;\n                asn1Item = new Container({\n                    value: items,\n                });\n            }\n            else {\n                asn1Item = this.toASN(objProp);\n            }\n        }\n        return asn1Item;\n    }\n}\n","import * as asn1js from \"asn1js\";\nimport { BufferSourceConverter } from \"pvtsutils\";\nimport { AsnParser } from \"./parser\";\nimport { AsnSerializer } from \"./serializer\";\nexport class AsnConvert {\n    static serialize(obj) {\n        return AsnSerializer.serialize(obj);\n    }\n    static parse(data, target) {\n        return AsnParser.parse(data, target);\n    }\n    static toString(data) {\n        const buf = BufferSourceConverter.isBufferSource(data)\n            ? BufferSourceConverter.toArrayBuffer(data)\n            : AsnConvert.serialize(data);\n        const asn = asn1js.fromBER(buf);\n        if (asn.offset === -1) {\n            throw new Error(`Cannot decode ASN.1 data. ${asn.result.error}`);\n        }\n        return asn.result.toString();\n    }\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// node-opcua-crypto\n// ---------------------------------------------------------------------------------------------------------------------\n// Copyright (c) 2014-2022 - Etienne Rossignon - etienne.rossignon (at) gadz.org\n// Copyright (c) 2022-2024 - Sterfive.com\n// ---------------------------------------------------------------------------------------------------------------------\n//\n// This  project is licensed under the terms of the MIT license.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so,  subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// ---------------------------------------------------------------------------------------------------------------------\nimport { Subject } from \"../subject.js\";\nimport { CertificatePurpose } from \"../common.js\";\nimport { getCrypto, x509 } from \"./_crypto.js\";\nimport { getAttributes } from \"./_get_attributes.js\";\nimport { buildPublicKey } from \"./_build_public_key.js\";\nimport { AsnConvert, AsnUtf8StringConverter } from \"@peculiar/asn1-schema\";\n\nexport interface CreateSelfSignCertificateOptions {\n    privateKey: CryptoKey;\n    notBefore?: Date;\n    notAfter?: Date;\n    validity?: number;\n    // CN=common/O=Org/C=US/ST=State/L=City\n    subject?: string;\n    dns?: string[];\n    ip?: string[];\n    applicationUri?: string;\n    purpose: CertificatePurpose;\n}\n\n/**\n *\n * construct a self-signed certificate\n */\nexport async function createSelfSignedCertificate({\n    privateKey,\n    notAfter,\n    notBefore,\n    validity,\n    subject,\n    dns,\n    ip,\n    applicationUri,\n    purpose,\n}: CreateSelfSignCertificateOptions) {\n    const crypto = getCrypto();\n\n    const publicKey = await buildPublicKey(privateKey);\n\n    const keys = {\n        privateKey,\n        publicKey,\n    };\n\n    const { nsComment, basicConstraints, keyUsageExtension, usages } = getAttributes(purpose);\n\n    notBefore = notBefore || new Date();\n    validity = validity || 0;\n    if (!notAfter) {\n        validity = validity || 365;\n    }\n    notAfter = notAfter || new Date(notBefore.getTime() + validity * 24 * 60 * 60 * 1000);\n\n    const alternativeNameExtensions: x509.JsonGeneralName[] = [];\n    dns && dns.forEach((d) => alternativeNameExtensions.push({ type: \"dns\", value: d }));\n    ip && ip.forEach((d) => alternativeNameExtensions.push({ type: \"ip\", value: d }));\n    applicationUri && alternativeNameExtensions.push({ type: \"url\", value: applicationUri });\n\n    // https://opensource.apple.com/source/OpenSSH/OpenSSH-186/osslshim/heimdal-asn1/rfc2459.asn1.auto.html\n    const ID_NETSCAPE_COMMENT = \"2.16.840.1.113730.1.13\";\n\n    const s = new Subject(subject || \"\");\n    const s1 = s.toStringInternal(\", \");\n    const name = s1;\n\n    const cert = await x509.X509CertificateGenerator.createSelfSigned(\n        {\n            serialNumber: Date.now().toString(),\n            name,\n            notBefore,\n            notAfter,\n\n            signingAlgorithm: { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-256\" } },\n\n            keys,\n\n            extensions: [\n                new x509.Extension(ID_NETSCAPE_COMMENT, false, AsnConvert.serialize(AsnUtf8StringConverter.toASN(nsComment))),\n                // new x509.BasicConstraintsExtension(true, 2, true),\n                basicConstraints,\n                new x509.ExtendedKeyUsageExtension(keyUsageExtension, true),\n                new x509.KeyUsagesExtension(usages, true),\n                await x509.SubjectKeyIdentifierExtension.create(keys.publicKey),\n                await x509.AuthorityKeyIdentifierExtension.create(keys.publicKey),\n                new x509.SubjectAlternativeNameExtension(alternativeNameExtensions),\n            ],\n        },\n        crypto\n    );\n\n    return { cert: cert.toString(\"pem\"), der: cert };\n}\n"],"mappings":"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","names":["TagType","assert","import_assert","import_assert","import_assert","assert","block","buffer","assert","t","pkg_hexy","assert","constants","PaddingAlgorithm","publicEncrypt1","privateDecrypt1","jsrsasign","doDebug","version","modulus","publicExponent","privateExponent","prime1","prime2","exponent1","exponent2","b","import_crypto","__crypto","CertificatePurpose","import_assert","import_jsrsasign","jsrsasign","assert","import_assert","import_crypto","import_assert","assert","assert","blockInfo","depth","t","import_crypto","import_crypto","x509","doDebug","nativeCrypto","PeculiarWebCrypto","crypto","x509","crypto","doDebug","KeyObject","x509","crypto","crypto","x509","retBuf","retView","_a","retView","tempBufferView","plus","asn1","AsnTypeTypes","AsnPropTypes","_a","_a","crypto","x509"]}